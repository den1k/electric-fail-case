{"version":3,"sources":["net/cgrand/xforms/rfs.cljc"],"mappings":"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","names":["net.cgrand.xforms.rfs/cmp","f","a","b","r","var_args","G__60445","net.cgrand.xforms.rfs/minimum","js/Error","comparator","x","absolute-maximum","cljs.core/keyword-identical?","G__60460","net.cgrand.xforms.rfs/maximum","absolute-minimum","net.cgrand.xforms.rfs/min","net.cgrand.xforms.rfs.minimum","cljs.core/compare","net.cgrand.xforms.rfs/max","net.cgrand.xforms.rfs.maximum","G__60471","net.cgrand.xforms.rfs/avg","acc","net.cgrand.xforms.rfs.avg","w","or__5045__auto__","G__60497","G__60507","net.cgrand.xforms.rfs/sd","s","n","Math/sqrt","m","d","m'","G__60531","G__60537","net.cgrand.xforms.rfs/last","_","G__60552","net.cgrand.xforms.rfs/some","cljs.core/reduced","G__60566","net.cgrand.xforms.rfs/str!","js/goog.string.StringBuffer","sb","x_60570","x_60571","net.cgrand.xforms.rfs/str","cljs.core.completing","cljs.core/str"],"sourcesContent":["(ns net.cgrand.xforms.rfs\n  {:author \"Christophe Grand\"}\n  (:refer-clojure :exclude [str last min max some])\n  #?(:cljs (:require-macros\n             [net.cgrand.macrovich :as macros]\n             [net.cgrand.xforms.rfs :refer [or-instance?]])\n      :clj (:require [net.cgrand.macrovich :as macros]))\n  (:require [#?(:clj clojure.core :cljs cljs.core) :as core])\n  #?(:cljs (:import [goog.string StringBuffer])))\n\n(macros/deftime\n  (defmacro ^:private or-instance? [class x y]\n    (let [xsym (gensym 'x_)]\n      `(let [~xsym ~x]\n         (if (instance? ~class ~xsym) ~(with-meta xsym {:tag class}) ~y)))))\n\n(declare str!)\n\n(macros/usetime\n\n#? (:cljs\n     (defn ^:private cmp [f a b]\n       (let [r (f a b)]\n         (cond\n           (number? r) r\n           r -1\n           (f b a) 1\n           :else 0))))\n  \n(defn minimum\n ([#?(:clj ^java.util.Comparator comparator :cljs comparator)]\n   (fn\n     ([] nil)\n     ([x] x)\n     ([a b] (cond\n              (nil? a) b\n              (nil? b) a\n              (pos? (#?(:clj .compare :cljs cmp) comparator a b)) b\n              :else a))))\n ([#?(:clj ^java.util.Comparator comparator :cljs comparator) absolute-maximum]\n   (fn\n     ([] ::+infinity)\n     ([x] (if (#?(:clj identical? :cljs keyword-identical?) ::+infinity x)\n            absolute-maximum\n            x))\n     ([a b] (if (or (#?(:clj identical? :cljs keyword-identical?) ::+infinity a) (pos? (#?(:clj .compare :cljs cmp) comparator a b))) b a)))))\n\n(defn maximum\n  ([#?(:clj ^java.util.Comparator comparator :cljs comparator)]\n    (fn\n     ([] nil)\n     ([x] x)\n     ([a b] (cond\n              (nil? a) b\n              (nil? b) a\n              (neg? (#?(:clj .compare :cljs cmp) comparator a b)) b\n              :else a))))\n  ([#?(:clj ^java.util.Comparator comparator :cljs comparator) absolute-minimum]\n    (fn\n      ([] ::-infinity)\n      ([x] (if (#?(:clj identical? :cljs keyword-identical?) ::-infinity x)\n             absolute-minimum\n             x))\n      ([a b] (if (or (#?(:clj identical? :cljs keyword-identical?) ::-infinity a) (neg? (#?(:clj .compare :cljs cmp) comparator a b))) b a)))))\n\n(def min (minimum compare))\n\n(def max (maximum compare))\n\n(defn avg\n  \"Reducing fn to compute the arithmetic mean.\"\n  ([] nil)\n  ([^doubles acc] (when acc (/ (aget acc 1) (aget acc 0))))\n  ([acc x] (avg acc x 1))\n  ([^doubles acc x w] ; weighted mean\n    (let [acc (or acc #?(:clj (double-array 3) :cljs #js [0.0 0.0]))]\n      (doto acc\n        (aset 0 (+ (aget acc 0) w))\n        (aset 1 (+ (aget acc 1) (* w x)))))))\n\n(defn sd\n  \"Reducing fn to compute the standard deviation. Returns 0 if no or only one item.\"\n  ([] #?(:clj (double-array 3) :cljs #js [0.0 0.0 0.0]))\n  ([^doubles a]\n    (let [s (aget a 0) n (aget a 2)]\n      (if (< 1 n)\n        (Math/sqrt (/ s (dec n)))\n        0.0)))\n  ([^doubles a x]\n    (let [s (aget a 0) m (aget a 1) n (aget a 2)\n          d (- x m)\n          n (inc n)\n          m' (+ m (/ d n))]\n      (doto a\n        (aset 0 (+ s (* d (- x m'))))\n        (aset 1 m')\n        (aset 2 n)))))\n\n(defn last\n  \"Reducing function that returns the last value.\"\n  ([] nil)\n  ([x] x)\n  ([_ x] x))\n\n(defn some\n  \"Reducing function that returns the first logical true value.\"\n  ([] nil)\n  ([x] x)\n  ([_ x] (when x (reduced x))))\n\n(defn str!\n  \"Like xforms/str but returns a StringBuilder.\"\n  ([] (#?(:clj StringBuilder. :cljs StringBuffer.)))\n  ([sb] (or-instance? #?(:clj StringBuilder :cljs StringBuffer) sb (#?(:clj StringBuilder. :cljs StringBuffer.) (core/str sb)))) ; the instance? checks are for compatibility with str in case of seeded reduce/transduce.\n  ([sb x] (.append (or-instance? #?(:clj StringBuilder :cljs StringBuffer) sb (#?(:clj StringBuilder. :cljs StringBuffer.) (core/str sb))) x)))\n\n(def str\n  \"Reducing function to build strings in linear time. Acts as replacement for clojure.core/str in a reduce/transduce call.\"\n  (completing str! core/str))\n\n#_(defn juxt\n   \"Returns a reducing fn which compute all rfns at once and whose final return\n   value is a vector of the final return values of each rfns.\"\n   [& rfns]\n   (let [rfns (mapv ensure-kvrf rfns)]\n     (kvrf\n       ([] (mapv #(vector % (volatile! (%))) rfns))\n       ([acc] (mapv (fn [[rf vacc]] (rf (unreduced @vacc))) acc))\n       ([acc x]\n         (let [some-unreduced (core/reduce (fn [some-unreduced [rf vacc]] \n                                            (when-not (reduced? @vacc) (vswap! vacc rf x) true))\n                                false acc)]\n           (if some-unreduced acc (reduced acc))))\n       ([acc k v]\n         (let [some-unreduced (core/reduce (fn [some-unreduced [rf vacc]] \n                                            (when-not (reduced? @vacc) (vswap! vacc rf k v) true))\n                                false acc)]\n           (if some-unreduced acc (reduced acc)))))))\n\n#_(defn juxt-map\n   [& key-rfns]\n   (let [f (apply juxt (take-nth 2 (next key-rfns)))\n         keys (vec (take-nth 2 key-rfns))]\n     (let [f (ensure-kvrf f)]\n       (kvrf\n         ([] (f))\n         ([acc] (zipmap keys (f acc)))\n         ([acc x] (f acc x))\n         ([acc k v] (f acc k v))))))\n)\n"]}