{"version":3,"sources":["dash/ui/views.cljc"],"mappings":";;AA0DA,AAGA,AA+EA,AAMA,AAKA,qBAAA,rBAAMA,kDAAMC;AAAZ,AAAA;;AAIA,AAYA,AASA","names":["dash.ui.views/$fmt","num"],"sourcesContent":["(ns dash.ui.views\n  #?(:cljs (:require-macros dash.ui.views))\n  (:require\n    [hyperfiddle.electric :as e]\n    [stuffs.util :as su]\n    [hyperfiddle.electric-dom2 :as dom]\n    [spyscope.core]\n    [hyperfiddle.electric-ui4 :as ui]\n    [tick.core :as t]\n    [stuffs.js-interop :as j]\n    #?@(:clj [[dash.plugin.harvest :as hvst]\n              [thi.ng.geom.viz.core :as viz]\n              [thi.ng.geom.svg.core :as svg]]\n        :cljs [[\"vega-lite\" :as vl]])\n    ))\n\n#?(:clj\n   (defn svg-str [attribs x]\n     (->> x\n          viz/svg-plot2d-cartesian\n          (svg/svg attribs)\n          svg/serialize)))\n\n#?(:clj\n   (defn sparkline-svg-str\n     [{:keys [values width height fill stroke]\n       :or   {fill \"none\" stroke \"#EEE\" width 45 height 20}}]\n     {:pre [(not-empty values)]}\n     (let [min-y     (apply min values)\n           max-y     (apply max values)\n           xy-values (map-indexed vector values)\n           [max-yx _] (su/ffilter (fn [[x y]] (= y max-y)) xy-values)\n           min-x     0\n           max-x     (count values)\n           h-pad     3\n           v-pad     h-pad]\n       (->>\n         {:x-axis (viz/linear-axis\n                    {:domain  [min-x max-x]\n                     :range   [h-pad (- width h-pad)]\n                     :visible false})\n          :y-axis (viz/linear-axis\n                    {:domain  [max-y min-y]\n                     :range   [v-pad (- height v-pad)]\n                     :visible false})\n\n          :data   [{:values  xy-values\n                    :attribs {:fill fill :stroke stroke :stroke-width (str 1.5 \"px\")}\n                    :layout  viz/svg-line-plot}\n                   {:values  [[max-yx max-y]]\n                    :attribs {:fill         \"red\"\n                              :stroke-width \"10px\"\n                              ;:stroke \"#f60\"\n                              }\n                    :shape   (fn [[p]] (svg/circle p 3))\n                    :layout  viz/svg-scatter-plot}]}\n         (svg-str {:width width :height height})))))\n\n(comment\n  (sparkline-svg-str {:values [1 2 3 4 5]}))\n\n(e/defn Sparkline [opts]\n  (e/client\n    (dom/div\n      (j/assoc! dom/node :innerHTML (e/server (sparkline-svg-str opts))))))\n\n\n\n#_(def bar-viz-spec\n    {:x-axis (viz/linear-axis\n               {:domain [1999 2016]\n                :range  [50 580]\n                :major  1\n                :pos    280\n                :label  (viz/default-svg-label int)})\n     :y-axis (viz/linear-axis\n               {:domain      [0 100]\n                :range       [280 20]\n                :major       10\n                :minor       5\n                :pos         50\n                :label-dist  15\n                :label-style {:text-anchor \"end\"}})\n     :grid   {:minor-y true}})\n\n#_#_(-> viz-spec\n        (assoc :data [((bar-spec 1 20) 0 \"#0af\")])\n        (viz/svg-plot2d-cartesian)\n        (export-viz \"bars.svg\"))\n\n        (-> viz-spec\n            (assoc :data (map-indexed (bar-spec 3 6) [\"#0af\" \"#fa0\" \"#f0a\"]))\n            (viz/svg-plot2d-cartesian)\n            (export-viz \"bars-interleave.svg\"))\n\n#?(:clj\n   (defn rev-comp-chart-viz-svg []\n     (let [{:keys [this-year last-year max]} (hvst/revenue-by-month-compared-to-last-year)\n           viz-spec {:x-axis (viz/linear-axis\n                               {:domain     [0 13]\n                                :range      [30 400]\n                                :major      1\n                                :pos        180\n                                :major-size 5\n                                :label      (viz/default-svg-label\n                                              #(or (some-> %\n                                                           hvst/month-idx->month\n                                                           (subs 0 3))\n                                                   \"\"))})\n                     :y-axis (viz/linear-axis\n                               {:domain      [0 max]\n                                :range       [180 0]\n                                :major       2e4\n                                ;:minor       1e4\n                                :major-size  5\n                                :pos         30\n                                :label-dist  5\n                                :label       (viz/default-svg-label #(format \"%.0fK\" (/ % 1000)))\n                                :label-style {:text-anchor \"end\"}})\n                     :grid   true\n                     :data   [{:values     (update-keys last-year hvst/month->month-idx)\n                               :attribs    {:stroke       \"blue\"\n                                            :stroke-width (str (dec 6) \"px\")}\n                               :layout     viz/svg-bar-plot\n                               :interleave 2\n                               :bar-width  6\n                               :offset     0}\n                              {:values     (update-keys this-year hvst/month->month-idx)\n                               :attribs    {:stroke       \"orange\"\n                                            :stroke-width (str (dec 6) \"px\")}\n                               :layout     viz/svg-bar-plot\n                               :interleave 2\n                               :bar-width  6\n                               :offset     1}]}\n           svg      (svg-str {:width  400\n                              :height 200}\n                             viz-spec)]\n       svg)))\n\n\n(e/defn MonthlyRevCompBarChart []\n  (e/client\n    (js/console.log vl)\n    (dom/div (j/assoc! dom/node :innerHTML (e/server (rev-comp-chart-viz-svg))))))\n\n\n(e/defn innerHTML [html]\n  (e/client\n    (dom/div\n      (j/assoc! dom/node :innerHTML (e/server html)))))\n\n(defn $fmt [num]\n  #?(:clj\n     (format \"$%,.2f\" num)))\n\n(e/defn HarvestYearSummary [year]\n  (e/server\n    (let [{:as summary :strs [Year Total]} (hvst/year-summary\n                                             {:year          year\n                                              :invoice-state \"paid\"})]\n      (e/client\n        (dom/h1 (dom/text Year \" Revenue: \" (e/server ($fmt Total)))))\n      )))\n\n;; bar chart with all years and most profitable\n;; categories per year as smaller bars could be cool\n\n(e/defn Summary []\n  (e/server\n    (let [this-year (t/int (t/year))\n          last-year (dec this-year)]\n      (new HarvestYearSummary last-year)\n      (new HarvestYearSummary this-year))\n    (new MonthlyRevCompBarChart))\n  )\n\n(e/defn App []\n  (e/client (e/server \"foo\"))\n  #_(new Summary)\n  )\n"]}