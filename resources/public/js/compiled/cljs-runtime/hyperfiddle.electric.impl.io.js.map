{"version":3,"sources":["hyperfiddle/electric/impl/io.cljc"],"mappings":"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","names":["cljs.core/PROTOCOL_SENTINEL","com.cognitect.transit.types/UUID","hyperfiddle.electric.impl.io/default-write-handler","cognitect.transit.write_handler","x","hyperfiddle.electric.impl.io/-last-unserializable-for-repl","hyperfiddle.logger.log_STAR_","cljs.core.pr_str","cljs.core/type","_","hyperfiddle.electric.impl.io/->cache","size","G__33432","arr33433","cljs.core/identity","cljs.core.object_array","hyperfiddle.electric.impl.io/cache-add","cache","k","v","i","cljs.core/count","cljs.core._EQ_","arr33446","arr33448","widx","arr33459","k__29345__auto__","v__29346__auto__","arr33462","p1__33441#","cljs.core/mod","arr33469","hyperfiddle.electric.impl.io/cache-get","arr33476","arr33477","hyperfiddle.electric.impl.io/cache->map","ac","cljs.core/transient","cljs.core.assoc_BANG_","arr33488","arr33489","cljs.core/persistent!","hyperfiddle.electric.impl.io/!ex-cache","hyperfiddle.electric.impl.io/save-original-ex!","fi","id","hyperfiddle.electric.debug/ex-id","temp__5808__auto__","cause","cljs.core/ex-cause","js/hyperfiddle.electric.FailureInfo","hyperfiddle.electric.impl.io/get-original-ex","hyperfiddle.electric.impl.io/write-opts","js/hyperfiddle.electric.Failure","err","js/missionary.Cancelled","js/hyperfiddle.electric.Pending","js/hyperfiddle.electric.Remote","hyperfiddle.electric.debug/serializable","cljs.core/ex-data","cljs.core/ex-message","hyperfiddle.electric.impl.io/read-opts","cognitect.transit/read-handler","p__33522","vec__33524","seq__33525","cljs.core/seq","first__33526","cljs.core/first","cljs.core/next","tag","args","G__33531","cljs.core/Keyword","js/Error","vec__33535","cljs.core.nth","message","data","hyperfiddle.electric.debug.ex_info_STAR_","vec__33539","or__5045__auto__","hyperfiddle.electric.impl.io/set-ints","cljs.core.partial","cljs.core/reduce-kv","r","n","offset","G__33550","hyperfiddle.electric.impl.io/encode-numbers","xs","required","G__33562","js/ArrayBuffer","js/DataView","hyperfiddle.electric.impl.io/decode-numbers","b","cljs.core/vec","hyperfiddle.electric.impl.io/t_hyperfiddle$electric$impl$io33565","rf","l","G__33571","G__33572","hyperfiddle.electric.impl.io/transit-writer","cognitect.transit.writer","hyperfiddle.electric.impl.io/encode","cognitect.transit/write","hyperfiddle.electric.impl.io/transit-reader","cognitect.transit.reader","hyperfiddle.electric.impl.io/decode","s","cognitect.transit/read","hyperfiddle.electric.impl.io/decode-str","e33588","G__33589","t","cljs.core.ex_info","hyperfiddle.electric.impl.io/chunk-size","hyperfiddle.electric.impl.io/message-reader","?read","cr33597-state","cr33597-place-7","cr33597-exception","e33778","cr33597-place-22","cr33597-place-32","cr33597-place-33","cr33597-place-34","cr33597-block-8","e33784","cr33597-place-30","missionary.core/unpark","cr33597-place-31","cr33597-block-4","e33792","cr33597-place-2","cr33597-place-4","cr33597-place-37","cr33597-place-38","cr33597-place-39","cr33597-place-40","cr33597-place-41","cr33597-place-42","cr33597-block-1","e33795","cr33597-place-11","cr33597-place-14","cr33597-place-15","cr33597-place-16","cr33597-place-17","cr33597-place-18","cr33597-place-19","cr33597-place-20","cr33597-place-21","cr33597-place-23","cr33597-place-24","cr33597-place-25","cr33597-place-26","cr33597-place-27","cr33597-place-28","cr33597-block-7","cr33597-block-5","e33807","cr33597-place-29","cr33597-block-6","missionary.core/park","e33821","cr33597-place-0","cr33597-place-1","cljs.core/IVector","e33825","cr33597-place-8","cr33597-place-9","cr33597-place-10","cr33597-place-12","cr33597-place-13","e33833","cr33597-place-3","cr33597-block-2","e33842","cr33597-place-5","cr33597-place-6","cr33597-block-9","cr33597-block-3","e33845","cr33597-place-35","cr33597-place-36","cr33597-block-10","e33855","cloroutine.impl/coroutine","G__33874","cr33597-block-0","missionary.core/sp-run","G__33829","fexpr__33828","G__33804","G__33805","fexpr__33803","cljs.core/conj!","G__33799","fexpr__33798","G__33866","fexpr__33865","G__33862","G__33863","fexpr__33861","G__33836","fexpr__33835","G__33812","fexpr__33811","G__33816","G__33817","G__33818","fexpr__33815","cljs.core/reduce","G__33820","fexpr__33819","G__33789","fexpr__33788","p1__33879#","hyperfiddle.electric.impl.io/message-writer","write","cr33884-state","cr33884-place-50","cr33884-place-64","cr33884-place-65","cr33884-place-66","cr33884-place-67","cr33884-place-68","cr33884-place-69","cr33884-place-70","cr33884-place-71","cr33884-place-72","cr33884-place-73","cr33884-block-12","cr33884-exception","e34127","cr33884-place-57","cr33884-place-58","cr33884-place-59","cr33884-place-60","cr33884-place-61","cr33884-place-62","cr33884-block-10","e34145","cr33884-place-5","cr33884-place-10","cr33884-place-11","cr33884-place-12","cr33884-place-13","cr33884-place-14","cr33884-place-15","cr33884-place-16","cr33884-place-17","cr33884-place-18","cr33884-place-19","cr33884-place-20","cr33884-place-21","cr33884-place-22","hyperfiddle.logger/log*","cr33884-place-23","cr33884-place-24","cr33884-place-25","cr33884-place-26","cr33884-place-27","cr33884-place-28","cr33884-place-29","cr33884-block-3","e34155","cr33884-place-0","cr33884-place-1","cr33884-place-2","cr33884-place-3","cr33884-place-4","cr33884-block-1","e34175","cr33884-place-48","cr33884-place-49","cr33884-block-8","e34186","cr33884-place-6","cr33884-place-7","cr33884-place-8","cr33884-place-9","cr33884-block-7","cr33884-block-2","e34195","cr33884-place-46","cr33884-place-47","e34200","cr33884-place-63","cr33884-block-13","e34205","cr33884-place-74","cr33884-place-75","cr33884-place-76","cr33884-place-77","cr33884-place-78","e34206","cr33884-place-42","cr33884-place-43","cr33884-place-44","cr33884-place-45","cr33884-block-6","e34218","e34222","cr33884-place-33","cr33884-place-34","cr33884-place-35","cr33884-place-36","cr33884-place-37","cr33884-place-38","cljs.core/IMap","cr33884-place-39","cr33884-place-40","cr33884-place-41","e34227","cr33884-block-5","cr33884-place-51","cr33884-place-52","cr33884-place-53","cr33884-place-54","cr33884-place-55","cr33884-place-56","cr33884-block-11","cr33884-block-9","e34233","cr33884-block-14","e34238","cr33884-place-30","cr33884-place-31","cr33884-place-32","e34239","cr33884-block-4","G__34248","cr33884-block-0","G__34184","fexpr__34183","G__34181","fexpr__34179","cljs.core/pop","G__34158","fexpr__34157","G__34163","fexpr__34162","G__34165","fexpr__34164","G__34168","G__34169","G__34170","G__34171","fexpr__34167","G__34221","fexpr__34220","G__34244","fexpr__34243","G__34229","G__34230","G__34231","fexpr__34228","cljs.core/ex-info","G__34190","fexpr__34189","cljs.core/peek","G__34236","fexpr__34235","G__34141","fexpr__34140","G__34138","fexpr__34137","G__34134","G__34135","G__34136","fexpr__34133","cljs.core/subvec","G__34212","G__34213","fexpr__34211","G__34153","fexpr__34152","G__34151","fexpr__34150","hyperfiddle.electric.impl.io/decoder","G__34258","cljs.core.conj","cljs.core.into","hyperfiddle.electric.impl.io/encoder","cljs.core.reduce","cljs.core.eduction","cljs.core.map","cljs.core.partition_all","G__34274","G__34275","G__34276","var_args","G__34279","hyperfiddle.electric.impl.io/foreach"],"sourcesContent":[";; Facilities for encoding/decoding of Electric protocol messages.\n;; * Data frames can be arbitrary clojure data or Electric failures. Serialization is done via transit json, the failure\n;; error is preserved if it's an instance of `hyperfiddle.electric.Pending` or `hyperfiddle.electric.Cancelled`, otherwise\n;; the error is logged and turned into an instance of `hyperfiddle.electric.Remote`.\n;; * Control frames are vectors of signed integers. Serialization is the concatenation of the binary representation of\n;; these numbers as fixed-length 32-bit, big endian.\n\n(ns ^:no-doc hyperfiddle.electric.impl.io\n  (:require [missionary.core :as m]\n            [cognitect.transit :as t]\n            [hyperfiddle.logger :as log]\n            [hyperfiddle.electric.debug :as dbg]\n            [hyperfiddle.rcf :as rcf :refer [tests with tap %]]\n            #?(:cljs [com.cognitect.transit.types])\n            [hyperfiddle.electric.impl.array-fields :as a])\n  (:import (missionary Cancelled)\n           (hyperfiddle.electric Failure Pending Remote FailureInfo)\n           #?(:clj (java.nio ByteBuffer))\n           #?(:clj (java.io ByteArrayInputStream ByteArrayOutputStream))\n           #?(:clj (clojure.lang IReduceInit))))\n\n#?(:cljs (extend-type com.cognitect.transit.types/UUID IUUID)) ; https://github.com/hyperfiddle/hyperfiddle/issues/728\n\n(def default-write-handler ; Intercepts unserializable values, logs and return nil\n  (t/write-handler ; Adapted from `com.cognitect.transit.impl.WriteHandlers.NullWriteHandler`\n    (fn [x]\n      (def -last-unserializable-for-repl x)\n      (log/info \"Unserializable reference transfer:\" (pr-str (type x)) (str x))\n      \"_\")\n    (fn [x] nil)\n    (fn [_] \"\")))\n\n(defn ->cache \"Builds a minimal, cljc map/bounded-queue cache.\n  One slot per key (map).\n  Reaching `size` pops oldest value (bounded-queue).\" [size]\n  (doto (object-array (inc (* size 2))) (a/set (* size 2) 0)))\n(defn cache-add [cache k v]\n  (when-not (loop [i 0]\n              (when (< i (dec (count cache)))\n                (if (= k (a/get cache i))\n                  (do (a/set cache (inc i) v) true)\n                  (recur (+ i 2)))))\n    (let [widx (a/getswap cache (dec (count cache)) #(mod (+ % 2) (dec (count cache))))]\n      (a/set cache widx k, (inc widx) v))))\n(defn cache-get [cache k]\n  (loop [i 0]\n    (when (< i (dec (count cache)))\n      (if (= k (a/get cache i))\n        (a/get cache (inc i))\n        (recur (+ i 2))))))\n(defn cache->map [cache]\n  (loop [i 0, ac (transient {})]\n    (if (< i (dec (count cache)))\n      (recur (+ i 2) (assoc! ac (a/get cache i) (a/get cache (inc i))))\n      (persistent! ac))))\n\n(tests \"keyed cache\"\n  (def !c (->cache 1))\n  (cache-add !c 1 2) (cache-get !c 1) := 2\n  (cache-add !c 1 3) (cache-get !c 1) := 3\n  (cache-add !c 2 4) (cache-get !c 2) := 4\n  (cache->map !c) := {2 4}\n\n  \"size 2\"\n  (def !c (->cache 2))\n  (cache-add !c 1 1)\n  (cache-add !c 2 2)\n  (cache-add !c 2 2)\n  (cache->map !c) := {1 1, 2 2})\n\n(def !ex-cache (->cache 16))\n(defn save-original-ex! [fi]\n  (let [id (dbg/ex-id fi)]\n    (when-some [cause (ex-cause fi)]\n      (when-not (instance? FailureInfo cause)\n        (cache-add !ex-cache id cause)))\n    id))\n(defn get-original-ex [id] (cache-get !ex-cache id))\n\n(def write-opts\n  {:handlers\n   {Failure\n    (t/write-handler\n      (fn [_] \"failure\")\n      (fn [x]\n        (let [err (.-error ^Failure x)]\n          (cond (instance? Cancelled err) [:cancelled]\n                (instance? Pending err)   [:pending]\n                (instance? Remote err)    [:remote (dbg/serializable (ex-data err))]\n                :else                     [:exception (ex-message err) (dbg/serializable (ex-data err))\n                                           (save-original-ex! err)]))))\n    :default default-write-handler}         ; cljs\n   :default-handler default-write-handler}) ; clj\n\n(def read-opts\n  {:handlers\n   {\"failure\"\n    (t/read-handler\n      (fn [[tag & args]]\n        (case tag\n          :exception (let [[message data id] args]\n                       (Failure. (dbg/ex-info* message data id nil)))\n          :remote    (let [[data] args]\n                       (Failure. (dbg/ex-info* \"Remote error\" (or data {}))))\n          :pending   (Failure. (Pending.))\n          :cancelled (Failure. (Cancelled.)))))}})\n\n(def set-ints\n  (partial reduce-kv\n    (fn [r i n]\n      (let [offset (bit-shift-left i 2)]\n        #?(:clj  (.putInt ^ByteBuffer r offset n)\n           :cljs (doto r (.setInt32 offset n)))))))\n\n(defn encode-numbers\n  \"Encode a control frame to a binary segment.\"\n  [xs]\n  (let [required (bit-shift-left (count xs) 2)] ; size of bytebuffer is 4 \u00d7 (count xs), so shift by 2\n    #?(:clj (set-ints (ByteBuffer/allocate required) xs)\n       :cljs (doto (js/ArrayBuffer. required)\n               (-> (js/DataView.) (set-ints xs))))))\n\n(defn decode-numbers\n  \"Decode a control frame from a binary segment.\"\n  [b]\n  (vec\n    (reify\n      #?(:clj IReduceInit :cljs IReduce)\n      #?(:clj (reduce [_ rf r]\n                (let [l (.limit ^ByteBuffer b)]\n                  (loop [r r, i (int 0)]\n                    (if (< i l)\n                      (recur (rf r (.getInt ^ByteBuffer b i))\n                        (unchecked-add-int i 4)) r))))\n         :cljs (-reduce [_ rf r]\n                 (let [l (.-byteLength b)\n                       v (js/DataView. b)]\n                   (loop [r r, i 0]\n                     (if (< i l)\n                       (recur (rf r (.getInt32 v i))\n                         (+ i 4)) r))))))))\n\n#?(:cljs (def transit-writer (t/writer :json write-opts)))\n\n(defn encode\n  \"Encode a data frame to transit json\"\n  [x]\n  #?(:clj (let [out (ByteArrayOutputStream.)]\n            (t/write (t/writer out :json write-opts) x)\n            (.toString out))\n     :cljs (t/write transit-writer x)))\n\n#?(:cljs (def transit-reader (t/reader :json read-opts)))\n\n(defn decode\n  \"Decode a data frame from transit json\"\n  [^String s]\n  #?(:clj (t/read (t/reader (ByteArrayInputStream. (.getBytes s \"UTF-8\")) :json read-opts))\n     :cljs (t/read transit-reader s)))\n\n(defn decode-str [x]\n  (try (doto (decode x) (->> (log/trace \"\ud83d\udd3d\")))\n    (catch #?(:clj Throwable :cljs :default) t\n      (throw (ex-info \"Failed to decode\" {:value x} t)))))\n\n(tests \"FailureInfo\"\n  (def cause (ex-info \"boom\" {}))\n  (def ex (dbg/ex-info* \"x\" {} cause))\n  (def sent (-> ex Failure. encode decode .-error))\n  \"keeps the ID across the wire\"\n  (dbg/ex-id ex) := (dbg/ex-id sent)\n  \"can restore cause\"\n  (get-original-ex (dbg/ex-id sent)) := cause\n  nil)\n\n; Jetty rejects websocket payloads larger than 65536 bytes by default\n; We\u2019ll chop messages if needed\n(def chunk-size (bit-shift-right 65536 2))\n\n(defn ^:deprecated message-reader [?read]\n  \"Returns a discrete flow of read Electric messages from provided task, emitting individual frames.\"\n  (m/sp\n    (loop [data (transient [])]\n      (let [x (m/? ?read)]\n        (if (string? x)\n          (recur (conj! data (decode-str x)))\n          (persistent!\n            (conj! data\n              (loop [x       x\n                     control (transient [])]\n                (let [xs      (decode-numbers x)\n                      control (reduce conj! control xs)]\n                  (if (< (count xs) chunk-size) ; final frame\n                    (persistent! control)\n                    (recur (m/? ?read) control)))))))))))\n\n\n(defn ^:deprecated message-writer\n  \"Returns a function taking an Electric message and returning a task writing it as individual frames using provided\n   function. Might cut a message into chunks if its size would exceed the server payload limit.\n   An empty message (0b) is written to notify the end of frame.\"\n  [write]\n  #(m/sp\n     (loop [xs (seq (pop %))]\n       (if-some [[x & xs] xs]\n         (do (log/trace \"\ud83d\udd3c\" x)\n           (m/? (write\n                  (try (encode x)\n                    (catch #?(:clj Throwable :cljs :default) t\n                      (throw (ex-info \"Failed to encode\" {:value x} t))))))\n           (recur xs))\n         (loop [xs (peek %)]\n           (if (>= (count xs) chunk-size)\n             (do (m/? (write (encode-numbers (subvec xs 0 chunk-size))))\n               (recur (subvec xs chunk-size)))\n             (m/? (write (encode-numbers xs)))))))))\n\n(defn ^:deprecated decoder\n  \"A transducer partitioning a sequence of network messages into Electric events.\"\n  [rf]\n  (let [data (doto (object-array 2)\n               (aset 0 []) (aset 1 []))]\n    (fn\n      ([] (rf))\n      ([r]\n       (assert (= [] (aget data 0) (aget data 1)))\n       (rf r))\n      ([r x]\n       (if (string? x)\n         (do (assert (= [] (aget data 1)))\n             (aset data 0 (conj (aget data 0) (decode-str x))) r)\n         (let [xs (decode-numbers x)]\n           (aset data 1 (into (aget data 1) xs))\n           (if (< (count xs) chunk-size)                  ; final frame\n             (let [x (conj (aget data 0) (aget data 1))]\n               (aset data 0 [])\n               (aset data 1 [])\n               (rf r x)) r)))))))\n\n(defn ^:deprecated encoder\n  \"A transducer expanding Electric events to a sequence of network messages.\"\n  [rf]\n  (fn\n    ([] (rf))\n    ([r] (rf r))\n    ([r x]\n     (let [r (reduce rf r (eduction (map encode) (pop x)))\n           r (reduce rf r (eduction (partition-all chunk-size) (map encode-numbers) (peek x)))]\n       (case (mod (count (peek x)) chunk-size)\n         0 (rf r (encode-numbers [])) r)))))\n\n(defn foreach\n  ([r] r)\n  ([r x] (r x) r))\n"]}