{
"version":3,
"file":"module$node_modules$vega_hierarchy$build$vega_hierarchy.js",
"lineCount":59,
"mappings":"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",
"sources":["node_modules/vega-hierarchy/build/vega-hierarchy.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_hierarchy$build$vega_hierarchy\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-dataflow'), require('vega-util')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-dataflow', 'vega-util'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega));\n})(this, (function (exports, vegaDataflow, vegaUtil) { 'use strict';\n\n  // Build lookup table mapping tuple keys to tree node instances\n  function lookup (tree, key, filter) {\n    const map = {};\n    tree.each(node => {\n      const t = node.data;\n      if (filter(t)) map[key(t)] = node;\n    });\n    tree.lookup = map;\n    return tree;\n  }\n\n  function defaultSeparation$2(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  }\n\n  function meanX(children) {\n    return children.reduce(meanXReduce, 0) / children.length;\n  }\n\n  function meanXReduce(x, c) {\n    return x + c.x;\n  }\n\n  function maxY(children) {\n    return 1 + children.reduce(maxYReduce, 0);\n  }\n\n  function maxYReduce(y, c) {\n    return Math.max(y, c.y);\n  }\n\n  function leafLeft(node) {\n    var children;\n\n    while (children = node.children) node = children[0];\n\n    return node;\n  }\n\n  function leafRight(node) {\n    var children;\n\n    while (children = node.children) node = children[children.length - 1];\n\n    return node;\n  }\n\n  function cluster () {\n    var separation = defaultSeparation$2,\n        dx = 1,\n        dy = 1,\n        nodeSize = false;\n\n    function cluster(root) {\n      var previousNode,\n          x = 0; // First walk, computing the initial x & y values.\n\n      root.eachAfter(function (node) {\n        var children = node.children;\n\n        if (children) {\n          node.x = meanX(children);\n          node.y = maxY(children);\n        } else {\n          node.x = previousNode ? x += separation(node, previousNode) : 0;\n          node.y = 0;\n          previousNode = node;\n        }\n      });\n      var left = leafLeft(root),\n          right = leafRight(root),\n          x0 = left.x - separation(left, right) / 2,\n          x1 = right.x + separation(right, left) / 2; // Second walk, normalizing x & y to the desired size.\n\n      return root.eachAfter(nodeSize ? function (node) {\n        node.x = (node.x - root.x) * dx;\n        node.y = (root.y - node.y) * dy;\n      } : function (node) {\n        node.x = (node.x - x0) / (x1 - x0) * dx;\n        node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n      });\n    }\n\n    cluster.separation = function (x) {\n      return arguments.length ? (separation = x, cluster) : separation;\n    };\n\n    cluster.size = function (x) {\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [dx, dy];\n    };\n\n    cluster.nodeSize = function (x) {\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [dx, dy] : null;\n    };\n\n    return cluster;\n  }\n\n  function count(node) {\n    var sum = 0,\n        children = node.children,\n        i = children && children.length;\n    if (!i) sum = 1;else while (--i >= 0) sum += children[i].value;\n    node.value = sum;\n  }\n\n  function node_count () {\n    return this.eachAfter(count);\n  }\n\n  function node_each (callback, that) {\n    let index = -1;\n\n    for (const node of this) {\n      callback.call(that, node, ++index, this);\n    }\n\n    return this;\n  }\n\n  function node_eachBefore (callback, that) {\n    var node = this,\n        nodes = [node],\n        children,\n        i,\n        index = -1;\n\n    while (node = nodes.pop()) {\n      callback.call(that, node, ++index, this);\n\n      if (children = node.children) {\n        for (i = children.length - 1; i >= 0; --i) {\n          nodes.push(children[i]);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  function node_eachAfter (callback, that) {\n    var node = this,\n        nodes = [node],\n        next = [],\n        children,\n        i,\n        n,\n        index = -1;\n\n    while (node = nodes.pop()) {\n      next.push(node);\n\n      if (children = node.children) {\n        for (i = 0, n = children.length; i < n; ++i) {\n          nodes.push(children[i]);\n        }\n      }\n    }\n\n    while (node = next.pop()) {\n      callback.call(that, node, ++index, this);\n    }\n\n    return this;\n  }\n\n  function node_find (callback, that) {\n    let index = -1;\n\n    for (const node of this) {\n      if (callback.call(that, node, ++index, this)) {\n        return node;\n      }\n    }\n  }\n\n  function node_sum (value) {\n    return this.eachAfter(function (node) {\n      var sum = +value(node.data) || 0,\n          children = node.children,\n          i = children && children.length;\n\n      while (--i >= 0) sum += children[i].value;\n\n      node.value = sum;\n    });\n  }\n\n  function node_sort (compare) {\n    return this.eachBefore(function (node) {\n      if (node.children) {\n        node.children.sort(compare);\n      }\n    });\n  }\n\n  function node_path (end) {\n    var start = this,\n        ancestor = leastCommonAncestor(start, end),\n        nodes = [start];\n\n    while (start !== ancestor) {\n      start = start.parent;\n      nodes.push(start);\n    }\n\n    var k = nodes.length;\n\n    while (end !== ancestor) {\n      nodes.splice(k, 0, end);\n      end = end.parent;\n    }\n\n    return nodes;\n  }\n\n  function leastCommonAncestor(a, b) {\n    if (a === b) return a;\n    var aNodes = a.ancestors(),\n        bNodes = b.ancestors(),\n        c = null;\n    a = aNodes.pop();\n    b = bNodes.pop();\n\n    while (a === b) {\n      c = a;\n      a = aNodes.pop();\n      b = bNodes.pop();\n    }\n\n    return c;\n  }\n\n  function node_ancestors () {\n    var node = this,\n        nodes = [node];\n\n    while (node = node.parent) {\n      nodes.push(node);\n    }\n\n    return nodes;\n  }\n\n  function node_descendants () {\n    return Array.from(this);\n  }\n\n  function node_leaves () {\n    var leaves = [];\n    this.eachBefore(function (node) {\n      if (!node.children) {\n        leaves.push(node);\n      }\n    });\n    return leaves;\n  }\n\n  function node_links () {\n    var root = this,\n        links = [];\n    root.each(function (node) {\n      if (node !== root) {\n        // Don\u2019t include the root\u2019s parent, if any.\n        links.push({\n          source: node.parent,\n          target: node\n        });\n      }\n    });\n    return links;\n  }\n\n  function* node_iterator () {\n    var node = this,\n        current,\n        next = [node],\n        children,\n        i,\n        n;\n\n    do {\n      current = next.reverse(), next = [];\n\n      while (node = current.pop()) {\n        yield node;\n\n        if (children = node.children) {\n          for (i = 0, n = children.length; i < n; ++i) {\n            next.push(children[i]);\n          }\n        }\n      }\n    } while (next.length);\n  }\n\n  function hierarchy(data, children) {\n    if (data instanceof Map) {\n      data = [undefined, data];\n      if (children === undefined) children = mapChildren;\n    } else if (children === undefined) {\n      children = objectChildren;\n    }\n\n    var root = new Node$1(data),\n        node,\n        nodes = [root],\n        child,\n        childs,\n        i,\n        n;\n\n    while (node = nodes.pop()) {\n      if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {\n        node.children = childs;\n\n        for (i = n - 1; i >= 0; --i) {\n          nodes.push(child = childs[i] = new Node$1(childs[i]));\n          child.parent = node;\n          child.depth = node.depth + 1;\n        }\n      }\n    }\n\n    return root.eachBefore(computeHeight);\n  }\n\n  function node_copy() {\n    return hierarchy(this).eachBefore(copyData);\n  }\n\n  function objectChildren(d) {\n    return d.children;\n  }\n\n  function mapChildren(d) {\n    return Array.isArray(d) ? d[1] : null;\n  }\n\n  function copyData(node) {\n    if (node.data.value !== undefined) node.value = node.data.value;\n    node.data = node.data.data;\n  }\n\n  function computeHeight(node) {\n    var height = 0;\n\n    do node.height = height; while ((node = node.parent) && node.height < ++height);\n  }\n  function Node$1(data) {\n    this.data = data;\n    this.depth = this.height = 0;\n    this.parent = null;\n  }\n  Node$1.prototype = hierarchy.prototype = {\n    constructor: Node$1,\n    count: node_count,\n    each: node_each,\n    eachAfter: node_eachAfter,\n    eachBefore: node_eachBefore,\n    find: node_find,\n    sum: node_sum,\n    sort: node_sort,\n    path: node_path,\n    ancestors: node_ancestors,\n    descendants: node_descendants,\n    leaves: node_leaves,\n    links: node_links,\n    copy: node_copy,\n    [Symbol.iterator]: node_iterator\n  };\n\n  function array (x) {\n    return typeof x === \"object\" && \"length\" in x ? x // Array, TypedArray, NodeList, array-like\n    : Array.from(x); // Map, Set, iterable, string, or anything else\n  }\n  function shuffle(array) {\n    var m = array.length,\n        t,\n        i;\n\n    while (m) {\n      i = Math.random() * m-- | 0;\n      t = array[m];\n      array[m] = array[i];\n      array[i] = t;\n    }\n\n    return array;\n  }\n\n  function enclose (circles) {\n    var i = 0,\n        n = (circles = shuffle(Array.from(circles))).length,\n        B = [],\n        p,\n        e;\n\n    while (i < n) {\n      p = circles[i];\n      if (e && enclosesWeak(e, p)) ++i;else e = encloseBasis(B = extendBasis(B, p)), i = 0;\n    }\n\n    return e;\n  }\n\n  function extendBasis(B, p) {\n    var i, j;\n    if (enclosesWeakAll(p, B)) return [p]; // If we get here then B must have at least one element.\n\n    for (i = 0; i < B.length; ++i) {\n      if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) {\n        return [B[i], p];\n      }\n    } // If we get here then B must have at least two elements.\n\n\n    for (i = 0; i < B.length - 1; ++i) {\n      for (j = i + 1; j < B.length; ++j) {\n        if (enclosesNot(encloseBasis2(B[i], B[j]), p) && enclosesNot(encloseBasis2(B[i], p), B[j]) && enclosesNot(encloseBasis2(B[j], p), B[i]) && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {\n          return [B[i], B[j], p];\n        }\n      }\n    } // If we get here then something is very wrong.\n\n\n    throw new Error();\n  }\n\n  function enclosesNot(a, b) {\n    var dr = a.r - b.r,\n        dx = b.x - a.x,\n        dy = b.y - a.y;\n    return dr < 0 || dr * dr < dx * dx + dy * dy;\n  }\n\n  function enclosesWeak(a, b) {\n    var dr = a.r - b.r + Math.max(a.r, b.r, 1) * 1e-9,\n        dx = b.x - a.x,\n        dy = b.y - a.y;\n    return dr > 0 && dr * dr > dx * dx + dy * dy;\n  }\n\n  function enclosesWeakAll(a, B) {\n    for (var i = 0; i < B.length; ++i) {\n      if (!enclosesWeak(a, B[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function encloseBasis(B) {\n    switch (B.length) {\n      case 1:\n        return encloseBasis1(B[0]);\n\n      case 2:\n        return encloseBasis2(B[0], B[1]);\n\n      case 3:\n        return encloseBasis3(B[0], B[1], B[2]);\n    }\n  }\n\n  function encloseBasis1(a) {\n    return {\n      x: a.x,\n      y: a.y,\n      r: a.r\n    };\n  }\n\n  function encloseBasis2(a, b) {\n    var x1 = a.x,\n        y1 = a.y,\n        r1 = a.r,\n        x2 = b.x,\n        y2 = b.y,\n        r2 = b.r,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        r21 = r2 - r1,\n        l = Math.sqrt(x21 * x21 + y21 * y21);\n    return {\n      x: (x1 + x2 + x21 / l * r21) / 2,\n      y: (y1 + y2 + y21 / l * r21) / 2,\n      r: (l + r1 + r2) / 2\n    };\n  }\n\n  function encloseBasis3(a, b, c) {\n    var x1 = a.x,\n        y1 = a.y,\n        r1 = a.r,\n        x2 = b.x,\n        y2 = b.y,\n        r2 = b.r,\n        x3 = c.x,\n        y3 = c.y,\n        r3 = c.r,\n        a2 = x1 - x2,\n        a3 = x1 - x3,\n        b2 = y1 - y2,\n        b3 = y1 - y3,\n        c2 = r2 - r1,\n        c3 = r3 - r1,\n        d1 = x1 * x1 + y1 * y1 - r1 * r1,\n        d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\n        d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\n        ab = a3 * b2 - a2 * b3,\n        xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\n        xb = (b3 * c2 - b2 * c3) / ab,\n        ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\n        yb = (a2 * c3 - a3 * c2) / ab,\n        A = xb * xb + yb * yb - 1,\n        B = 2 * (r1 + xa * xb + ya * yb),\n        C = xa * xa + ya * ya - r1 * r1,\n        r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\n    return {\n      x: x1 + xa + xb * r,\n      y: y1 + ya + yb * r,\n      r: r\n    };\n  }\n\n  function place(b, a, c) {\n    var dx = b.x - a.x,\n        x,\n        a2,\n        dy = b.y - a.y,\n        y,\n        b2,\n        d2 = dx * dx + dy * dy;\n\n    if (d2) {\n      a2 = a.r + c.r, a2 *= a2;\n      b2 = b.r + c.r, b2 *= b2;\n\n      if (a2 > b2) {\n        x = (d2 + b2 - a2) / (2 * d2);\n        y = Math.sqrt(Math.max(0, b2 / d2 - x * x));\n        c.x = b.x - x * dx - y * dy;\n        c.y = b.y - x * dy + y * dx;\n      } else {\n        x = (d2 + a2 - b2) / (2 * d2);\n        y = Math.sqrt(Math.max(0, a2 / d2 - x * x));\n        c.x = a.x + x * dx - y * dy;\n        c.y = a.y + x * dy + y * dx;\n      }\n    } else {\n      c.x = a.x + c.r;\n      c.y = a.y;\n    }\n  }\n\n  function intersects(a, b) {\n    var dr = a.r + b.r - 1e-6,\n        dx = b.x - a.x,\n        dy = b.y - a.y;\n    return dr > 0 && dr * dr > dx * dx + dy * dy;\n  }\n\n  function score(node) {\n    var a = node._,\n        b = node.next._,\n        ab = a.r + b.r,\n        dx = (a.x * b.r + b.x * a.r) / ab,\n        dy = (a.y * b.r + b.y * a.r) / ab;\n    return dx * dx + dy * dy;\n  }\n\n  function Node(circle) {\n    this._ = circle;\n    this.next = null;\n    this.previous = null;\n  }\n\n  function packEnclose(circles) {\n    if (!(n = (circles = array(circles)).length)) return 0;\n    var a, b, c, n, aa, ca, i, j, k, sj, sk; // Place the first circle.\n\n    a = circles[0], a.x = 0, a.y = 0;\n    if (!(n > 1)) return a.r; // Place the second circle.\n\n    b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n    if (!(n > 2)) return a.r + b.r; // Place the third circle.\n\n    place(b, a, c = circles[2]); // Initialize the front-chain using the first three circles a, b and c.\n\n    a = new Node(a), b = new Node(b), c = new Node(c);\n    a.next = c.previous = b;\n    b.next = a.previous = c;\n    c.next = b.previous = a; // Attempt to place each remaining circle\u2026\n\n    pack: for (i = 3; i < n; ++i) {\n      place(a._, b._, c = circles[i]), c = new Node(c); // Find the closest intersecting circle on the front-chain, if any.\n      // \u201cCloseness\u201d is determined by linear distance along the front-chain.\n      // \u201cAhead\u201d or \u201cbehind\u201d is likewise determined by linear distance.\n\n      j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\n\n      do {\n        if (sj <= sk) {\n          if (intersects(j._, c._)) {\n            b = j, a.next = b, b.previous = a, --i;\n            continue pack;\n          }\n\n          sj += j._.r, j = j.next;\n        } else {\n          if (intersects(k._, c._)) {\n            a = k, a.next = b, b.previous = a, --i;\n            continue pack;\n          }\n\n          sk += k._.r, k = k.previous;\n        }\n      } while (j !== k.next); // Success! Insert the new circle c between a and b.\n\n\n      c.previous = a, c.next = b, a.next = b.previous = b = c; // Compute the new closest circle pair to the centroid.\n\n      aa = score(a);\n\n      while ((c = c.next) !== b) {\n        if ((ca = score(c)) < aa) {\n          a = c, aa = ca;\n        }\n      }\n\n      b = a.next;\n    } // Compute the enclosing circle of the front chain.\n\n\n    a = [b._], c = b;\n\n    while ((c = c.next) !== b) a.push(c._);\n\n    c = enclose(a); // Translate the circles to put the enclosing circle around the origin.\n\n    for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n\n    return c.r;\n  }\n\n  function optional(f) {\n    return f == null ? null : required(f);\n  }\n  function required(f) {\n    if (typeof f !== \"function\") throw new Error();\n    return f;\n  }\n\n  function constantZero() {\n    return 0;\n  }\n  function constant (x) {\n    return function () {\n      return x;\n    };\n  }\n\n  function defaultRadius(d) {\n    return Math.sqrt(d.value);\n  }\n\n  function pack () {\n    var radius = null,\n        dx = 1,\n        dy = 1,\n        padding = constantZero;\n\n    function pack(root) {\n      root.x = dx / 2, root.y = dy / 2;\n\n      if (radius) {\n        root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));\n      } else {\n        root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildren(constantZero, 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n      }\n\n      return root;\n    }\n\n    pack.radius = function (x) {\n      return arguments.length ? (radius = optional(x), pack) : radius;\n    };\n\n    pack.size = function (x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n    };\n\n    pack.padding = function (x) {\n      return arguments.length ? (padding = typeof x === \"function\" ? x : constant(+x), pack) : padding;\n    };\n\n    return pack;\n  }\n\n  function radiusLeaf(radius) {\n    return function (node) {\n      if (!node.children) {\n        node.r = Math.max(0, +radius(node) || 0);\n      }\n    };\n  }\n\n  function packChildren(padding, k) {\n    return function (node) {\n      if (children = node.children) {\n        var children,\n            i,\n            n = children.length,\n            r = padding(node) * k || 0,\n            e;\n        if (r) for (i = 0; i < n; ++i) children[i].r += r;\n        e = packEnclose(children);\n        if (r) for (i = 0; i < n; ++i) children[i].r -= r;\n        node.r = e + r;\n      }\n    };\n  }\n\n  function translateChild(k) {\n    return function (node) {\n      var parent = node.parent;\n      node.r *= k;\n\n      if (parent) {\n        node.x = parent.x + k * node.x;\n        node.y = parent.y + k * node.y;\n      }\n    };\n  }\n\n  function roundNode (node) {\n    node.x0 = Math.round(node.x0);\n    node.y0 = Math.round(node.y0);\n    node.x1 = Math.round(node.x1);\n    node.y1 = Math.round(node.y1);\n  }\n\n  function treemapDice (parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (x1 - x0) / parent.value;\n\n    while (++i < n) {\n      node = nodes[i], node.y0 = y0, node.y1 = y1;\n      node.x0 = x0, node.x1 = x0 += node.value * k;\n    }\n  }\n\n  function partition () {\n    var dx = 1,\n        dy = 1,\n        padding = 0,\n        round = false;\n\n    function partition(root) {\n      var n = root.height + 1;\n      root.x0 = root.y0 = padding;\n      root.x1 = dx;\n      root.y1 = dy / n;\n      root.eachBefore(positionNode(dy, n));\n      if (round) root.eachBefore(roundNode);\n      return root;\n    }\n\n    function positionNode(dy, n) {\n      return function (node) {\n        if (node.children) {\n          treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n        }\n\n        var x0 = node.x0,\n            y0 = node.y0,\n            x1 = node.x1 - padding,\n            y1 = node.y1 - padding;\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n      };\n    }\n\n    partition.round = function (x) {\n      return arguments.length ? (round = !!x, partition) : round;\n    };\n\n    partition.size = function (x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n    };\n\n    partition.padding = function (x) {\n      return arguments.length ? (padding = +x, partition) : padding;\n    };\n\n    return partition;\n  }\n\n  var preroot = {\n    depth: -1\n  },\n      ambiguous = {},\n      imputed = {};\n\n  function defaultId(d) {\n    return d.id;\n  }\n\n  function defaultParentId(d) {\n    return d.parentId;\n  }\n\n  function stratify () {\n    var id = defaultId,\n        parentId = defaultParentId,\n        path;\n\n    function stratify(data) {\n      var nodes = Array.from(data),\n          currentId = id,\n          currentParentId = parentId,\n          n,\n          d,\n          i,\n          root,\n          parent,\n          node,\n          nodeId,\n          nodeKey,\n          nodeByKey = new Map();\n\n      if (path != null) {\n        const I = nodes.map((d, i) => normalize(path(d, i, data)));\n        const P = I.map(parentof);\n        const S = new Set(I).add(\"\");\n\n        for (const i of P) {\n          if (!S.has(i)) {\n            S.add(i);\n            I.push(i);\n            P.push(parentof(i));\n            nodes.push(imputed);\n          }\n        }\n\n        currentId = (_, i) => I[i];\n\n        currentParentId = (_, i) => P[i];\n      }\n\n      for (i = 0, n = nodes.length; i < n; ++i) {\n        d = nodes[i], node = nodes[i] = new Node$1(d);\n\n        if ((nodeId = currentId(d, i, data)) != null && (nodeId += \"\")) {\n          nodeKey = node.id = nodeId;\n          nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);\n        }\n\n        if ((nodeId = currentParentId(d, i, data)) != null && (nodeId += \"\")) {\n          node.parent = nodeId;\n        }\n      }\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n\n        if (nodeId = node.parent) {\n          parent = nodeByKey.get(nodeId);\n          if (!parent) throw new Error(\"missing: \" + nodeId);\n          if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n          if (parent.children) parent.children.push(node);else parent.children = [node];\n          node.parent = parent;\n        } else {\n          if (root) throw new Error(\"multiple roots\");\n          root = node;\n        }\n      }\n\n      if (!root) throw new Error(\"no root\"); // When imputing internal nodes, only introduce roots if needed.\n      // Then replace the imputed marker data with null.\n\n      if (path != null) {\n        while (root.data === imputed && root.children.length === 1) {\n          root = root.children[0], --n;\n        }\n\n        for (let i = nodes.length - 1; i >= 0; --i) {\n          node = nodes[i];\n          if (node.data !== imputed) break;\n          node.data = null;\n        }\n      }\n\n      root.parent = preroot;\n      root.eachBefore(function (node) {\n        node.depth = node.parent.depth + 1;\n        --n;\n      }).eachBefore(computeHeight);\n      root.parent = null;\n      if (n > 0) throw new Error(\"cycle\");\n      return root;\n    }\n\n    stratify.id = function (x) {\n      return arguments.length ? (id = optional(x), stratify) : id;\n    };\n\n    stratify.parentId = function (x) {\n      return arguments.length ? (parentId = optional(x), stratify) : parentId;\n    };\n\n    stratify.path = function (x) {\n      return arguments.length ? (path = optional(x), stratify) : path;\n    };\n\n    return stratify;\n  } // To normalize a path, we coerce to a string, strip the trailing slash if any\n  // (as long as the trailing slash is not immediately preceded by another slash),\n  // and add leading slash if missing.\n\n  function normalize(path) {\n    path = `${path}`;\n    let i = path.length;\n    if (slash(path, i - 1) && !slash(path, i - 2)) path = path.slice(0, -1);\n    return path[0] === \"/\" ? path : `/${path}`;\n  } // Walk backwards to find the first slash that is not the leading slash, e.g.:\n  // \"/foo/bar\" \u21e5 \"/foo\", \"/foo\" \u21e5 \"/\", \"/\" \u21a6 \"\". (The root is special-cased\n  // because the id of the root must be a truthy value.)\n\n\n  function parentof(path) {\n    let i = path.length;\n    if (i < 2) return \"\";\n\n    while (--i > 1) if (slash(path, i)) break;\n\n    return path.slice(0, i);\n  } // Slashes can be escaped; to determine whether a slash is a path delimiter, we\n  // count the number of preceding backslashes escaping the forward slash: an odd\n  // number indicates an escaped forward slash.\n\n\n  function slash(path, i) {\n    if (path[i] === \"/\") {\n      let k = 0;\n\n      while (i > 0 && path[--i] === \"\\\\\") ++k;\n\n      if ((k & 1) === 0) return true;\n    }\n\n    return false;\n  }\n\n  function defaultSeparation$1(a, b) {\n    return a.parent === b.parent ? 1 : 2;\n  } // function radialSeparation(a, b) {\n  //   return (a.parent === b.parent ? 1 : 2) / a.depth;\n  // }\n  // This function is used to traverse the left contour of a subtree (or\n  // subforest). It returns the successor of v on this contour. This successor is\n  // either given by the leftmost child of v or by the thread of v. The function\n  // returns null if and only if v is on the highest level of its subtree.\n\n\n  function nextLeft(v) {\n    var children = v.children;\n    return children ? children[0] : v.t;\n  } // This function works analogously to nextLeft.\n\n\n  function nextRight(v) {\n    var children = v.children;\n    return children ? children[children.length - 1] : v.t;\n  } // Shifts the current subtree rooted at w+. This is done by increasing\n  // prelim(w+) and mod(w+) by shift.\n\n\n  function moveSubtree(wm, wp, shift) {\n    var change = shift / (wp.i - wm.i);\n    wp.c -= change;\n    wp.s += shift;\n    wm.c += change;\n    wp.z += shift;\n    wp.m += shift;\n  } // All other shifts, applied to the smaller subtrees between w- and w+, are\n  // performed by this function. To prepare the shifts, we have to adjust\n  // change(w+), shift(w+), and change(w-).\n\n\n  function executeShifts(v) {\n    var shift = 0,\n        change = 0,\n        children = v.children,\n        i = children.length,\n        w;\n\n    while (--i >= 0) {\n      w = children[i];\n      w.z += shift;\n      w.m += shift;\n      shift += w.s + (change += w.c);\n    }\n  } // If vi-\u2019s ancestor is a sibling of v, returns vi-\u2019s ancestor. Otherwise,\n  // returns the specified (default) ancestor.\n\n\n  function nextAncestor(vim, v, ancestor) {\n    return vim.a.parent === v.parent ? vim.a : ancestor;\n  }\n\n  function TreeNode(node, i) {\n    this._ = node;\n    this.parent = null;\n    this.children = null;\n    this.A = null; // default ancestor\n\n    this.a = this; // ancestor\n\n    this.z = 0; // prelim\n\n    this.m = 0; // mod\n\n    this.c = 0; // change\n\n    this.s = 0; // shift\n\n    this.t = null; // thread\n\n    this.i = i; // number\n  }\n\n  TreeNode.prototype = Object.create(Node$1.prototype);\n\n  function treeRoot(root) {\n    var tree = new TreeNode(root, 0),\n        node,\n        nodes = [tree],\n        child,\n        children,\n        i,\n        n;\n\n    while (node = nodes.pop()) {\n      if (children = node._.children) {\n        node.children = new Array(n = children.length);\n\n        for (i = n - 1; i >= 0; --i) {\n          nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n          child.parent = node;\n        }\n      }\n    }\n\n    (tree.parent = new TreeNode(null, 0)).children = [tree];\n    return tree;\n  } // Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\n\n\n  function tree () {\n    var separation = defaultSeparation$1,\n        dx = 1,\n        dy = 1,\n        nodeSize = null;\n\n    function tree(root) {\n      var t = treeRoot(root); // Compute the layout using Buchheim et al.\u2019s algorithm.\n\n      t.eachAfter(firstWalk), t.parent.m = -t.z;\n      t.eachBefore(secondWalk); // If a fixed node size is specified, scale x and y.\n\n      if (nodeSize) root.eachBefore(sizeNode); // If a fixed tree size is specified, scale x and y based on the extent.\n      // Compute the left-most, right-most, and depth-most nodes for extents.\n      else {\n        var left = root,\n            right = root,\n            bottom = root;\n        root.eachBefore(function (node) {\n          if (node.x < left.x) left = node;\n          if (node.x > right.x) right = node;\n          if (node.depth > bottom.depth) bottom = node;\n        });\n        var s = left === right ? 1 : separation(left, right) / 2,\n            tx = s - left.x,\n            kx = dx / (right.x + s + tx),\n            ky = dy / (bottom.depth || 1);\n        root.eachBefore(function (node) {\n          node.x = (node.x + tx) * kx;\n          node.y = node.depth * ky;\n        });\n      }\n      return root;\n    } // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n    // applied recursively to the children of v, as well as the function\n    // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n    // node v is placed to the midpoint of its outermost children.\n\n\n    function firstWalk(v) {\n      var children = v.children,\n          siblings = v.parent.children,\n          w = v.i ? siblings[v.i - 1] : null;\n\n      if (children) {\n        executeShifts(v);\n        var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n\n        if (w) {\n          v.z = w.z + separation(v._, w._);\n          v.m = v.z - midpoint;\n        } else {\n          v.z = midpoint;\n        }\n      } else if (w) {\n        v.z = w.z + separation(v._, w._);\n      }\n\n      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n    } // Computes all real x-coordinates by summing up the modifiers recursively.\n\n\n    function secondWalk(v) {\n      v._.x = v.z + v.parent.m;\n      v.m += v.parent.m;\n    } // The core of the algorithm. Here, a new subtree is combined with the\n    // previous subtrees. Threads are used to traverse the inside and outside\n    // contours of the left and right subtree up to the highest common level. The\n    // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n    // superscript o means outside and i means inside, the subscript - means left\n    // subtree and + means right subtree. For summing up the modifiers along the\n    // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n    // nodes of the inside contours conflict, we compute the left one of the\n    // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n    // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n    // Finally, we add a new thread (if necessary).\n\n\n    function apportion(v, w, ancestor) {\n      if (w) {\n        var vip = v,\n            vop = v,\n            vim = w,\n            vom = vip.parent.children[0],\n            sip = vip.m,\n            sop = vop.m,\n            sim = vim.m,\n            som = vom.m,\n            shift;\n\n        while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n          vom = nextLeft(vom);\n          vop = nextRight(vop);\n          vop.a = v;\n          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n\n          if (shift > 0) {\n            moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n            sip += shift;\n            sop += shift;\n          }\n\n          sim += vim.m;\n          sip += vip.m;\n          som += vom.m;\n          sop += vop.m;\n        }\n\n        if (vim && !nextRight(vop)) {\n          vop.t = vim;\n          vop.m += sim - sop;\n        }\n\n        if (vip && !nextLeft(vom)) {\n          vom.t = vip;\n          vom.m += sip - som;\n          ancestor = v;\n        }\n      }\n\n      return ancestor;\n    }\n\n    function sizeNode(node) {\n      node.x *= dx;\n      node.y = node.depth * dy;\n    }\n\n    tree.separation = function (x) {\n      return arguments.length ? (separation = x, tree) : separation;\n    };\n\n    tree.size = function (x) {\n      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [dx, dy];\n    };\n\n    tree.nodeSize = function (x) {\n      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [dx, dy] : null;\n    };\n\n    return tree;\n  }\n\n  function treemapSlice (parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        node,\n        i = -1,\n        n = nodes.length,\n        k = parent.value && (y1 - y0) / parent.value;\n\n    while (++i < n) {\n      node = nodes[i], node.x0 = x0, node.x1 = x1;\n      node.y0 = y0, node.y1 = y0 += node.value * k;\n    }\n  }\n\n  var phi = (1 + Math.sqrt(5)) / 2;\n  function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n    var rows = [],\n        nodes = parent.children,\n        row,\n        nodeValue,\n        i0 = 0,\n        i1 = 0,\n        n = nodes.length,\n        dx,\n        dy,\n        value = parent.value,\n        sumValue,\n        minValue,\n        maxValue,\n        newRatio,\n        minRatio,\n        alpha,\n        beta;\n\n    while (i0 < n) {\n      dx = x1 - x0, dy = y1 - y0; // Find the next non-empty node.\n\n      do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\n\n      minValue = maxValue = sumValue;\n      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n      beta = sumValue * sumValue * alpha;\n      minRatio = Math.max(maxValue / beta, beta / minValue); // Keep adding nodes while the aspect ratio maintains or improves.\n\n      for (; i1 < n; ++i1) {\n        sumValue += nodeValue = nodes[i1].value;\n        if (nodeValue < minValue) minValue = nodeValue;\n        if (nodeValue > maxValue) maxValue = nodeValue;\n        beta = sumValue * sumValue * alpha;\n        newRatio = Math.max(maxValue / beta, beta / minValue);\n\n        if (newRatio > minRatio) {\n          sumValue -= nodeValue;\n          break;\n        }\n\n        minRatio = newRatio;\n      } // Position and record the row orientation.\n\n\n      rows.push(row = {\n        value: sumValue,\n        dice: dx < dy,\n        children: nodes.slice(i0, i1)\n      });\n      if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n      value -= sumValue, i0 = i1;\n    }\n\n    return rows;\n  }\n  var treemapSquarify = (function custom(ratio) {\n    function squarify(parent, x0, y0, x1, y1) {\n      squarifyRatio(ratio, parent, x0, y0, x1, y1);\n    }\n\n    squarify.ratio = function (x) {\n      return custom((x = +x) > 1 ? x : 1);\n    };\n\n    return squarify;\n  })(phi);\n\n  function treemap () {\n    var tile = treemapSquarify,\n        round = false,\n        dx = 1,\n        dy = 1,\n        paddingStack = [0],\n        paddingInner = constantZero,\n        paddingTop = constantZero,\n        paddingRight = constantZero,\n        paddingBottom = constantZero,\n        paddingLeft = constantZero;\n\n    function treemap(root) {\n      root.x0 = root.y0 = 0;\n      root.x1 = dx;\n      root.y1 = dy;\n      root.eachBefore(positionNode);\n      paddingStack = [0];\n      if (round) root.eachBefore(roundNode);\n      return root;\n    }\n\n    function positionNode(node) {\n      var p = paddingStack[node.depth],\n          x0 = node.x0 + p,\n          y0 = node.y0 + p,\n          x1 = node.x1 - p,\n          y1 = node.y1 - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n\n      if (node.children) {\n        p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n        x0 += paddingLeft(node) - p;\n        y0 += paddingTop(node) - p;\n        x1 -= paddingRight(node) - p;\n        y1 -= paddingBottom(node) - p;\n        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n        tile(node, x0, y0, x1, y1);\n      }\n    }\n\n    treemap.round = function (x) {\n      return arguments.length ? (round = !!x, treemap) : round;\n    };\n\n    treemap.size = function (x) {\n      return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n    };\n\n    treemap.tile = function (x) {\n      return arguments.length ? (tile = required(x), treemap) : tile;\n    };\n\n    treemap.padding = function (x) {\n      return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n    };\n\n    treemap.paddingInner = function (x) {\n      return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n    };\n\n    treemap.paddingOuter = function (x) {\n      return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n    };\n\n    treemap.paddingTop = function (x) {\n      return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n    };\n\n    treemap.paddingRight = function (x) {\n      return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n    };\n\n    treemap.paddingBottom = function (x) {\n      return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n    };\n\n    treemap.paddingLeft = function (x) {\n      return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n    };\n\n    return treemap;\n  }\n\n  function treemapBinary (parent, x0, y0, x1, y1) {\n    var nodes = parent.children,\n        i,\n        n = nodes.length,\n        sum,\n        sums = new Array(n + 1);\n\n    for (sums[0] = sum = i = 0; i < n; ++i) {\n      sums[i + 1] = sum += nodes[i].value;\n    }\n\n    partition(0, n, parent.value, x0, y0, x1, y1);\n\n    function partition(i, j, value, x0, y0, x1, y1) {\n      if (i >= j - 1) {\n        var node = nodes[i];\n        node.x0 = x0, node.y0 = y0;\n        node.x1 = x1, node.y1 = y1;\n        return;\n      }\n\n      var valueOffset = sums[i],\n          valueTarget = value / 2 + valueOffset,\n          k = i + 1,\n          hi = j - 1;\n\n      while (k < hi) {\n        var mid = k + hi >>> 1;\n        if (sums[mid] < valueTarget) k = mid + 1;else hi = mid;\n      }\n\n      if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k;\n      var valueLeft = sums[k] - valueOffset,\n          valueRight = value - valueLeft;\n\n      if (x1 - x0 > y1 - y0) {\n        var xk = value ? (x0 * valueRight + x1 * valueLeft) / value : x1;\n        partition(i, k, valueLeft, x0, y0, xk, y1);\n        partition(k, j, valueRight, xk, y0, x1, y1);\n      } else {\n        var yk = value ? (y0 * valueRight + y1 * valueLeft) / value : y1;\n        partition(i, k, valueLeft, x0, y0, x1, yk);\n        partition(k, j, valueRight, x0, yk, x1, y1);\n      }\n    }\n  }\n\n  function treemapSliceDice (parent, x0, y0, x1, y1) {\n    (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);\n  }\n\n  var treemapResquarify = (function custom(ratio) {\n    function resquarify(parent, x0, y0, x1, y1) {\n      if ((rows = parent._squarify) && rows.ratio === ratio) {\n        var rows,\n            row,\n            nodes,\n            i,\n            j = -1,\n            n,\n            m = rows.length,\n            value = parent.value;\n\n        while (++j < m) {\n          row = rows[j], nodes = row.children;\n\n          for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n\n          if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += (y1 - y0) * row.value / value : y1);else treemapSlice(row, x0, y0, value ? x0 += (x1 - x0) * row.value / value : x1, y1);\n          value -= row.value;\n        }\n      } else {\n        parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n        rows.ratio = ratio;\n      }\n    }\n\n    resquarify.ratio = function (x) {\n      return custom((x = +x) > 1 ? x : 1);\n    };\n\n    return resquarify;\n  })(phi);\n\n  /**\n   * Nest tuples into a tree structure, grouped by key values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} params.keys - The key fields to nest by, in order.\n   * @param {boolean} [params.generate=false] - A boolean flag indicating if\n   *   non-leaf nodes generated by this transform should be included in the\n   *   output. The default (false) includes only the input data (leaf nodes)\n   *   in the data stream.\n   */\n\n  function Nest(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Nest.Definition = {\n    'type': 'Nest',\n    'metadata': {\n      'treesource': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'keys',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'generate',\n      'type': 'boolean'\n    }]\n  };\n\n  const children = n => n.values;\n\n  vegaUtil.inherits(Nest, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (!pulse.source) {\n        vegaUtil.error('Nest transform requires an upstream data source.');\n      }\n\n      var gen = _.generate,\n          mod = _.modified(),\n          out = pulse.clone(),\n          tree = this.value;\n\n      if (!tree || mod || pulse.changed()) {\n        // collect nodes to remove\n        if (tree) {\n          tree.each(node => {\n            if (node.children && vegaDataflow.isTuple(node.data)) {\n              out.rem.push(node.data);\n            }\n          });\n        } // generate new tree structure\n\n\n        this.value = tree = hierarchy({\n          values: vegaUtil.array(_.keys).reduce((n, k) => {\n            n.key(k);\n            return n;\n          }, nest()).entries(out.source)\n        }, children); // collect nodes to add\n\n        if (gen) {\n          tree.each(node => {\n            if (node.children) {\n              node = vegaDataflow.ingest(node.data);\n              out.add.push(node);\n              out.source.push(node);\n            }\n          });\n        } // build lookup table\n\n\n        lookup(tree, vegaDataflow.tupleid, vegaDataflow.tupleid);\n      }\n\n      out.source.root = tree;\n      return out;\n    }\n\n  });\n\n  function nest() {\n    const keys = [],\n          nest = {\n      entries: array => entries(apply(array, 0), 0),\n      key: d => (keys.push(d), nest)\n    };\n\n    function apply(array, depth) {\n      if (depth >= keys.length) {\n        return array;\n      }\n\n      const n = array.length,\n            key = keys[depth++],\n            valuesByKey = {},\n            result = {};\n      let i = -1,\n          keyValue,\n          value,\n          values;\n\n      while (++i < n) {\n        keyValue = key(value = array[i]) + '';\n\n        if (values = valuesByKey[keyValue]) {\n          values.push(value);\n        } else {\n          valuesByKey[keyValue] = [value];\n        }\n      }\n\n      for (keyValue in valuesByKey) {\n        result[keyValue] = apply(valuesByKey[keyValue], depth);\n      }\n\n      return result;\n    }\n\n    function entries(map, depth) {\n      if (++depth > keys.length) return map;\n      const array = [];\n\n      for (const key in map) {\n        array.push({\n          key,\n          values: entries(map[key], depth)\n        });\n      }\n\n      return array;\n    }\n\n    return nest;\n  }\n\n  /**\n   * Abstract class for tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n\n  function HierarchyLayout(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  const defaultSeparation = (a, b) => a.parent === b.parent ? 1 : 2;\n\n  vegaUtil.inherits(HierarchyLayout, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (!pulse.source || !pulse.source.root) {\n        vegaUtil.error(this.constructor.name + ' transform requires a backing tree data source.');\n      }\n\n      const layout = this.layout(_.method),\n            fields = this.fields,\n            root = pulse.source.root,\n            as = _.as || fields;\n      if (_.field) root.sum(_.field);else root.count();\n      if (_.sort) root.sort(vegaDataflow.stableCompare(_.sort, d => d.data));\n      setParams(layout, this.params, _);\n\n      if (layout.separation) {\n        layout.separation(_.separation !== false ? defaultSeparation : vegaUtil.one);\n      }\n\n      try {\n        this.value = layout(root);\n      } catch (err) {\n        vegaUtil.error(err);\n      }\n\n      root.each(node => setFields(node, fields, as));\n      return pulse.reflow(_.modified()).modifies(as).modifies('leaf');\n    }\n\n  });\n\n  function setParams(layout, params, _) {\n    for (let p, i = 0, n = params.length; i < n; ++i) {\n      p = params[i];\n      if (p in _) layout[p](_[p]);\n    }\n  }\n\n  function setFields(node, fields, as) {\n    const t = node.data,\n          n = fields.length - 1;\n\n    for (let i = 0; i < n; ++i) {\n      t[as[i]] = node[fields[i]];\n    }\n\n    t[as[n]] = node.children ? node.children.length : 0;\n  }\n\n  const Output$3 = ['x', 'y', 'r', 'depth', 'children'];\n  /**\n   * Packed circle tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n\n  function Pack(params) {\n    HierarchyLayout.call(this, params);\n  }\n  Pack.Definition = {\n    'type': 'Pack',\n    'metadata': {\n      'tree': true,\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'padding',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'radius',\n      'type': 'field',\n      'default': null\n    }, {\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': Output$3.length,\n      'default': Output$3\n    }]\n  };\n  vegaUtil.inherits(Pack, HierarchyLayout, {\n    layout: pack,\n    params: ['radius', 'size', 'padding'],\n    fields: Output$3\n  });\n\n  const Output$2 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n  /**\n   * Partition tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n\n  function Partition(params) {\n    HierarchyLayout.call(this, params);\n  }\n  Partition.Definition = {\n    'type': 'Partition',\n    'metadata': {\n      'tree': true,\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'padding',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'round',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': Output$2.length,\n      'default': Output$2\n    }]\n  };\n  vegaUtil.inherits(Partition, HierarchyLayout, {\n    layout: partition,\n    params: ['size', 'round', 'padding'],\n    fields: Output$2\n  });\n\n  /**\n   * Stratify a collection of tuples into a tree structure based on\n   * id and parent id fields.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.key - Unique key field for each tuple.\n   * @param {function(object): *} params.parentKey - Field with key for parent tuple.\n   */\n\n  function Stratify(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Stratify.Definition = {\n    'type': 'Stratify',\n    'metadata': {\n      'treesource': true\n    },\n    'params': [{\n      'name': 'key',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'parentKey',\n      'type': 'field',\n      'required': true\n    }]\n  };\n  vegaUtil.inherits(Stratify, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (!pulse.source) {\n        vegaUtil.error('Stratify transform requires an upstream data source.');\n      }\n\n      let tree = this.value;\n\n      const mod = _.modified(),\n            out = pulse.fork(pulse.ALL).materialize(pulse.SOURCE),\n            run = !tree || mod || pulse.changed(pulse.ADD_REM) || pulse.modified(_.key.fields) || pulse.modified(_.parentKey.fields); // prevent upstream source pollution\n\n\n      out.source = out.source.slice();\n\n      if (run) {\n        tree = out.source.length ? lookup(stratify().id(_.key).parentId(_.parentKey)(out.source), _.key, vegaUtil.truthy) : lookup(stratify()([{}]), _.key, _.key);\n      }\n\n      out.source.root = this.value = tree;\n      return out;\n    }\n\n  });\n\n  const Layouts = {\n    tidy: tree,\n    cluster: cluster\n  };\n  const Output$1 = ['x', 'y', 'depth', 'children'];\n  /**\n   * Tree layout. Depending on the method parameter, performs either\n   * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n\n  function Tree(params) {\n    HierarchyLayout.call(this, params);\n  }\n  Tree.Definition = {\n    'type': 'Tree',\n    'metadata': {\n      'tree': true,\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'method',\n      'type': 'enum',\n      'default': 'tidy',\n      'values': ['tidy', 'cluster']\n    }, {\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'nodeSize',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'separation',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': Output$1.length,\n      'default': Output$1\n    }]\n  };\n  vegaUtil.inherits(Tree, HierarchyLayout, {\n    /**\n     * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.\n     */\n    layout(method) {\n      const m = method || 'tidy';\n      if (vegaUtil.hasOwnProperty(Layouts, m)) return Layouts[m]();else vegaUtil.error('Unrecognized Tree layout method: ' + m);\n    },\n\n    params: ['size', 'nodeSize'],\n    fields: Output$1\n  });\n\n  /**\n   * Generate tuples representing links between tree nodes.\n   * The resulting tuples will contain 'source' and 'target' fields,\n   * which point to parent and child node tuples, respectively.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n\n  function TreeLinks(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  TreeLinks.Definition = {\n    'type': 'TreeLinks',\n    'metadata': {\n      'tree': true,\n      'generates': true,\n      'changes': true\n    },\n    'params': []\n  };\n  vegaUtil.inherits(TreeLinks, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const links = this.value,\n            tree = pulse.source && pulse.source.root,\n            out = pulse.fork(pulse.NO_SOURCE),\n            lut = {};\n      if (!tree) vegaUtil.error('TreeLinks transform requires a tree data source.');\n\n      if (pulse.changed(pulse.ADD_REM)) {\n        // remove previous links\n        out.rem = links; // build lookup table of valid tuples\n\n        pulse.visit(pulse.SOURCE, t => lut[vegaDataflow.tupleid(t)] = 1); // generate links for all edges incident on valid tuples\n\n        tree.each(node => {\n          const t = node.data,\n                p = node.parent && node.parent.data;\n\n          if (p && lut[vegaDataflow.tupleid(t)] && lut[vegaDataflow.tupleid(p)]) {\n            out.add.push(vegaDataflow.ingest({\n              source: p,\n              target: t\n            }));\n          }\n        });\n        this.value = out.add;\n      } else if (pulse.changed(pulse.MOD)) {\n        // build lookup table of modified tuples\n        pulse.visit(pulse.MOD, t => lut[vegaDataflow.tupleid(t)] = 1); // gather links incident on modified tuples\n\n        links.forEach(link => {\n          if (lut[vegaDataflow.tupleid(link.source)] || lut[vegaDataflow.tupleid(link.target)]) {\n            out.mod.push(link);\n          }\n        });\n      }\n\n      return out;\n    }\n\n  });\n\n  const Tiles = {\n    binary: treemapBinary,\n    dice: treemapDice,\n    slice: treemapSlice,\n    slicedice: treemapSliceDice,\n    squarify: treemapSquarify,\n    resquarify: treemapResquarify\n  };\n  const Output = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n  /**\n   * Treemap layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n\n  function Treemap(params) {\n    HierarchyLayout.call(this, params);\n  }\n  Treemap.Definition = {\n    'type': 'Treemap',\n    'metadata': {\n      'tree': true,\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'method',\n      'type': 'enum',\n      'default': 'squarify',\n      'values': ['squarify', 'resquarify', 'binary', 'dice', 'slice', 'slicedice']\n    }, {\n      'name': 'padding',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingInner',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingOuter',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingTop',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingRight',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingBottom',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingLeft',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'ratio',\n      'type': 'number',\n      'default': 1.618033988749895\n    }, {\n      'name': 'round',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': Output.length,\n      'default': Output\n    }]\n  };\n  vegaUtil.inherits(Treemap, HierarchyLayout, {\n    /**\n     * Treemap layout generator. Adds 'method' and 'ratio' parameters\n     * to configure the underlying tile method.\n     */\n    layout() {\n      const x = treemap();\n\n      x.ratio = _ => {\n        const t = x.tile();\n        if (t.ratio) x.tile(t.ratio(_));\n      };\n\n      x.method = _ => {\n        if (vegaUtil.hasOwnProperty(Tiles, _)) x.tile(Tiles[_]);else vegaUtil.error('Unrecognized Treemap layout method: ' + _);\n      };\n\n      return x;\n    },\n\n    params: ['method', 'ratio', 'size', 'round', 'padding', 'paddingInner', 'paddingOuter', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'],\n    fields: Output\n  });\n\n  exports.nest = Nest;\n  exports.pack = Pack;\n  exports.partition = Partition;\n  exports.stratify = Stratify;\n  exports.tree = Tree;\n  exports.treelinks = TreeLinks;\n  exports.treemap = Treemap;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","vegaDataflow","vegaUtil","lookup","tree","key","filter","map","each","node","t","data","defaultSeparation$2","a","b","parent","meanXReduce","x","c","maxYReduce","y","Math","max","leafLeft","children","leafRight","length","count","sum","i","value","hierarchy","Map","undefined","mapChildren","objectChildren","root","Node$1","nodes","child","childs","n","pop","Array","from","push","depth","eachBefore","computeHeight","d","isArray","copyData","height","enclosesNot","dr","r","dx","dy","enclosesWeak","enclosesWeakAll","B","encloseBasis2","x1","y1","r1","x2","y2","r2","x21","y21","r21","l","sqrt","encloseBasis3","x3","y3","r3","a2","a3","b2","b3","c2","c3","d1","d2","d3","ab","xa","xb","ya","yb","A","C","place","intersects","score","_","next","Node","circle","previous","packEnclose","circles","j","k","sj","sk","aa","ca","m","array","random","e","p","Error","required","f","constantZero","constant","defaultRadius","radiusLeaf","radius","packChildren","padding","translateChild","roundNode","x0","round","y0","treemapDice","defaultId","id","defaultParentId","parentId","stratify","currentId","currentParentId","nodeId","nodeByKey","path","I","slash","slice","P","parentof","S","add","Set","has","imputed","nodeKey","set","ambiguous","get","preroot","stratify.id","arguments","stratify.parentId","stratify.path","defaultSeparation$1","nextLeft","v","nextRight","TreeNode","s","z","treeRoot","treemapSlice","squarifyRatio","ratio","rows","row","nodeValue","i1","i0","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","dice","treemap","positionNode","paddingStack","paddingInner","paddingLeft","paddingTop","paddingRight","paddingBottom","tile","treemapSquarify","treemap.round","size","treemap.size","treemap.tile","treemap.padding","paddingOuter","treemap.paddingInner","treemap.paddingOuter","treemap.paddingTop","treemap.paddingRight","treemap.paddingBottom","treemap.paddingLeft","Nest","params","Transform","call","nest","apply","keys","valuesByKey","result","keyValue","values","entries","HierarchyLayout","setParams","layout","Pack","Partition","Stratify","Tree","TreeLinks","Treemap","prototype","constructor","node_count","eachAfter","node_each","callback","that","index","node_eachAfter","node_eachBefore","find","node_find","node_sum","sort","node_sort","compare","node_path","end","start","aNodes","ancestors","bNodes","ancestor","splice","node_ancestors","descendants","node_descendants","leaves","node_leaves","links","node_links","source","target","copy","node_copy","Symbol","iterator","node_iterator","current","reverse","Object","create","phi","custom","squarify","squarify.ratio","treemapResquarify","resquarify","_squarify","resquarify.ratio","Definition","inherits","transform","pulse","error","gen","generate","mod","modified","out","clone","changed","isTuple","rem","reduce","ingest","tupleid","defaultSeparation","name","method","fields","as","field","stableCompare","separation","one","err","reflow","modifies","Output$3","pack","min","pack.radius","pack.size","pack.padding","Output$2","partition","partition.round","partition.size","partition.padding","fork","ALL","materialize","SOURCE","run","ADD_REM","parentKey","truthy","Layouts","tidy","firstWalk","secondWalk","nodeSize","sizeNode","left","right","bottom","tx","kx","ky","siblings","w","shift","change","midpoint","vop","vip","vom","sip","sop","sim","vim","som","wp","wm","tree.separation","tree.size","tree.nodeSize","cluster","previousNode","cluster.separation","cluster.size","cluster.nodeSize","Output$1","hasOwnProperty","NO_SOURCE","lut","visit","MOD","forEach","link","Tiles","binary","treemapBinary","valueOffset","sums","valueTarget","hi","mid","valueLeft","valueRight","xk","yk","slicedice","treemapSliceDice","Output","x.ratio","x.method","treelinks","defineProperty"]
}
