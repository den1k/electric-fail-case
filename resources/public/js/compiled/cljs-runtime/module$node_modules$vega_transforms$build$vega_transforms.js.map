{
"version":3,
"file":"module$node_modules$vega_transforms$build$vega_transforms.js",
"lineCount":116,
"mappings":"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",
"sources":["node_modules/vega-transforms/build/vega-transforms.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_transforms$build$vega_transforms\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('vega-dataflow'), require('vega-statistics'), require('vega-time')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'vega-dataflow', 'vega-statistics', 'vega-time'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega, global.vega, global.vega));\n})(this, (function (exports, vegaUtil, vegaDataflow, vegaStatistics, vegaTime) { 'use strict';\n\n  function multikey(f) {\n    return x => {\n      const n = f.length;\n      let i = 1,\n          k = String(f[0](x));\n\n      for (; i < n; ++i) {\n        k += '|' + f[i](x);\n      }\n\n      return k;\n    };\n  }\n  function groupkey(fields) {\n    return !fields || !fields.length ? function () {\n      return '';\n    } : fields.length === 1 ? fields[0] : multikey(fields);\n  }\n\n  function measureName(op, field, as) {\n    return as || op + (!field ? '' : '_' + field);\n  }\n\n  const noop = () => {};\n\n  const base_op = {\n    init: noop,\n    add: noop,\n    rem: noop,\n    idx: 0\n  };\n  const AggregateOps = {\n    values: {\n      init: m => m.cell.store = true,\n      value: m => m.cell.data.values(),\n      idx: -1\n    },\n    count: {\n      value: m => m.cell.num\n    },\n    __count__: {\n      value: m => m.missing + m.valid\n    },\n    missing: {\n      value: m => m.missing\n    },\n    valid: {\n      value: m => m.valid\n    },\n    sum: {\n      init: m => m.sum = 0,\n      value: m => m.sum,\n      add: (m, v) => m.sum += +v,\n      rem: (m, v) => m.sum -= v\n    },\n    product: {\n      init: m => m.product = 1,\n      value: m => m.valid ? m.product : undefined,\n      add: (m, v) => m.product *= v,\n      rem: (m, v) => m.product /= v\n    },\n    mean: {\n      init: m => m.mean = 0,\n      value: m => m.valid ? m.mean : undefined,\n      add: (m, v) => (m.mean_d = v - m.mean, m.mean += m.mean_d / m.valid),\n      rem: (m, v) => (m.mean_d = v - m.mean, m.mean -= m.valid ? m.mean_d / m.valid : m.mean)\n    },\n    average: {\n      value: m => m.valid ? m.mean : undefined,\n      req: ['mean'],\n      idx: 1\n    },\n    variance: {\n      init: m => m.dev = 0,\n      value: m => m.valid > 1 ? m.dev / (m.valid - 1) : undefined,\n      add: (m, v) => m.dev += m.mean_d * (v - m.mean),\n      rem: (m, v) => m.dev -= m.mean_d * (v - m.mean),\n      req: ['mean'],\n      idx: 1\n    },\n    variancep: {\n      value: m => m.valid > 1 ? m.dev / m.valid : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    stdev: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid - 1)) : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    stdevp: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / m.valid) : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    stderr: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid * (m.valid - 1))) : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    distinct: {\n      value: m => m.cell.data.distinct(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    ci0: {\n      value: m => m.cell.data.ci0(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    ci1: {\n      value: m => m.cell.data.ci1(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    median: {\n      value: m => m.cell.data.q2(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    q1: {\n      value: m => m.cell.data.q1(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    q3: {\n      value: m => m.cell.data.q3(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    min: {\n      init: m => m.min = undefined,\n      value: m => m.min = Number.isNaN(m.min) ? m.cell.data.min(m.get) : m.min,\n      add: (m, v) => {\n        if (v < m.min || m.min === undefined) m.min = v;\n      },\n      rem: (m, v) => {\n        if (v <= m.min) m.min = NaN;\n      },\n      req: ['values'],\n      idx: 4\n    },\n    max: {\n      init: m => m.max = undefined,\n      value: m => m.max = Number.isNaN(m.max) ? m.cell.data.max(m.get) : m.max,\n      add: (m, v) => {\n        if (v > m.max || m.max === undefined) m.max = v;\n      },\n      rem: (m, v) => {\n        if (v >= m.max) m.max = NaN;\n      },\n      req: ['values'],\n      idx: 4\n    },\n    argmin: {\n      init: m => m.argmin = undefined,\n      value: m => m.argmin || m.cell.data.argmin(m.get),\n      add: (m, v, t) => {\n        if (v < m.min) m.argmin = t;\n      },\n      rem: (m, v) => {\n        if (v <= m.min) m.argmin = undefined;\n      },\n      req: ['min', 'values'],\n      idx: 3\n    },\n    argmax: {\n      init: m => m.argmax = undefined,\n      value: m => m.argmax || m.cell.data.argmax(m.get),\n      add: (m, v, t) => {\n        if (v > m.max) m.argmax = t;\n      },\n      rem: (m, v) => {\n        if (v >= m.max) m.argmax = undefined;\n      },\n      req: ['max', 'values'],\n      idx: 3\n    }\n  };\n  const ValidAggregateOps = Object.keys(AggregateOps);\n\n  function measure(key, value) {\n    return out => vegaUtil.extend({\n      name: key,\n      out: out || key\n    }, base_op, value);\n  }\n\n  ValidAggregateOps.forEach(key => {\n    AggregateOps[key] = measure(key, AggregateOps[key]);\n  });\n  function createMeasure(op, name) {\n    return AggregateOps[op](name);\n  }\n\n  function compareIndex(a, b) {\n    return a.idx - b.idx;\n  }\n\n  function resolve(agg) {\n    const map = {};\n    agg.forEach(a => map[a.name] = a);\n\n    const getreqs = a => {\n      if (!a.req) return;\n      a.req.forEach(key => {\n        if (!map[key]) getreqs(map[key] = AggregateOps[key]());\n      });\n    };\n\n    agg.forEach(getreqs);\n    return Object.values(map).sort(compareIndex);\n  }\n\n  function init() {\n    this.valid = 0;\n    this.missing = 0;\n\n    this._ops.forEach(op => op.init(this));\n  }\n\n  function add(v, t) {\n    if (v == null || v === '') {\n      ++this.missing;\n      return;\n    }\n\n    if (v !== v) return;\n    ++this.valid;\n\n    this._ops.forEach(op => op.add(this, v, t));\n  }\n\n  function rem(v, t) {\n    if (v == null || v === '') {\n      --this.missing;\n      return;\n    }\n\n    if (v !== v) return;\n    --this.valid;\n\n    this._ops.forEach(op => op.rem(this, v, t));\n  }\n\n  function set(t) {\n    this._out.forEach(op => t[op.out] = op.value(this));\n\n    return t;\n  }\n\n  function compileMeasures(agg, field) {\n    const get = field || vegaUtil.identity,\n          ops = resolve(agg),\n          out = agg.slice().sort(compareIndex);\n\n    function ctr(cell) {\n      this._ops = ops;\n      this._out = out;\n      this.cell = cell;\n      this.init();\n    }\n\n    ctr.prototype.init = init;\n    ctr.prototype.add = add;\n    ctr.prototype.rem = rem;\n    ctr.prototype.set = set;\n    ctr.prototype.get = get;\n    ctr.fields = agg.map(op => op.out);\n    return ctr;\n  }\n\n  function TupleStore(key) {\n    this._key = key ? vegaUtil.field(key) : vegaDataflow.tupleid;\n    this.reset();\n  }\n  const prototype$1 = TupleStore.prototype;\n\n  prototype$1.reset = function () {\n    this._add = [];\n    this._rem = [];\n    this._ext = null;\n    this._get = null;\n    this._q = null;\n  };\n\n  prototype$1.add = function (v) {\n    this._add.push(v);\n  };\n\n  prototype$1.rem = function (v) {\n    this._rem.push(v);\n  };\n\n  prototype$1.values = function () {\n    this._get = null;\n    if (this._rem.length === 0) return this._add;\n    const a = this._add,\n          r = this._rem,\n          k = this._key,\n          n = a.length,\n          m = r.length,\n          x = Array(n - m),\n          map = {};\n    let i, j, v; // use unique key field to clear removed values\n\n    for (i = 0; i < m; ++i) {\n      map[k(r[i])] = 1;\n    }\n\n    for (i = 0, j = 0; i < n; ++i) {\n      if (map[k(v = a[i])]) {\n        map[k(v)] = 0;\n      } else {\n        x[j++] = v;\n      }\n    }\n\n    this._rem = [];\n    return this._add = x;\n  }; // memoizing statistics methods\n\n\n  prototype$1.distinct = function (get) {\n    const v = this.values(),\n          map = {};\n    let n = v.length,\n        count = 0,\n        s;\n\n    while (--n >= 0) {\n      s = get(v[n]) + '';\n\n      if (!vegaUtil.hasOwnProperty(map, s)) {\n        map[s] = 1;\n        ++count;\n      }\n    }\n\n    return count;\n  };\n\n  prototype$1.extent = function (get) {\n    if (this._get !== get || !this._ext) {\n      const v = this.values(),\n            i = vegaUtil.extentIndex(v, get);\n      this._ext = [v[i[0]], v[i[1]]];\n      this._get = get;\n    }\n\n    return this._ext;\n  };\n\n  prototype$1.argmin = function (get) {\n    return this.extent(get)[0] || {};\n  };\n\n  prototype$1.argmax = function (get) {\n    return this.extent(get)[1] || {};\n  };\n\n  prototype$1.min = function (get) {\n    const m = this.extent(get)[0];\n    return m != null ? get(m) : undefined;\n  };\n\n  prototype$1.max = function (get) {\n    const m = this.extent(get)[1];\n    return m != null ? get(m) : undefined;\n  };\n\n  prototype$1.quartile = function (get) {\n    if (this._get !== get || !this._q) {\n      this._q = vegaStatistics.quartiles(this.values(), get);\n      this._get = get;\n    }\n\n    return this._q;\n  };\n\n  prototype$1.q1 = function (get) {\n    return this.quartile(get)[0];\n  };\n\n  prototype$1.q2 = function (get) {\n    return this.quartile(get)[1];\n  };\n\n  prototype$1.q3 = function (get) {\n    return this.quartile(get)[2];\n  };\n\n  prototype$1.ci = function (get) {\n    if (this._get !== get || !this._ci) {\n      this._ci = vegaStatistics.bootstrapCI(this.values(), 1000, 0.05, get);\n      this._get = get;\n    }\n\n    return this._ci;\n  };\n\n  prototype$1.ci0 = function (get) {\n    return this.ci(get)[0];\n  };\n\n  prototype$1.ci1 = function (get) {\n    return this.ci(get)[1];\n  };\n\n  /**\n   * Group-by aggregation operator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.\n   * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.\n   * @param {Array<string>} [params.as] - An array of output field names for aggregated values.\n   * @param {boolean} [params.cross=false] - A flag indicating that the full\n   *   cross-product of groupby values should be generated, including empty cells.\n   *   If true, the drop parameter is ignored and empty cells are retained.\n   * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.\n   */\n\n  function Aggregate(params) {\n    vegaDataflow.Transform.call(this, null, params);\n    this._adds = []; // array of added output tuples\n\n    this._mods = []; // array of modified output tuples\n\n    this._alen = 0; // number of active added tuples\n\n    this._mlen = 0; // number of active modified tuples\n\n    this._drop = true; // should empty aggregation cells be removed\n\n    this._cross = false; // produce full cross-product of group-by values\n\n    this._dims = []; // group-by dimension accessors\n\n    this._dnames = []; // group-by dimension names\n\n    this._measures = []; // collection of aggregation monoids\n\n    this._countOnly = false; // flag indicating only count aggregation\n\n    this._counts = null; // collection of count fields\n\n    this._prev = null; // previous aggregation cells\n\n    this._inputs = null; // array of dependent input tuple field names\n\n    this._outputs = null; // array of output tuple field names\n  }\n  Aggregate.Definition = {\n    'type': 'Aggregate',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'ops',\n      'type': 'enum',\n      'array': true,\n      'values': ValidAggregateOps\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'drop',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'cross',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'key',\n      'type': 'field'\n    }]\n  };\n  vegaUtil.inherits(Aggregate, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const aggr = this,\n            out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n            mod = _.modified();\n\n      aggr.stamp = out.stamp;\n\n      if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n        aggr._prev = aggr.value;\n        aggr.value = mod ? aggr.init(_) : {};\n        pulse.visit(pulse.SOURCE, t => aggr.add(t));\n      } else {\n        aggr.value = aggr.value || aggr.init(_);\n        pulse.visit(pulse.REM, t => aggr.rem(t));\n        pulse.visit(pulse.ADD, t => aggr.add(t));\n      } // Indicate output fields and return aggregate tuples.\n\n\n      out.modifies(aggr._outputs); // Should empty cells be dropped?\n\n      aggr._drop = _.drop !== false; // If domain cross-product requested, generate empty cells as needed\n      // and ensure that empty cells are not dropped\n\n      if (_.cross && aggr._dims.length > 1) {\n        aggr._drop = false;\n        aggr.cross();\n      }\n\n      if (pulse.clean() && aggr._drop) {\n        out.clean(true).runAfter(() => this.clean());\n      }\n\n      return aggr.changes(out);\n    },\n\n    cross() {\n      const aggr = this,\n            curr = aggr.value,\n            dims = aggr._dnames,\n            vals = dims.map(() => ({})),\n            n = dims.length; // collect all group-by domain values\n\n      function collect(cells) {\n        let key, i, t, v;\n\n        for (key in cells) {\n          t = cells[key].tuple;\n\n          for (i = 0; i < n; ++i) {\n            vals[i][v = t[dims[i]]] = v;\n          }\n        }\n      }\n\n      collect(aggr._prev);\n      collect(curr); // iterate over key cross-product, create cells as needed\n\n      function generate(base, tuple, index) {\n        const name = dims[index],\n              v = vals[index++];\n\n        for (const k in v) {\n          const key = base ? base + '|' + k : k;\n          tuple[name] = v[k];\n          if (index < n) generate(key, tuple, index);else if (!curr[key]) aggr.cell(key, tuple);\n        }\n      }\n\n      generate('', {}, 0);\n    },\n\n    init(_) {\n      // initialize input and output fields\n      const inputs = this._inputs = [],\n            outputs = this._outputs = [],\n            inputMap = {};\n\n      function inputVisit(get) {\n        const fields = vegaUtil.array(vegaUtil.accessorFields(get)),\n              n = fields.length;\n        let i = 0,\n            f;\n\n        for (; i < n; ++i) {\n          if (!inputMap[f = fields[i]]) {\n            inputMap[f] = 1;\n            inputs.push(f);\n          }\n        }\n      } // initialize group-by dimensions\n\n\n      this._dims = vegaUtil.array(_.groupby);\n      this._dnames = this._dims.map(d => {\n        const dname = vegaUtil.accessorName(d);\n        inputVisit(d);\n        outputs.push(dname);\n        return dname;\n      });\n      this.cellkey = _.key ? _.key : groupkey(this._dims); // initialize aggregate measures\n\n      this._countOnly = true;\n      this._counts = [];\n      this._measures = [];\n      const fields = _.fields || [null],\n            ops = _.ops || ['count'],\n            as = _.as || [],\n            n = fields.length,\n            map = {};\n      let field, op, m, mname, outname, i;\n\n      if (n !== ops.length) {\n        vegaUtil.error('Unmatched number of fields and aggregate ops.');\n      }\n\n      for (i = 0; i < n; ++i) {\n        field = fields[i];\n        op = ops[i];\n\n        if (field == null && op !== 'count') {\n          vegaUtil.error('Null aggregate field specified.');\n        }\n\n        mname = vegaUtil.accessorName(field);\n        outname = measureName(op, mname, as[i]);\n        outputs.push(outname);\n\n        if (op === 'count') {\n          this._counts.push(outname);\n\n          continue;\n        }\n\n        m = map[mname];\n\n        if (!m) {\n          inputVisit(field);\n          m = map[mname] = [];\n          m.field = field;\n\n          this._measures.push(m);\n        }\n\n        if (op !== 'count') this._countOnly = false;\n        m.push(createMeasure(op, outname));\n      }\n\n      this._measures = this._measures.map(m => compileMeasures(m, m.field));\n      return {}; // aggregation cells (this.value)\n    },\n\n    // -- Cell Management -----\n    cellkey: groupkey(),\n\n    cell(key, t) {\n      let cell = this.value[key];\n\n      if (!cell) {\n        cell = this.value[key] = this.newcell(key, t);\n        this._adds[this._alen++] = cell;\n      } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {\n        cell.stamp = this.stamp;\n        this._adds[this._alen++] = cell;\n      } else if (cell.stamp < this.stamp) {\n        cell.stamp = this.stamp;\n        this._mods[this._mlen++] = cell;\n      }\n\n      return cell;\n    },\n\n    newcell(key, t) {\n      const cell = {\n        key: key,\n        num: 0,\n        agg: null,\n        tuple: this.newtuple(t, this._prev && this._prev[key]),\n        stamp: this.stamp,\n        store: false\n      };\n\n      if (!this._countOnly) {\n        const measures = this._measures,\n              n = measures.length;\n        cell.agg = Array(n);\n\n        for (let i = 0; i < n; ++i) {\n          cell.agg[i] = new measures[i](cell);\n        }\n      }\n\n      if (cell.store) {\n        cell.data = new TupleStore();\n      }\n\n      return cell;\n    },\n\n    newtuple(t, p) {\n      const names = this._dnames,\n            dims = this._dims,\n            n = dims.length,\n            x = {};\n\n      for (let i = 0; i < n; ++i) {\n        x[names[i]] = dims[i](t);\n      }\n\n      return p ? vegaDataflow.replace(p.tuple, x) : vegaDataflow.ingest(x);\n    },\n\n    clean() {\n      const cells = this.value;\n\n      for (const key in cells) {\n        if (cells[key].num === 0) {\n          delete cells[key];\n        }\n      }\n    },\n\n    // -- Process Tuples -----\n    add(t) {\n      const key = this.cellkey(t),\n            cell = this.cell(key, t);\n      cell.num += 1;\n      if (this._countOnly) return;\n      if (cell.store) cell.data.add(t);\n      const agg = cell.agg;\n\n      for (let i = 0, n = agg.length; i < n; ++i) {\n        agg[i].add(agg[i].get(t), t);\n      }\n    },\n\n    rem(t) {\n      const key = this.cellkey(t),\n            cell = this.cell(key, t);\n      cell.num -= 1;\n      if (this._countOnly) return;\n      if (cell.store) cell.data.rem(t);\n      const agg = cell.agg;\n\n      for (let i = 0, n = agg.length; i < n; ++i) {\n        agg[i].rem(agg[i].get(t), t);\n      }\n    },\n\n    celltuple(cell) {\n      const tuple = cell.tuple,\n            counts = this._counts; // consolidate stored values\n\n      if (cell.store) {\n        cell.data.values();\n      } // update tuple properties\n\n\n      for (let i = 0, n = counts.length; i < n; ++i) {\n        tuple[counts[i]] = cell.num;\n      }\n\n      if (!this._countOnly) {\n        const agg = cell.agg;\n\n        for (let i = 0, n = agg.length; i < n; ++i) {\n          agg[i].set(tuple);\n        }\n      }\n\n      return tuple;\n    },\n\n    changes(out) {\n      const adds = this._adds,\n            mods = this._mods,\n            prev = this._prev,\n            drop = this._drop,\n            add = out.add,\n            rem = out.rem,\n            mod = out.mod;\n      let cell, key, i, n;\n      if (prev) for (key in prev) {\n        cell = prev[key];\n        if (!drop || cell.num) rem.push(cell.tuple);\n      }\n\n      for (i = 0, n = this._alen; i < n; ++i) {\n        add.push(this.celltuple(adds[i]));\n        adds[i] = null; // for garbage collection\n      }\n\n      for (i = 0, n = this._mlen; i < n; ++i) {\n        cell = mods[i];\n        (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));\n        mods[i] = null; // for garbage collection\n      }\n\n      this._alen = this._mlen = 0; // reset list of active cells\n\n      this._prev = null;\n      return out;\n    }\n\n  });\n\n  const EPSILON$1 = 1e-14;\n  /**\n   * Generates a binning function for discretizing data.\n   * @constructor\n   * @param {object} params - The parameters for this operator. The\n   *   provided values should be valid options for the {@link bin} function.\n   * @param {function(object): *} params.field - The data field to bin.\n   */\n\n  function Bin(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Bin.Definition = {\n    'type': 'Bin',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'interval',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'anchor',\n      'type': 'number'\n    }, {\n      'name': 'maxbins',\n      'type': 'number',\n      'default': 20\n    }, {\n      'name': 'base',\n      'type': 'number',\n      'default': 10\n    }, {\n      'name': 'divide',\n      'type': 'number',\n      'array': true,\n      'default': [5, 2]\n    }, {\n      'name': 'extent',\n      'type': 'number',\n      'array': true,\n      'length': 2,\n      'required': true\n    }, {\n      'name': 'span',\n      'type': 'number'\n    }, {\n      'name': 'step',\n      'type': 'number'\n    }, {\n      'name': 'steps',\n      'type': 'number',\n      'array': true\n    }, {\n      'name': 'minstep',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'nice',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'name',\n      'type': 'string'\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['bin0', 'bin1']\n    }]\n  };\n  vegaUtil.inherits(Bin, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const band = _.interval !== false,\n            bins = this._bins(_),\n            start = bins.start,\n            step = bins.step,\n            as = _.as || ['bin0', 'bin1'],\n            b0 = as[0],\n            b1 = as[1];\n\n      let flag;\n\n      if (_.modified()) {\n        pulse = pulse.reflow(true);\n        flag = pulse.SOURCE;\n      } else {\n        flag = pulse.modified(vegaUtil.accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;\n      }\n\n      pulse.visit(flag, band ? t => {\n        const v = bins(t); // minimum bin value (inclusive)\n\n        t[b0] = v; // maximum bin value (exclusive)\n        // use convoluted math for better floating point agreement\n        // see https://github.com/vega/vega/issues/830\n        // infinite values propagate through this formula! #2227\n\n        t[b1] = v == null ? null : start + step * (1 + (v - start) / step);\n      } : t => t[b0] = bins(t));\n      return pulse.modifies(band ? as : b0);\n    },\n\n    _bins(_) {\n      if (this.value && !_.modified()) {\n        return this.value;\n      }\n\n      const field = _.field,\n            bins = vegaStatistics.bin(_),\n            step = bins.step;\n      let start = bins.start,\n          stop = start + Math.ceil((bins.stop - start) / step) * step,\n          a,\n          d;\n\n      if ((a = _.anchor) != null) {\n        d = a - (start + step * Math.floor((a - start) / step));\n        start += d;\n        stop += d;\n      }\n\n      const f = function (t) {\n        let v = vegaUtil.toNumber(field(t));\n        return v == null ? null : v < start ? -Infinity : v > stop ? +Infinity : (v = Math.max(start, Math.min(v, stop - step)), start + step * Math.floor(EPSILON$1 + (v - start) / step));\n      };\n\n      f.start = start;\n      f.stop = bins.stop;\n      f.step = step;\n      return this.value = vegaUtil.accessor(f, vegaUtil.accessorFields(field), _.name || 'bin_' + vegaUtil.accessorName(field));\n    }\n\n  });\n\n  function SortedList (idFunc, source, input) {\n    const $ = idFunc;\n    let data = source || [],\n        add = input || [],\n        rem = {},\n        cnt = 0;\n    return {\n      add: t => add.push(t),\n      remove: t => rem[$(t)] = ++cnt,\n      size: () => data.length,\n      data: (compare, resort) => {\n        if (cnt) {\n          data = data.filter(t => !rem[$(t)]);\n          rem = {};\n          cnt = 0;\n        }\n\n        if (resort && compare) {\n          data.sort(compare);\n        }\n\n        if (add.length) {\n          data = compare ? vegaUtil.merge(compare, data, add.sort(compare)) : data.concat(add);\n          add = [];\n        }\n\n        return data;\n      }\n    };\n  }\n\n  /**\n   * Collects all data tuples that pass through this operator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for additionally sorting the collected tuples.\n   */\n\n  function Collect(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  Collect.Definition = {\n    'type': 'Collect',\n    'metadata': {\n      'source': true\n    },\n    'params': [{\n      'name': 'sort',\n      'type': 'compare'\n    }]\n  };\n  vegaUtil.inherits(Collect, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.ALL),\n            list = SortedList(vegaDataflow.tupleid, this.value, out.materialize(out.ADD).add),\n            sort = _.sort,\n            mod = pulse.changed() || sort && (_.modified('sort') || pulse.modified(sort.fields));\n      out.visit(out.REM, list.remove);\n      this.modified(mod);\n      this.value = out.source = list.data(vegaDataflow.stableCompare(sort), mod); // propagate tree root if defined\n\n      if (pulse.source && pulse.source.root) {\n        this.value.root = pulse.source.root;\n      }\n\n      return out;\n    }\n\n  });\n\n  /**\n   * Generates a comparator function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<string|function>} params.fields - The fields to compare.\n   * @param {Array<string>} [params.orders] - The sort orders.\n   *   Each entry should be one of \"ascending\" (default) or \"descending\".\n   */\n\n  function Compare(params) {\n    vegaDataflow.Operator.call(this, null, update$5, params);\n  }\n  vegaUtil.inherits(Compare, vegaDataflow.Operator);\n\n  function update$5(_) {\n    return this.value && !_.modified() ? this.value : vegaUtil.compare(_.fields, _.orders);\n  }\n\n  /**\n   * Count regexp-defined pattern occurrences in a text field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - An accessor for the text field.\n   * @param {string} [params.pattern] - RegExp string defining the text pattern.\n   * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.\n   * @param {string} [params.stopwords] - RegExp string of words to ignore.\n   */\n\n  function CountPattern(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  CountPattern.Definition = {\n    'type': 'CountPattern',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'case',\n      'type': 'enum',\n      'values': ['upper', 'lower', 'mixed'],\n      'default': 'mixed'\n    }, {\n      'name': 'pattern',\n      'type': 'string',\n      'default': '[\\\\w\"]+'\n    }, {\n      'name': 'stopwords',\n      'type': 'string',\n      'default': ''\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['text', 'count']\n    }]\n  };\n\n  function tokenize(text, tcase, match) {\n    switch (tcase) {\n      case 'upper':\n        text = text.toUpperCase();\n        break;\n\n      case 'lower':\n        text = text.toLowerCase();\n        break;\n    }\n\n    return text.match(match);\n  }\n\n  vegaUtil.inherits(CountPattern, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const process = update => tuple => {\n        var tokens = tokenize(get(tuple), _.case, match) || [],\n            t;\n\n        for (var i = 0, n = tokens.length; i < n; ++i) {\n          if (!stop.test(t = tokens[i])) update(t);\n        }\n      };\n\n      const init = this._parameterCheck(_, pulse),\n            counts = this._counts,\n            match = this._match,\n            stop = this._stop,\n            get = _.field,\n            as = _.as || ['text', 'count'],\n            add = process(t => counts[t] = 1 + (counts[t] || 0)),\n            rem = process(t => counts[t] -= 1);\n\n      if (init) {\n        pulse.visit(pulse.SOURCE, add);\n      } else {\n        pulse.visit(pulse.ADD, add);\n        pulse.visit(pulse.REM, rem);\n      }\n\n      return this._finish(pulse, as); // generate output tuples\n    },\n\n    _parameterCheck(_, pulse) {\n      let init = false;\n\n      if (_.modified('stopwords') || !this._stop) {\n        this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');\n        init = true;\n      }\n\n      if (_.modified('pattern') || !this._match) {\n        this._match = new RegExp(_.pattern || '[\\\\w\\']+', 'g');\n        init = true;\n      }\n\n      if (_.modified('field') || pulse.modified(_.field.fields)) {\n        init = true;\n      }\n\n      if (init) this._counts = {};\n      return init;\n    },\n\n    _finish(pulse, as) {\n      const counts = this._counts,\n            tuples = this._tuples || (this._tuples = {}),\n            text = as[0],\n            count = as[1],\n            out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n      let w, t, c;\n\n      for (w in counts) {\n        t = tuples[w];\n        c = counts[w] || 0;\n\n        if (!t && c) {\n          tuples[w] = t = vegaDataflow.ingest({});\n          t[text] = w;\n          t[count] = c;\n          out.add.push(t);\n        } else if (c === 0) {\n          if (t) out.rem.push(t);\n          counts[w] = null;\n          tuples[w] = null;\n        } else if (t[count] !== c) {\n          t[count] = c;\n          out.mod.push(t);\n        }\n      }\n\n      return out.modifies(as);\n    }\n\n  });\n\n  /**\n   * Perform a cross-product of a tuple stream with itself.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object):boolean} [params.filter] - An optional filter\n   *   function for selectively including tuples in the cross product.\n   * @param {Array<string>} [params.as] - The names of the output fields.\n   */\n\n  function Cross(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Cross.Definition = {\n    'type': 'Cross',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'filter',\n      'type': 'expr'\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['a', 'b']\n    }]\n  };\n  vegaUtil.inherits(Cross, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            as = _.as || ['a', 'b'],\n            a = as[0],\n            b = as[1],\n            reset = !this.value || pulse.changed(pulse.ADD_REM) || _.modified('as') || _.modified('filter');\n\n      let data = this.value;\n\n      if (reset) {\n        if (data) out.rem = data;\n        data = pulse.materialize(pulse.SOURCE).source;\n        out.add = this.value = cross(data, a, b, _.filter || vegaUtil.truthy);\n      } else {\n        out.mod = data;\n      }\n\n      out.source = this.value;\n      return out.modifies(as);\n    }\n\n  });\n\n  function cross(input, a, b, filter) {\n    var data = [],\n        t = {},\n        n = input.length,\n        i = 0,\n        j,\n        left;\n\n    for (; i < n; ++i) {\n      t[a] = left = input[i];\n\n      for (j = 0; j < n; ++j) {\n        t[b] = input[j];\n\n        if (filter(t)) {\n          data.push(vegaDataflow.ingest(t));\n          t = {};\n          t[a] = left;\n        }\n      }\n    }\n\n    return data;\n  }\n\n  const Distributions = {\n    kde: vegaStatistics.randomKDE,\n    mixture: vegaStatistics.randomMixture,\n    normal: vegaStatistics.randomNormal,\n    lognormal: vegaStatistics.randomLogNormal,\n    uniform: vegaStatistics.randomUniform\n  };\n  const DISTRIBUTIONS = 'distributions',\n        FUNCTION = 'function',\n        FIELD = 'field';\n  /**\n   * Parse a parameter object for a probability distribution.\n   * @param {object} def - The distribution parameter object.\n   * @param {function():Array<object>} - A method for requesting\n   *   source data. Used for distributions (such as KDE) that\n   *   require sample data points. This method will only be\n   *   invoked if the 'from' parameter for a target data source\n   *   is not provided. Typically this method returns backing\n   *   source data for a Pulse object.\n   * @return {object} - The output distribution object.\n   */\n\n  function parse(def, data) {\n    const func = def[FUNCTION];\n\n    if (!vegaUtil.hasOwnProperty(Distributions, func)) {\n      vegaUtil.error('Unknown distribution function: ' + func);\n    }\n\n    const d = Distributions[func]();\n\n    for (const name in def) {\n      // if data field, extract values\n      if (name === FIELD) {\n        d.data((def.from || data()).map(def[name]));\n      } // if distribution mixture, recurse to parse each definition\n      else if (name === DISTRIBUTIONS) {\n        d[name](def[name].map(_ => parse(_, data)));\n      } // otherwise, simply set the parameter\n      else if (typeof d[name] === FUNCTION) {\n        d[name](def[name]);\n      }\n    }\n\n    return d;\n  }\n\n  /**\n   * Grid sample points for a probability density. Given a distribution and\n   * a sampling extent, will generate points suitable for plotting either\n   * PDF (probability density function) or CDF (cumulative distribution\n   * function) curves.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.distribution - The probability distribution. This\n   *   is an object parameter dependent on the distribution type.\n   * @param {string} [params.method='pdf'] - The distribution method to sample.\n   *   One of 'pdf' or 'cdf'.\n   * @param {Array<number>} [params.extent] - The [min, max] extent over which\n   *   to sample the distribution. This argument is required in most cases, but\n   *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method\n   *   that returns numerical sample points from which the extent can be deduced.\n   * @param {number} [params.minsteps=25] - The minimum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.steps] - The exact number of curve samples for\n   *   plotting the density. If specified, overrides both minsteps and maxsteps\n   *   to set an exact number of uniform samples. Useful in conjunction with\n   *   a fixed extent to ensure consistent sample points for stacked densities.\n   */\n\n  function Density(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  const distributions = [{\n    'key': {\n      'function': 'normal'\n    },\n    'params': [{\n      'name': 'mean',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'stdev',\n      'type': 'number',\n      'default': 1\n    }]\n  }, {\n    'key': {\n      'function': 'lognormal'\n    },\n    'params': [{\n      'name': 'mean',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'stdev',\n      'type': 'number',\n      'default': 1\n    }]\n  }, {\n    'key': {\n      'function': 'uniform'\n    },\n    'params': [{\n      'name': 'min',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'max',\n      'type': 'number',\n      'default': 1\n    }]\n  }, {\n    'key': {\n      'function': 'kde'\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'from',\n      'type': 'data'\n    }, {\n      'name': 'bandwidth',\n      'type': 'number',\n      'default': 0\n    }]\n  }];\n  const mixture = {\n    'key': {\n      'function': 'mixture'\n    },\n    'params': [{\n      'name': 'distributions',\n      'type': 'param',\n      'array': true,\n      'params': distributions\n    }, {\n      'name': 'weights',\n      'type': 'number',\n      'array': true\n    }]\n  };\n  Density.Definition = {\n    'type': 'Density',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'extent',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'steps',\n      'type': 'number'\n    }, {\n      'name': 'minsteps',\n      'type': 'number',\n      'default': 25\n    }, {\n      'name': 'maxsteps',\n      'type': 'number',\n      'default': 200\n    }, {\n      'name': 'method',\n      'type': 'string',\n      'default': 'pdf',\n      'values': ['pdf', 'cdf']\n    }, {\n      'name': 'distribution',\n      'type': 'param',\n      'params': distributions.concat(mixture)\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'default': ['value', 'density']\n    }]\n  };\n  vegaUtil.inherits(Density, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n      if (!this.value || pulse.changed() || _.modified()) {\n        const dist = parse(_.distribution, source(pulse)),\n              minsteps = _.steps || _.minsteps || 25,\n              maxsteps = _.steps || _.maxsteps || 200;\n        let method = _.method || 'pdf';\n\n        if (method !== 'pdf' && method !== 'cdf') {\n          vegaUtil.error('Invalid density method: ' + method);\n        }\n\n        if (!_.extent && !dist.data) {\n          vegaUtil.error('Missing density extent parameter.');\n        }\n\n        method = dist[method];\n        const as = _.as || ['value', 'density'],\n              domain = _.extent || vegaUtil.extent(dist.data()),\n              values = vegaStatistics.sampleCurve(method, domain, minsteps, maxsteps).map(v => {\n          const tuple = {};\n          tuple[as[0]] = v[0];\n          tuple[as[1]] = v[1];\n          return vegaDataflow.ingest(tuple);\n        });\n        if (this.value) out.rem = this.value;\n        this.value = out.add = out.source = values;\n      }\n\n      return out;\n    }\n\n  });\n\n  function source(pulse) {\n    return () => pulse.materialize(pulse.SOURCE).source;\n  }\n\n  function fieldNames(fields, as) {\n    if (!fields) return null;\n    return fields.map((f, i) => as[i] || vegaUtil.accessorName(f));\n  }\n  function partition$1(data, groupby, field) {\n    const groups = [],\n          get = f => f(t);\n\n    let map, i, n, t, k, g; // partition data points into groups\n\n    if (groupby == null) {\n      groups.push(data.map(field));\n    } else {\n      for (map = {}, i = 0, n = data.length; i < n; ++i) {\n        t = data[i];\n        k = groupby.map(get);\n        g = map[k];\n\n        if (!g) {\n          map[k] = g = [];\n          g.dims = k;\n          groups.push(g);\n        }\n\n        g.push(field(t));\n      }\n    }\n\n    return groups;\n  }\n\n  const Output = 'bin';\n  /**\n   * Dot density binning for dot plot construction.\n   * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n   * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to bin.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {number} [params.step] - The step size (bin width) within which dots should be\n   *   stacked. Defaults to 1/30 of the extent of the data *field*.\n   * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density\n   *   stacks should be smoothed to reduce variance.\n   */\n\n  function DotBin(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  DotBin.Definition = {\n    'type': 'DotBin',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'step',\n      'type': 'number'\n    }, {\n      'name': 'smooth',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'default': Output\n    }]\n  };\n\n  const autostep = (data, field) => vegaUtil.span(vegaUtil.extent(data, field)) / 30;\n\n  vegaUtil.inherits(DotBin, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (this.value && !(_.modified() || pulse.changed())) {\n        return pulse; // early exit\n      }\n\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition$1(pulse.source, _.groupby, vegaUtil.identity),\n            smooth = _.smooth || false,\n            field = _.field,\n            step = _.step || autostep(source, field),\n            sort = vegaDataflow.stableCompare((a, b) => field(a) - field(b)),\n            as = _.as || Output,\n            n = groups.length; // compute dotplot bins per group\n\n      let min = Infinity,\n          max = -Infinity,\n          i = 0,\n          j;\n\n      for (; i < n; ++i) {\n        const g = groups[i].sort(sort);\n        j = -1;\n\n        for (const v of vegaStatistics.dotbin(g, step, smooth, field)) {\n          if (v < min) min = v;\n          if (v > max) max = v;\n          g[++j][as] = v;\n        }\n      }\n\n      this.value = {\n        start: min,\n        stop: max,\n        step: step\n      };\n      return pulse.reflow(true).modifies(as);\n    }\n\n  });\n\n  /**\n   * Wraps an expression function with access to external parameters.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function} params.expr - The expression function. The\n   *  function should accept both a datum and a parameter object.\n   *  This operator's value will be a new function that wraps the\n   *  expression function with access to this operator's parameters.\n   */\n\n  function Expression(params) {\n    vegaDataflow.Operator.call(this, null, update$4, params);\n    this.modified(true);\n  }\n  vegaUtil.inherits(Expression, vegaDataflow.Operator);\n\n  function update$4(_) {\n    const expr = _.expr;\n    return this.value && !_.modified('expr') ? this.value : vegaUtil.accessor(datum => expr(datum, _), vegaUtil.accessorFields(expr), vegaUtil.accessorName(expr));\n  }\n\n  /**\n   * Computes extents (min/max) for a data field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The field over which to compute extends.\n   */\n\n  function Extent(params) {\n    vegaDataflow.Transform.call(this, [undefined, undefined], params);\n  }\n  Extent.Definition = {\n    'type': 'Extent',\n    'metadata': {},\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }]\n  };\n  vegaUtil.inherits(Extent, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const extent = this.value,\n            field = _.field,\n            mod = pulse.changed() || pulse.modified(field.fields) || _.modified('field');\n\n      let min = extent[0],\n          max = extent[1];\n\n      if (mod || min == null) {\n        min = +Infinity;\n        max = -Infinity;\n      }\n\n      pulse.visit(mod ? pulse.SOURCE : pulse.ADD, t => {\n        const v = vegaUtil.toNumber(field(t));\n\n        if (v != null) {\n          // NaNs will fail all comparisons!\n          if (v < min) min = v;\n          if (v > max) max = v;\n        }\n      });\n\n      if (!Number.isFinite(min) || !Number.isFinite(max)) {\n        let name = vegaUtil.accessorName(field);\n        if (name) name = ` for field \"${name}\"`;\n        pulse.dataflow.warn(`Infinite extent${name}: [${min}, ${max}]`);\n        min = max = undefined;\n      }\n\n      this.value = [min, max];\n    }\n\n  });\n\n  /**\n   * Provides a bridge between a parent transform and a target subflow that\n   * consumes only a subset of the tuples that pass through the parent.\n   * @constructor\n   * @param {Pulse} pulse - A pulse to use as the value of this operator.\n   * @param {Transform} parent - The parent transform (typically a Facet instance).\n   */\n\n  function Subflow(pulse, parent) {\n    vegaDataflow.Operator.call(this, pulse);\n    this.parent = parent;\n    this.count = 0;\n  }\n  vegaUtil.inherits(Subflow, vegaDataflow.Operator, {\n    /**\n     * Routes pulses from this subflow to a target transform.\n     * @param {Transform} target - A transform that receives the subflow of tuples.\n     */\n    connect(target) {\n      this.detachSubflow = target.detachSubflow;\n      this.targets().add(target);\n      return target.source = this;\n    },\n\n    /**\n     * Add an 'add' tuple to the subflow pulse.\n     * @param {Tuple} t - The tuple being added.\n     */\n    add(t) {\n      this.count += 1;\n      this.value.add.push(t);\n    },\n\n    /**\n     * Add a 'rem' tuple to the subflow pulse.\n     * @param {Tuple} t - The tuple being removed.\n     */\n    rem(t) {\n      this.count -= 1;\n      this.value.rem.push(t);\n    },\n\n    /**\n     * Add a 'mod' tuple to the subflow pulse.\n     * @param {Tuple} t - The tuple being modified.\n     */\n    mod(t) {\n      this.value.mod.push(t);\n    },\n\n    /**\n     * Re-initialize this operator's pulse value.\n     * @param {Pulse} pulse - The pulse to copy from.\n     * @see Pulse.init\n     */\n    init(pulse) {\n      this.value.init(pulse, pulse.NO_SOURCE);\n    },\n\n    /**\n     * Evaluate this operator. This method overrides the\n     * default behavior to simply return the contained pulse value.\n     * @return {Pulse}\n     */\n    evaluate() {\n      // assert: this.value.stamp === pulse.stamp\n      return this.value;\n    }\n\n  });\n\n  /**\n   * Facets a dataflow into a set of subflows based on a key.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Dataflow, string): Operator} params.subflow - A function\n   *   that generates a subflow of operators and returns its root operator.\n   * @param {function(object): *} params.key - The key field to facet by.\n   */\n\n  function Facet(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n    this._keys = vegaUtil.fastmap(); // cache previously calculated key values\n    // keep track of active subflows, use as targets array for listeners\n    // this allows us to limit propagation to only updated subflows\n\n    const a = this._targets = [];\n    a.active = 0;\n\n    a.forEach = f => {\n      for (let i = 0, n = a.active; i < n; ++i) {\n        f(a[i], i, a);\n      }\n    };\n  }\n  vegaUtil.inherits(Facet, vegaDataflow.Transform, {\n    activate(flow) {\n      this._targets[this._targets.active++] = flow;\n    },\n\n    // parent argument provided by PreFacet subclass\n    subflow(key, flow, pulse, parent) {\n      const flows = this.value;\n      let sf = vegaUtil.hasOwnProperty(flows, key) && flows[key],\n          df,\n          p;\n\n      if (!sf) {\n        p = parent || (p = this._group[key]) && p.tuple;\n        df = pulse.dataflow;\n        sf = new Subflow(pulse.fork(pulse.NO_SOURCE), this);\n        df.add(sf).connect(flow(df, key, p));\n        flows[key] = sf;\n        this.activate(sf);\n      } else if (sf.value.stamp < pulse.stamp) {\n        sf.init(pulse);\n        this.activate(sf);\n      }\n\n      return sf;\n    },\n\n    clean() {\n      const flows = this.value;\n      let detached = 0;\n\n      for (const key in flows) {\n        if (flows[key].count === 0) {\n          const detach = flows[key].detachSubflow;\n          if (detach) detach();\n          delete flows[key];\n          ++detached;\n        }\n      } // remove inactive targets from the active targets array\n\n\n      if (detached) {\n        const active = this._targets.filter(sf => sf && sf.count > 0);\n\n        this.initTargets(active);\n      }\n    },\n\n    initTargets(act) {\n      const a = this._targets,\n            n = a.length,\n            m = act ? act.length : 0;\n      let i = 0;\n\n      for (; i < m; ++i) {\n        a[i] = act[i];\n      }\n\n      for (; i < n && a[i] != null; ++i) {\n        a[i] = null; // ensure old flows can be garbage collected\n      }\n\n      a.active = m;\n    },\n\n    transform(_, pulse) {\n      const df = pulse.dataflow,\n            key = _.key,\n            flow = _.subflow,\n            cache = this._keys,\n            rekey = _.modified('key'),\n            subflow = key => this.subflow(key, flow, pulse);\n\n      this._group = _.group || {};\n      this.initTargets(); // reset list of active subflows\n\n      pulse.visit(pulse.REM, t => {\n        const id = vegaDataflow.tupleid(t),\n              k = cache.get(id);\n\n        if (k !== undefined) {\n          cache.delete(id);\n          subflow(k).rem(t);\n        }\n      });\n      pulse.visit(pulse.ADD, t => {\n        const k = key(t);\n        cache.set(vegaDataflow.tupleid(t), k);\n        subflow(k).add(t);\n      });\n\n      if (rekey || pulse.modified(key.fields)) {\n        pulse.visit(pulse.MOD, t => {\n          const id = vegaDataflow.tupleid(t),\n                k0 = cache.get(id),\n                k1 = key(t);\n\n          if (k0 === k1) {\n            subflow(k1).mod(t);\n          } else {\n            cache.set(id, k1);\n            subflow(k0).rem(t);\n            subflow(k1).add(t);\n          }\n        });\n      } else if (pulse.changed(pulse.MOD)) {\n        pulse.visit(pulse.MOD, t => {\n          subflow(cache.get(vegaDataflow.tupleid(t))).mod(t);\n        });\n      }\n\n      if (rekey) {\n        pulse.visit(pulse.REFLOW, t => {\n          const id = vegaDataflow.tupleid(t),\n                k0 = cache.get(id),\n                k1 = key(t);\n\n          if (k0 !== k1) {\n            cache.set(id, k1);\n            subflow(k0).rem(t);\n            subflow(k1).add(t);\n          }\n        });\n      }\n\n      if (pulse.clean()) {\n        df.runAfter(() => {\n          this.clean();\n          cache.clean();\n        });\n      } else if (cache.empty > df.cleanThreshold) {\n        df.runAfter(cache.clean);\n      }\n\n      return pulse;\n    }\n\n  });\n\n  /**\n   * Generates one or more field accessor functions.\n   * If the 'name' parameter is an array, an array of field accessors\n   * will be created and the 'as' parameter will be ignored.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.name - The field name(s) to access.\n   * @param {string} params.as - The accessor function name.\n   */\n\n  function Field(params) {\n    vegaDataflow.Operator.call(this, null, update$3, params);\n  }\n  vegaUtil.inherits(Field, vegaDataflow.Operator);\n\n  function update$3(_) {\n    return this.value && !_.modified() ? this.value : vegaUtil.isArray(_.name) ? vegaUtil.array(_.name).map(f => vegaUtil.field(f)) : vegaUtil.field(_.name, _.as);\n  }\n\n  /**\n   * Filters data tuples according to a predicate function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.expr - The predicate expression function\n   *   that determines a tuple's filter status. Truthy values pass the filter.\n   */\n\n  function Filter(params) {\n    vegaDataflow.Transform.call(this, vegaUtil.fastmap(), params);\n  }\n  Filter.Definition = {\n    'type': 'Filter',\n    'metadata': {\n      'changes': true\n    },\n    'params': [{\n      'name': 'expr',\n      'type': 'expr',\n      'required': true\n    }]\n  };\n  vegaUtil.inherits(Filter, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const df = pulse.dataflow,\n            cache = this.value,\n            // cache ids of filtered tuples\n      output = pulse.fork(),\n            add = output.add,\n            rem = output.rem,\n            mod = output.mod,\n            test = _.expr;\n      let isMod = true;\n      pulse.visit(pulse.REM, t => {\n        const id = vegaDataflow.tupleid(t);\n        if (!cache.has(id)) rem.push(t);else cache.delete(id);\n      });\n      pulse.visit(pulse.ADD, t => {\n        if (test(t, _)) add.push(t);else cache.set(vegaDataflow.tupleid(t), 1);\n      });\n\n      function revisit(t) {\n        const id = vegaDataflow.tupleid(t),\n              b = test(t, _),\n              s = cache.get(id);\n\n        if (b && s) {\n          cache.delete(id);\n          add.push(t);\n        } else if (!b && !s) {\n          cache.set(id, 1);\n          rem.push(t);\n        } else if (isMod && b && !s) {\n          mod.push(t);\n        }\n      }\n\n      pulse.visit(pulse.MOD, revisit);\n\n      if (_.modified()) {\n        isMod = false;\n        pulse.visit(pulse.REFLOW, revisit);\n      }\n\n      if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n      return output;\n    }\n\n  });\n\n  /**\n   * Flattens array-typed field values into new data objects.\n   * If multiple fields are specified, they are treated as parallel arrays,\n   * with output values included for each matching index (or null if missing).\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} params.fields - An array of field\n   *   accessors for the tuple fields that should be flattened.\n   * @param {string} [params.index] - Optional output field name for index\n   *   value. If unspecified, no index field is included in the output.\n   * @param {Array<string>} [params.as] - Output field names for flattened\n   *   array fields. Any unspecified fields will use the field name provided\n   *   by the fields accessors.\n   */\n\n  function Flatten(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  Flatten.Definition = {\n    'type': 'Flatten',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true\n    }, {\n      'name': 'index',\n      'type': 'string'\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true\n    }]\n  };\n  vegaUtil.inherits(Flatten, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            fields = _.fields,\n            as = fieldNames(fields, _.as || []),\n            index = _.index || null,\n            m = as.length; // remove any previous results\n\n      out.rem = this.value; // generate flattened tuples\n\n      pulse.visit(pulse.SOURCE, t => {\n        const arrays = fields.map(f => f(t)),\n              maxlen = arrays.reduce((l, a) => Math.max(l, a.length), 0);\n        let i = 0,\n            j,\n            d,\n            v;\n\n        for (; i < maxlen; ++i) {\n          d = vegaDataflow.derive(t);\n\n          for (j = 0; j < m; ++j) {\n            d[as[j]] = (v = arrays[j][i]) == null ? null : v;\n          }\n\n          if (index) {\n            d[index] = i;\n          }\n\n          out.add.push(d);\n        }\n      });\n      this.value = out.source = out.add;\n      if (index) out.modifies(index);\n      return out.modifies(as);\n    }\n\n  });\n\n  /**\n   * Folds one more tuple fields into multiple tuples in which the field\n   * name and values are available under new 'key' and 'value' fields.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.fields - An array of field accessors\n   *   for the tuple fields that should be folded.\n   * @param {Array<string>} [params.as] - Output field names for folded key\n   *   and value fields, defaults to ['key', 'value'].\n   */\n\n  function Fold(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  Fold.Definition = {\n    'type': 'Fold',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['key', 'value']\n    }]\n  };\n  vegaUtil.inherits(Fold, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            fields = _.fields,\n            fnames = fields.map(vegaUtil.accessorName),\n            as = _.as || ['key', 'value'],\n            k = as[0],\n            v = as[1],\n            n = fields.length;\n      out.rem = this.value;\n      pulse.visit(pulse.SOURCE, t => {\n        for (let i = 0, d; i < n; ++i) {\n          d = vegaDataflow.derive(t);\n          d[k] = fnames[i];\n          d[v] = fields[i](t);\n          out.add.push(d);\n        }\n      });\n      this.value = out.source = out.add;\n      return out.modifies(as);\n    }\n\n  });\n\n  /**\n   * Invokes a function for each data tuple and saves the results as a new field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.expr - The formula function to invoke for each tuple.\n   * @param {string} params.as - The field name under which to save the result.\n   * @param {boolean} [params.initonly=false] - If true, the formula is applied to\n   *   added tuples only, and does not update in response to modifications.\n   */\n\n  function Formula(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Formula.Definition = {\n    'type': 'Formula',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'expr',\n      'type': 'expr',\n      'required': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'required': true\n    }, {\n      'name': 'initonly',\n      'type': 'boolean'\n    }]\n  };\n  vegaUtil.inherits(Formula, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const func = _.expr,\n            as = _.as,\n            mod = _.modified(),\n            flag = _.initonly ? pulse.ADD : mod ? pulse.SOURCE : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD : pulse.ADD;\n\n      if (mod) {\n        // parameters updated, need to reflow\n        pulse = pulse.materialize().reflow(true);\n      }\n\n      if (!_.initonly) {\n        pulse.modifies(as);\n      }\n\n      return pulse.visit(flag, t => t[as] = func(t, _));\n    }\n\n  });\n\n  /**\n   * Generates data tuples using a provided generator function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Parameters): object} params.generator - A tuple generator\n   *   function. This function is given the operator parameters as input.\n   *   Changes to any additional parameters will not trigger re-calculation\n   *   of previously generated tuples. Only future tuples are affected.\n   * @param {number} params.size - The number of tuples to produce.\n   */\n\n  function Generate(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  vegaUtil.inherits(Generate, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.ALL),\n            gen = _.generator;\n      let data = this.value,\n          num = _.size - data.length,\n          add,\n          rem,\n          t;\n\n      if (num > 0) {\n        // need more tuples, generate and add\n        for (add = []; --num >= 0;) {\n          add.push(t = vegaDataflow.ingest(gen(_)));\n          data.push(t);\n        }\n\n        out.add = out.add.length ? out.materialize(out.ADD).add.concat(add) : add;\n      } else {\n        // need fewer tuples, remove\n        rem = data.slice(0, -num);\n        out.rem = out.rem.length ? out.materialize(out.REM).rem.concat(rem) : rem;\n        data = data.slice(-num);\n      }\n\n      out.source = this.value = data;\n      return out;\n    }\n\n  });\n\n  function ascending(a, b) {\n    return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function bisector(f) {\n    let delta = f;\n    let compare1 = f;\n    let compare2 = f;\n\n    if (f.length !== 2) {\n      delta = (d, x) => f(d) - x;\n\n      compare1 = ascending;\n\n      compare2 = (d, x) => ascending(f(d), x);\n    }\n\n    function left(a, x, lo = 0, hi = a.length) {\n      if (lo < hi) {\n        if (compare1(x, x) !== 0) return hi;\n\n        do {\n          const mid = lo + hi >>> 1;\n          if (compare2(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n        } while (lo < hi);\n      }\n\n      return lo;\n    }\n\n    function right(a, x, lo = 0, hi = a.length) {\n      if (lo < hi) {\n        if (compare1(x, x) !== 0) return hi;\n\n        do {\n          const mid = lo + hi >>> 1;\n          if (compare2(a[mid], x) <= 0) lo = mid + 1;else hi = mid;\n        } while (lo < hi);\n      }\n\n      return lo;\n    }\n\n    function center(a, x, lo = 0, hi = a.length) {\n      const i = left(a, x, lo, hi - 1);\n      return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n    }\n\n    return {\n      left,\n      center,\n      right\n    };\n  }\n\n  function* numbers(values, valueof) {\n    if (valueof === undefined) {\n      for (let value of values) {\n        if (value != null && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    } else {\n      let index = -1;\n\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    }\n  }\n\n  function compareDefined(compare = ascending) {\n    if (compare === ascending) return ascendingDefined;\n    if (typeof compare !== \"function\") throw new TypeError(\"compare is not a function\");\n    return (a, b) => {\n      const x = compare(a, b);\n      if (x || x === 0) return x;\n      return (compare(b, b) === 0) - (compare(a, a) === 0);\n    };\n  }\n  function ascendingDefined(a, b) {\n    return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);\n  }\n\n  function max(values, valueof) {\n    let max;\n\n    if (valueof === undefined) {\n      for (const value of values) {\n        if (value != null && (max < value || max === undefined && value >= value)) {\n          max = value;\n        }\n      }\n    } else {\n      let index = -1;\n\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) {\n          max = value;\n        }\n      }\n    }\n\n    return max;\n  }\n\n  function min(values, valueof) {\n    let min;\n\n    if (valueof === undefined) {\n      for (const value of values) {\n        if (value != null && (min > value || min === undefined && value >= value)) {\n          min = value;\n        }\n      }\n    } else {\n      let index = -1;\n\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (min > value || min === undefined && value >= value)) {\n          min = value;\n        }\n      }\n    }\n\n    return min;\n  }\n\n  // ISC license, Copyright 2018 Vladimir Agafonkin.\n\n  function quickselect(array, k, left = 0, right = array.length - 1, compare) {\n    compare = compare === undefined ? ascendingDefined : compareDefined(compare);\n\n    while (right > left) {\n      if (right - left > 600) {\n        const n = right - left + 1;\n        const m = k - left + 1;\n        const z = Math.log(n);\n        const s = 0.5 * Math.exp(2 * z / 3);\n        const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n        const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n        const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n        quickselect(array, k, newLeft, newRight, compare);\n      }\n\n      const t = array[k];\n      let i = left;\n      let j = right;\n      swap(array, left, k);\n      if (compare(array[right], t) > 0) swap(array, left, right);\n\n      while (i < j) {\n        swap(array, i, j), ++i, --j;\n\n        while (compare(array[i], t) < 0) ++i;\n\n        while (compare(array[j], t) > 0) --j;\n      }\n\n      if (compare(array[left], t) === 0) swap(array, left, j);else ++j, swap(array, j, right);\n      if (j <= k) left = j + 1;\n      if (k <= j) right = j - 1;\n    }\n\n    return array;\n  }\n\n  function swap(array, i, j) {\n    const t = array[i];\n    array[i] = array[j];\n    array[j] = t;\n  }\n\n  function quantile(values, p, valueof) {\n    values = Float64Array.from(numbers(values, valueof));\n    if (!(n = values.length)) return;\n    if ((p = +p) <= 0 || n < 2) return min(values);\n    if (p >= 1) return max(values);\n    var n,\n        i = (n - 1) * p,\n        i0 = Math.floor(i),\n        value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n        value1 = min(values.subarray(i0 + 1));\n    return value0 + (value1 - value0) * (i - i0);\n  }\n\n  function mean(values, valueof) {\n    let count = 0;\n    let sum = 0;\n\n    if (valueof === undefined) {\n      for (let value of values) {\n        if (value != null && (value = +value) >= value) {\n          ++count, sum += value;\n        }\n      }\n    } else {\n      let index = -1;\n\n      for (let value of values) {\n        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n          ++count, sum += value;\n        }\n      }\n    }\n\n    if (count) return sum / count;\n  }\n\n  function median(values, valueof) {\n    return quantile(values, 0.5, valueof);\n  }\n\n  function range(start, stop, step) {\n    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n    var i = -1,\n        n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n        range = new Array(n);\n\n    while (++i < n) {\n      range[i] = start + i * step;\n    }\n\n    return range;\n  }\n\n  const Methods = {\n    value: 'value',\n    median: median,\n    mean: mean,\n    min: min,\n    max: max\n  };\n  const Empty = [];\n  /**\n   * Impute missing values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to impute.\n   * @param {Array<function(object): *>} [params.groupby] - An array of\n   *   accessors to determine series within which to perform imputation.\n   * @param {function(object): *} params.key - An accessor for a key value.\n   *   Each key value should be unique within a group. New tuples will be\n   *   imputed for any key values that are not found within a group.\n   * @param {Array<*>} [params.keyvals] - Optional array of required key\n   *   values. New tuples will be imputed for any key values that are not\n   *   found within a group. In addition, these values will be automatically\n   *   augmented with the key values observed in the input data.\n   * @param {string} [method='value'] - The imputation method to use. One of\n   *   'value', 'mean', 'median', 'max', 'min'.\n   * @param {*} [value=0] - The constant value to use for imputation\n   *   when using method 'value'.\n   */\n\n  function Impute(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  Impute.Definition = {\n    'type': 'Impute',\n    'metadata': {\n      'changes': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'key',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'keyvals',\n      'array': true\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'method',\n      'type': 'enum',\n      'default': 'value',\n      'values': ['value', 'mean', 'median', 'max', 'min']\n    }, {\n      'name': 'value',\n      'default': 0\n    }]\n  };\n\n  function getValue(_) {\n    var m = _.method || Methods.value,\n        v;\n\n    if (Methods[m] == null) {\n      vegaUtil.error('Unrecognized imputation method: ' + m);\n    } else if (m === Methods.value) {\n      v = _.value !== undefined ? _.value : 0;\n      return () => v;\n    } else {\n      return Methods[m];\n    }\n  }\n\n  function getField(_) {\n    const f = _.field;\n    return t => t ? f(t) : NaN;\n  }\n\n  vegaUtil.inherits(Impute, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      var out = pulse.fork(pulse.ALL),\n          impute = getValue(_),\n          field = getField(_),\n          fName = vegaUtil.accessorName(_.field),\n          kName = vegaUtil.accessorName(_.key),\n          gNames = (_.groupby || []).map(vegaUtil.accessorName),\n          groups = partition(pulse.source, _.groupby, _.key, _.keyvals),\n          curr = [],\n          prev = this.value,\n          m = groups.domain.length,\n          group,\n          value,\n          gVals,\n          kVal,\n          g,\n          i,\n          j,\n          l,\n          n,\n          t;\n\n      for (g = 0, l = groups.length; g < l; ++g) {\n        group = groups[g];\n        gVals = group.values;\n        value = NaN; // add tuples for missing values\n\n        for (j = 0; j < m; ++j) {\n          if (group[j] != null) continue;\n          kVal = groups.domain[j];\n          t = {\n            _impute: true\n          };\n\n          for (i = 0, n = gVals.length; i < n; ++i) t[gNames[i]] = gVals[i];\n\n          t[kName] = kVal;\n          t[fName] = Number.isNaN(value) ? value = impute(group, field) : value;\n          curr.push(vegaDataflow.ingest(t));\n        }\n      } // update pulse with imputed tuples\n\n\n      if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);\n      if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);\n      this.value = curr;\n      return out;\n    }\n\n  });\n\n  function partition(data, groupby, key, keyvals) {\n    var get = f => f(t),\n        groups = [],\n        domain = keyvals ? keyvals.slice() : [],\n        kMap = {},\n        gMap = {},\n        gVals,\n        gKey,\n        group,\n        i,\n        j,\n        k,\n        n,\n        t;\n\n    domain.forEach((k, i) => kMap[k] = i + 1);\n\n    for (i = 0, n = data.length; i < n; ++i) {\n      t = data[i];\n      k = key(t);\n      j = kMap[k] || (kMap[k] = domain.push(k));\n      gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';\n\n      if (!(group = gMap[gKey])) {\n        group = gMap[gKey] = [];\n        groups.push(group);\n        group.values = gVals;\n      }\n\n      group[j - 1] = t;\n    }\n\n    groups.domain = domain;\n    return groups;\n  }\n\n  /**\n   * Extend input tuples with aggregate values.\n   * Calcuates aggregate values and joins them with the input stream.\n   * @constructor\n   */\n\n  function JoinAggregate(params) {\n    Aggregate.call(this, params);\n  }\n  JoinAggregate.Definition = {\n    'type': 'JoinAggregate',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'ops',\n      'type': 'enum',\n      'array': true,\n      'values': ValidAggregateOps\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'key',\n      'type': 'field'\n    }]\n  };\n  vegaUtil.inherits(JoinAggregate, Aggregate, {\n    transform(_, pulse) {\n      const aggr = this,\n            mod = _.modified();\n\n      let cells; // process all input tuples to calculate aggregates\n\n      if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n        cells = aggr.value = mod ? aggr.init(_) : {};\n        pulse.visit(pulse.SOURCE, t => aggr.add(t));\n      } else {\n        cells = aggr.value = aggr.value || this.init(_);\n        pulse.visit(pulse.REM, t => aggr.rem(t));\n        pulse.visit(pulse.ADD, t => aggr.add(t));\n      } // update aggregation cells\n\n\n      aggr.changes(); // write aggregate values to input tuples\n\n      pulse.visit(pulse.SOURCE, t => {\n        vegaUtil.extend(t, cells[aggr.cellkey(t)].tuple);\n      });\n      return pulse.reflow(mod).modifies(this._outputs);\n    },\n\n    changes() {\n      const adds = this._adds,\n            mods = this._mods;\n      let i, n;\n\n      for (i = 0, n = this._alen; i < n; ++i) {\n        this.celltuple(adds[i]);\n        adds[i] = null; // for garbage collection\n      }\n\n      for (i = 0, n = this._mlen; i < n; ++i) {\n        this.celltuple(mods[i]);\n        mods[i] = null; // for garbage collection\n      }\n\n      this._alen = this._mlen = 0; // reset list of active cells\n    }\n\n  });\n\n  /**\n   * Compute kernel density estimates (KDE) for one or more data groups.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {function(object): *} params.field - An accessor for the data field\n   *   to estimate.\n   * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.\n   *   If zero or unspecified, the bandwidth is automatically determined.\n   * @param {boolean} [params.counts=false] - A boolean flag indicating if the\n   *   output values should be probability estimates (false, default) or\n   *   smoothed counts (true).\n   * @param {string} [params.cumulative=false] - A boolean flag indicating if a\n   *   density (false) or cumulative distribution (true) should be generated.\n   * @param {Array<number>} [params.extent] - The domain extent over which to\n   *   plot the density. If unspecified, the [min, max] data extent is used.\n   * @param {string} [params.resolve='independent'] - Indicates how parameters for\n   *   multiple densities should be resolved. If \"independent\" (the default), each\n   *   density may have its own domain extent and dynamic number of curve sample\n   *   steps. If \"shared\", the KDE transform will ensure that all densities are\n   *   defined over a shared domain and curve steps, enabling stacking.\n   * @param {number} [params.minsteps=25] - The minimum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.steps] - The exact number of curve samples for\n   *   plotting the density. If specified, overrides both minsteps and maxsteps\n   *   to set an exact number of uniform samples. Useful in conjunction with\n   *   a fixed extent to ensure consistent sample points for stacked densities.\n   */\n\n  function KDE(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  KDE.Definition = {\n    'type': 'KDE',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'cumulative',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'counts',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'bandwidth',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'extent',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'resolve',\n      'type': 'enum',\n      'values': ['shared', 'independent'],\n      'default': 'independent'\n    }, {\n      'name': 'steps',\n      'type': 'number'\n    }, {\n      'name': 'minsteps',\n      'type': 'number',\n      'default': 25\n    }, {\n      'name': 'maxsteps',\n      'type': 'number',\n      'default': 200\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'default': ['value', 'density']\n    }]\n  };\n  vegaUtil.inherits(KDE, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n      if (!this.value || pulse.changed() || _.modified()) {\n        const source = pulse.materialize(pulse.SOURCE).source,\n              groups = partition$1(source, _.groupby, _.field),\n              names = (_.groupby || []).map(vegaUtil.accessorName),\n              bandwidth = _.bandwidth,\n              method = _.cumulative ? 'cdf' : 'pdf',\n              as = _.as || ['value', 'density'],\n              values = [];\n        let domain = _.extent,\n            minsteps = _.steps || _.minsteps || 25,\n            maxsteps = _.steps || _.maxsteps || 200;\n\n        if (method !== 'pdf' && method !== 'cdf') {\n          vegaUtil.error('Invalid density method: ' + method);\n        }\n\n        if (_.resolve === 'shared') {\n          if (!domain) domain = vegaUtil.extent(source, _.field);\n          minsteps = maxsteps = _.steps || maxsteps;\n        }\n\n        groups.forEach(g => {\n          const density = vegaStatistics.randomKDE(g, bandwidth)[method],\n                scale = _.counts ? g.length : 1,\n                local = domain || vegaUtil.extent(g);\n          vegaStatistics.sampleCurve(density, local, minsteps, maxsteps).forEach(v => {\n            const t = {};\n\n            for (let i = 0; i < names.length; ++i) {\n              t[names[i]] = g.dims[i];\n            }\n\n            t[as[0]] = v[0];\n            t[as[1]] = v[1] * scale;\n            values.push(vegaDataflow.ingest(t));\n          });\n        });\n        if (this.value) out.rem = this.value;\n        this.value = out.add = out.source = values;\n      }\n\n      return out;\n    }\n\n  });\n\n  /**\n   * Generates a key function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<string>} params.fields - The field name(s) for the key function.\n   * @param {boolean} params.flat - A boolean flag indicating if the field names\n   *  should be treated as flat property names, side-stepping nested field\n   *  lookups normally indicated by dot or bracket notation.\n   */\n\n  function Key(params) {\n    vegaDataflow.Operator.call(this, null, update$2, params);\n  }\n  vegaUtil.inherits(Key, vegaDataflow.Operator);\n\n  function update$2(_) {\n    return this.value && !_.modified() ? this.value : vegaUtil.key(_.fields, _.flat);\n  }\n\n  /**\n   * Load and parse data from an external source. Marshalls parameter\n   * values and then invokes the Dataflow request method.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.url - The URL to load from.\n   * @param {object} params.format - The data format options.\n   */\n\n  function Load(params) {\n    vegaDataflow.Transform.call(this, [], params);\n    this._pending = null;\n  }\n  vegaUtil.inherits(Load, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const df = pulse.dataflow;\n\n      if (this._pending) {\n        // update state and return pulse\n        return output(this, pulse, this._pending);\n      }\n\n      if (stop(_)) return pulse.StopPropagation;\n\n      if (_.values) {\n        // parse and ingest values, return output pulse\n        return output(this, pulse, df.parse(_.values, _.format));\n      } else if (_.async) {\n        // return promise for non-blocking async loading\n        const p = df.request(_.url, _.format).then(res => {\n          this._pending = vegaUtil.array(res.data);\n          return df => df.touch(this);\n        });\n        return {\n          async: p\n        };\n      } else {\n        // return promise for synchronous loading\n        return df.request(_.url, _.format).then(res => output(this, pulse, vegaUtil.array(res.data)));\n      }\n    }\n\n  });\n\n  function stop(_) {\n    return _.modified('async') && !(_.modified('values') || _.modified('url') || _.modified('format'));\n  }\n\n  function output(op, pulse, data) {\n    data.forEach(vegaDataflow.ingest);\n    const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);\n    out.rem = op.value;\n    op.value = out.source = out.add = data;\n    op._pending = null;\n    if (out.rem.length) out.clean(true);\n    return out;\n  }\n\n  /**\n   * Extend tuples by joining them with values from a lookup table.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Map} params.index - The lookup table map.\n   * @param {Array<function(object): *} params.fields - The fields to lookup.\n   * @param {Array<string>} params.as - Output field names for each lookup value.\n   * @param {*} [params.default] - A default value to use if lookup fails.\n   */\n\n  function Lookup(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n  }\n  Lookup.Definition = {\n    'type': 'Lookup',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'index',\n      'type': 'index',\n      'params': [{\n        'name': 'from',\n        'type': 'data',\n        'required': true\n      }, {\n        'name': 'key',\n        'type': 'field',\n        'required': true\n      }]\n    }, {\n      'name': 'values',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true\n    }, {\n      'name': 'default',\n      'default': null\n    }]\n  };\n  vegaUtil.inherits(Lookup, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const keys = _.fields,\n            index = _.index,\n            values = _.values,\n            defaultValue = _.default == null ? null : _.default,\n            reset = _.modified(),\n            n = keys.length;\n\n      let flag = reset ? pulse.SOURCE : pulse.ADD,\n          out = pulse,\n          as = _.as,\n          set,\n          m,\n          mods;\n\n      if (values) {\n        m = values.length;\n\n        if (n > 1 && !as) {\n          vegaUtil.error('Multi-field lookup requires explicit \"as\" parameter.');\n        }\n\n        if (as && as.length !== n * m) {\n          vegaUtil.error('The \"as\" parameter has too few output field names.');\n        }\n\n        as = as || values.map(vegaUtil.accessorName);\n\n        set = function (t) {\n          for (var i = 0, k = 0, j, v; i < n; ++i) {\n            v = index.get(keys[i](t));\n            if (v == null) for (j = 0; j < m; ++j, ++k) t[as[k]] = defaultValue;else for (j = 0; j < m; ++j, ++k) t[as[k]] = values[j](v);\n          }\n        };\n      } else {\n        if (!as) {\n          vegaUtil.error('Missing output field names.');\n        }\n\n        set = function (t) {\n          for (var i = 0, v; i < n; ++i) {\n            v = index.get(keys[i](t));\n            t[as[i]] = v == null ? defaultValue : v;\n          }\n        };\n      }\n\n      if (reset) {\n        out = pulse.reflow(true);\n      } else {\n        mods = keys.some(k => pulse.modified(k.fields));\n        flag |= mods ? pulse.MOD : 0;\n      }\n\n      pulse.visit(flag, set);\n      return out.modifies(as);\n    }\n\n  });\n\n  /**\n   * Computes global min/max extents over a collection of extents.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<Array<number>>} params.extents - The input extents.\n   */\n\n  function MultiExtent(params) {\n    vegaDataflow.Operator.call(this, null, update$1, params);\n  }\n  vegaUtil.inherits(MultiExtent, vegaDataflow.Operator);\n\n  function update$1(_) {\n    if (this.value && !_.modified()) {\n      return this.value;\n    }\n\n    const ext = _.extents,\n          n = ext.length;\n    let min = +Infinity,\n        max = -Infinity,\n        i,\n        e;\n\n    for (i = 0; i < n; ++i) {\n      e = ext[i];\n      if (e[0] < min) min = e[0];\n      if (e[1] > max) max = e[1];\n    }\n\n    return [min, max];\n  }\n\n  /**\n   * Merge a collection of value arrays.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<Array<*>>} params.values - The input value arrrays.\n   */\n\n  function MultiValues(params) {\n    vegaDataflow.Operator.call(this, null, update, params);\n  }\n  vegaUtil.inherits(MultiValues, vegaDataflow.Operator);\n\n  function update(_) {\n    return this.value && !_.modified() ? this.value : _.values.reduce((data, _) => data.concat(_), []);\n  }\n\n  /**\n   * Operator whose value is simply its parameter hash. This operator is\n   * useful for enabling reactive updates to values of nested objects.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n\n  function Params(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  vegaUtil.inherits(Params, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.modified(_.modified());\n      this.value = _;\n      return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples\n    }\n\n  });\n\n  /**\n   * Aggregate and pivot selected field values to become new fields.\n   * This operator is useful to construction cross-tabulations.\n   * @constructor\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *  to groupby. These fields act just like groupby fields of an Aggregate transform.\n   * @param {function(object): *} params.field - The field to pivot on. The unique\n   *  values of this field become new field names in the output stream.\n   * @param {function(object): *} params.value - The field to populate pivoted fields.\n   *  The aggregate values of this field become the values of the new pivoted fields.\n   * @param {string} [params.op] - The aggregation operation for the value field,\n   *  applied per cell in the output stream. The default is \"sum\".\n   * @param {number} [params.limit] - An optional parameter indicating the maximum\n   *  number of pivoted fields to generate. The pivoted field names are sorted in\n   *  ascending order prior to enforcing the limit.\n   */\n\n  function Pivot(params) {\n    Aggregate.call(this, params);\n  }\n  Pivot.Definition = {\n    'type': 'Pivot',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'value',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'op',\n      'type': 'enum',\n      'values': ValidAggregateOps,\n      'default': 'sum'\n    }, {\n      'name': 'limit',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'key',\n      'type': 'field'\n    }]\n  };\n  vegaUtil.inherits(Pivot, Aggregate, {\n    _transform: Aggregate.prototype.transform,\n\n    transform(_, pulse) {\n      return this._transform(aggregateParams(_, pulse), pulse);\n    }\n\n  }); // Shoehorn a pivot transform into an aggregate transform!\n  // First collect all unique pivot field values.\n  // Then generate aggregate fields for each output pivot field.\n\n  function aggregateParams(_, pulse) {\n    const key = _.field,\n          value = _.value,\n          op = (_.op === 'count' ? '__count__' : _.op) || 'sum',\n          fields = vegaUtil.accessorFields(key).concat(vegaUtil.accessorFields(value)),\n          keys = pivotKeys(key, _.limit || 0, pulse); // if data stream content changes, pivot fields may change\n    // flag parameter modification to ensure re-initialization\n\n    if (pulse.changed()) _.set('__pivot__', null, null, true);\n    return {\n      key: _.key,\n      groupby: _.groupby,\n      ops: keys.map(() => op),\n      fields: keys.map(k => get(k, key, value, fields)),\n      as: keys.map(k => k + ''),\n      modified: _.modified.bind(_)\n    };\n  } // Generate aggregate field accessor.\n  // Output NaN for non-existent values; aggregator will ignore!\n\n\n  function get(k, key, value, fields) {\n    return vegaUtil.accessor(d => key(d) === k ? value(d) : NaN, fields, k + '');\n  } // Collect (and optionally limit) all unique pivot values.\n\n\n  function pivotKeys(key, limit, pulse) {\n    const map = {},\n          list = [];\n    pulse.visit(pulse.SOURCE, t => {\n      const k = key(t);\n\n      if (!map[k]) {\n        map[k] = 1;\n        list.push(k);\n      }\n    });\n    list.sort(vegaUtil.ascending);\n    return limit ? list.slice(0, limit) : list;\n  }\n\n  /**\n   * Partitions pre-faceted data into tuple subflows.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Dataflow, string): Operator} params.subflow - A function\n   *   that generates a subflow of operators and returns its root operator.\n   * @param {function(object): Array<object>} params.field - The field\n   *   accessor for an array of subflow tuple objects.\n   */\n\n  function PreFacet(params) {\n    Facet.call(this, params);\n  }\n  vegaUtil.inherits(PreFacet, Facet, {\n    transform(_, pulse) {\n      const flow = _.subflow,\n            field = _.field,\n            subflow = t => this.subflow(vegaDataflow.tupleid(t), flow, pulse, t);\n\n      if (_.modified('field') || field && pulse.modified(vegaUtil.accessorFields(field))) {\n        vegaUtil.error('PreFacet does not support field modification.');\n      }\n\n      this.initTargets(); // reset list of active subflows\n\n      if (field) {\n        pulse.visit(pulse.MOD, t => {\n          const sf = subflow(t);\n          field(t).forEach(_ => sf.mod(_));\n        });\n        pulse.visit(pulse.ADD, t => {\n          const sf = subflow(t);\n          field(t).forEach(_ => sf.add(vegaDataflow.ingest(_)));\n        });\n        pulse.visit(pulse.REM, t => {\n          const sf = subflow(t);\n          field(t).forEach(_ => sf.rem(_));\n        });\n      } else {\n        pulse.visit(pulse.MOD, t => subflow(t).mod(t));\n        pulse.visit(pulse.ADD, t => subflow(t).add(t));\n        pulse.visit(pulse.REM, t => subflow(t).rem(t));\n      }\n\n      if (pulse.clean()) {\n        pulse.runAfter(() => this.clean());\n      }\n\n      return pulse;\n    }\n\n  });\n\n  /**\n   * Performs a relational projection, copying selected fields from source\n   * tuples to a new set of derived tuples.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *} params.fields - The fields to project,\n   *   as an array of field accessors. If unspecified, all fields will be\n   *   copied with names unchanged.\n   * @param {Array<string>} [params.as] - Output field names for each projected\n   *   field. Any unspecified fields will use the field name provided by\n   *   the field accessor.\n   */\n\n  function Project(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Project.Definition = {\n    'type': 'Project',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }]\n  };\n  vegaUtil.inherits(Project, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            fields = _.fields,\n            as = fieldNames(_.fields, _.as || []),\n            derive = fields ? (s, t) => project(s, t, fields, as) : vegaDataflow.rederive;\n      let lut;\n\n      if (this.value) {\n        lut = this.value;\n      } else {\n        pulse = pulse.addAll();\n        lut = this.value = {};\n      }\n\n      pulse.visit(pulse.REM, t => {\n        const id = vegaDataflow.tupleid(t);\n        out.rem.push(lut[id]);\n        lut[id] = null;\n      });\n      pulse.visit(pulse.ADD, t => {\n        const dt = derive(t, vegaDataflow.ingest({}));\n        lut[vegaDataflow.tupleid(t)] = dt;\n        out.add.push(dt);\n      });\n      pulse.visit(pulse.MOD, t => {\n        out.mod.push(derive(t, lut[vegaDataflow.tupleid(t)]));\n      });\n      return out;\n    }\n\n  });\n\n  function project(s, t, fields, as) {\n    for (let i = 0, n = fields.length; i < n; ++i) {\n      t[as[i]] = fields[i](s);\n    }\n\n    return t;\n  }\n\n  /**\n   * Proxy the value of another operator as a pure signal value.\n   * Ensures no tuples are propagated.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {*} params.value - The value to proxy, becomes the value of this operator.\n   */\n\n  function Proxy(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  vegaUtil.inherits(Proxy, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.value = _.value;\n      return _.modified('value') ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;\n    }\n\n  });\n\n  /**\n   * Generates sample quantile values from an input data stream.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - An accessor for the data field\n   *   over which to calculate quantile values.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {Array<number>} [params.probs] - An array of probabilities in\n   *   the range (0, 1) for which to compute quantile values. If not specified,\n   *   the *step* parameter will be used.\n   * @param {Array<number>} [params.step=0.01] - A probability step size for\n   *   sampling quantile values. All values from one-half the step size up to\n   *   1 (exclusive) will be sampled. This parameter is only used if the\n   *   *quantiles* parameter is not provided.\n   */\n\n  function Quantile(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Quantile.Definition = {\n    'type': 'Quantile',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'probs',\n      'type': 'number',\n      'array': true\n    }, {\n      'name': 'step',\n      'type': 'number',\n      'default': 0.01\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'default': ['prob', 'value']\n    }]\n  };\n  const EPSILON = 1e-14;\n  vegaUtil.inherits(Quantile, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n            as = _.as || ['prob', 'value'];\n\n      if (this.value && !_.modified() && !pulse.changed()) {\n        out.source = this.value;\n        return out;\n      }\n\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition$1(source, _.groupby, _.field),\n            names = (_.groupby || []).map(vegaUtil.accessorName),\n            values = [],\n            step = _.step || 0.01,\n            p = _.probs || range(step / 2, 1 - EPSILON, step),\n            n = p.length;\n      groups.forEach(g => {\n        const q = vegaStatistics.quantiles(g, p);\n\n        for (let i = 0; i < n; ++i) {\n          const t = {};\n\n          for (let i = 0; i < names.length; ++i) {\n            t[names[i]] = g.dims[i];\n          }\n\n          t[as[0]] = p[i];\n          t[as[1]] = q[i];\n          values.push(vegaDataflow.ingest(t));\n        }\n      });\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n      return out;\n    }\n\n  });\n\n  /**\n   * Relays a data stream between data processing pipelines.\n   * If the derive parameter is set, this transform will create derived\n   * copies of observed tuples. This provides derived data streams in which\n   * modifications to the tuples do not pollute an upstream data source.\n   * @param {object} params - The parameters for this operator.\n   * @param {number} [params.derive=false] - Boolean flag indicating if\n   *   the transform should make derived copies of incoming tuples.\n   * @constructor\n   */\n\n  function Relay(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  vegaUtil.inherits(Relay, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      let out, lut;\n\n      if (this.value) {\n        lut = this.value;\n      } else {\n        out = pulse = pulse.addAll();\n        lut = this.value = {};\n      }\n\n      if (_.derive) {\n        out = pulse.fork(pulse.NO_SOURCE);\n        pulse.visit(pulse.REM, t => {\n          const id = vegaDataflow.tupleid(t);\n          out.rem.push(lut[id]);\n          lut[id] = null;\n        });\n        pulse.visit(pulse.ADD, t => {\n          const dt = vegaDataflow.derive(t);\n          lut[vegaDataflow.tupleid(t)] = dt;\n          out.add.push(dt);\n        });\n        pulse.visit(pulse.MOD, t => {\n          const dt = lut[vegaDataflow.tupleid(t)];\n\n          for (const k in t) {\n            dt[k] = t[k]; // down stream writes may overwrite re-derived tuples\n            // conservatively mark all source fields as modified\n\n            out.modifies(k);\n          }\n\n          out.mod.push(dt);\n        });\n      }\n\n      return out;\n    }\n\n  });\n\n  /**\n   * Samples tuples passing through this operator.\n   * Uses reservoir sampling to maintain a representative sample.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {number} [params.size=1000] - The maximum number of samples.\n   */\n\n  function Sample(params) {\n    vegaDataflow.Transform.call(this, [], params);\n    this.count = 0;\n  }\n  Sample.Definition = {\n    'type': 'Sample',\n    'metadata': {},\n    'params': [{\n      'name': 'size',\n      'type': 'number',\n      'default': 1000\n    }]\n  };\n  vegaUtil.inherits(Sample, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            mod = _.modified('size'),\n            num = _.size,\n            map = this.value.reduce((m, t) => (m[vegaDataflow.tupleid(t)] = 1, m), {});\n\n      let res = this.value,\n          cnt = this.count,\n          cap = 0; // sample reservoir update function\n\n      function update(t) {\n        let p, idx;\n\n        if (res.length < num) {\n          res.push(t);\n        } else {\n          idx = ~~((cnt + 1) * vegaStatistics.random());\n\n          if (idx < res.length && idx >= cap) {\n            p = res[idx];\n            if (map[vegaDataflow.tupleid(p)]) out.rem.push(p); // eviction\n\n            res[idx] = t;\n          }\n        }\n\n        ++cnt;\n      }\n\n      if (pulse.rem.length) {\n        // find all tuples that should be removed, add to output\n        pulse.visit(pulse.REM, t => {\n          const id = vegaDataflow.tupleid(t);\n\n          if (map[id]) {\n            map[id] = -1;\n            out.rem.push(t);\n          }\n\n          --cnt;\n        }); // filter removed tuples out of the sample reservoir\n\n        res = res.filter(t => map[vegaDataflow.tupleid(t)] !== -1);\n      }\n\n      if ((pulse.rem.length || mod) && res.length < num && pulse.source) {\n        // replenish sample if backing data source is available\n        cap = cnt = res.length;\n        pulse.visit(pulse.SOURCE, t => {\n          // update, but skip previously sampled tuples\n          if (!map[vegaDataflow.tupleid(t)]) update(t);\n        });\n        cap = -1;\n      }\n\n      if (mod && res.length > num) {\n        const n = res.length - num;\n\n        for (let i = 0; i < n; ++i) {\n          map[vegaDataflow.tupleid(res[i])] = -1;\n          out.rem.push(res[i]);\n        }\n\n        res = res.slice(n);\n      }\n\n      if (pulse.mod.length) {\n        // propagate modified tuples in the sample reservoir\n        pulse.visit(pulse.MOD, t => {\n          if (map[vegaDataflow.tupleid(t)]) out.mod.push(t);\n        });\n      }\n\n      if (pulse.add.length) {\n        // update sample reservoir\n        pulse.visit(pulse.ADD, update);\n      }\n\n      if (pulse.add.length || cap < 0) {\n        // output newly added tuples\n        out.add = res.filter(t => !map[vegaDataflow.tupleid(t)]);\n      }\n\n      this.count = cnt;\n      this.value = out.source = res;\n      return out;\n    }\n\n  });\n\n  /**\n   * Generates data tuples for a specified sequence range of numbers.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {number} params.start - The first number in the sequence.\n   * @param {number} params.stop - The last number (exclusive) in the sequence.\n   * @param {number} [params.step=1] - The step size between numbers in the sequence.\n   */\n\n  function Sequence(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Sequence.Definition = {\n    'type': 'Sequence',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'start',\n      'type': 'number',\n      'required': true\n    }, {\n      'name': 'stop',\n      'type': 'number',\n      'required': true\n    }, {\n      'name': 'step',\n      'type': 'number',\n      'default': 1\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'default': 'data'\n    }]\n  };\n  vegaUtil.inherits(Sequence, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (this.value && !_.modified()) return;\n      const out = pulse.materialize().fork(pulse.MOD),\n            as = _.as || 'data';\n      out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;\n      this.value = range(_.start, _.stop, _.step || 1).map(v => {\n        const t = {};\n        t[as] = v;\n        return vegaDataflow.ingest(t);\n      });\n      out.add = pulse.add.concat(this.value);\n      return out;\n    }\n\n  });\n\n  /**\n   * Propagates a new pulse without any tuples so long as the input\n   * pulse contains some added, removed or modified tuples.\n   * @param {object} params - The parameters for this operator.\n   * @constructor\n   */\n\n  function Sieve(params) {\n    vegaDataflow.Transform.call(this, null, params);\n    this.modified(true); // always treat as modified\n  }\n  vegaUtil.inherits(Sieve, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.value = pulse.source;\n      return pulse.changed() ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;\n    }\n\n  });\n\n  /**\n   * Discretize dates to specific time units.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The data field containing date/time values.\n   */\n\n  function TimeUnit(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  const OUTPUT = ['unit0', 'unit1'];\n  TimeUnit.Definition = {\n    'type': 'TimeUnit',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'interval',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'units',\n      'type': 'enum',\n      'values': vegaTime.TIME_UNITS,\n      'array': true\n    }, {\n      'name': 'step',\n      'type': 'number',\n      'default': 1\n    }, {\n      'name': 'maxbins',\n      'type': 'number',\n      'default': 40\n    }, {\n      'name': 'extent',\n      'type': 'date',\n      'array': true\n    }, {\n      'name': 'timezone',\n      'type': 'enum',\n      'default': 'local',\n      'values': ['local', 'utc']\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': OUTPUT\n    }]\n  };\n  vegaUtil.inherits(TimeUnit, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const field = _.field,\n            band = _.interval !== false,\n            utc = _.timezone === 'utc',\n            floor = this._floor(_, pulse),\n            offset = (utc ? vegaTime.utcInterval : vegaTime.timeInterval)(floor.unit).offset,\n            as = _.as || OUTPUT,\n            u0 = as[0],\n            u1 = as[1],\n            step = floor.step;\n\n      let min = floor.start || Infinity,\n          max = floor.stop || -Infinity,\n          flag = pulse.ADD;\n\n      if (_.modified() || pulse.changed(pulse.REM) || pulse.modified(vegaUtil.accessorFields(field))) {\n        pulse = pulse.reflow(true);\n        flag = pulse.SOURCE;\n        min = Infinity;\n        max = -Infinity;\n      }\n\n      pulse.visit(flag, t => {\n        const v = field(t);\n        let a, b;\n\n        if (v == null) {\n          t[u0] = null;\n          if (band) t[u1] = null;\n        } else {\n          t[u0] = a = b = floor(v);\n          if (band) t[u1] = b = offset(a, step);\n          if (a < min) min = a;\n          if (b > max) max = b;\n        }\n      });\n      floor.start = min;\n      floor.stop = max;\n      return pulse.modifies(band ? as : u0);\n    },\n\n    _floor(_, pulse) {\n      const utc = _.timezone === 'utc'; // get parameters\n\n      const {\n        units,\n        step\n      } = _.units ? {\n        units: _.units,\n        step: _.step || 1\n      } : vegaTime.timeBin({\n        extent: _.extent || vegaUtil.extent(pulse.materialize(pulse.SOURCE).source, _.field),\n        maxbins: _.maxbins\n      }); // check / standardize time units\n\n      const tunits = vegaTime.timeUnits(units),\n            prev = this.value || {},\n            floor = (utc ? vegaTime.utcFloor : vegaTime.timeFloor)(tunits, step);\n      floor.unit = vegaUtil.peek(tunits);\n      floor.units = tunits;\n      floor.step = step;\n      floor.start = prev.start;\n      floor.stop = prev.stop;\n      return this.value = floor;\n    }\n\n  });\n\n  /**\n   * An index that maps from unique, string-coerced, field values to tuples.\n   * Assumes that the field serves as a unique key with no duplicate values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The field accessor to index.\n   */\n\n  function TupleIndex(params) {\n    vegaDataflow.Transform.call(this, vegaUtil.fastmap(), params);\n  }\n  vegaUtil.inherits(TupleIndex, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const df = pulse.dataflow,\n            field = _.field,\n            index = this.value,\n            set = t => index.set(field(t), t);\n\n      let mod = true;\n\n      if (_.modified('field') || pulse.modified(field.fields)) {\n        index.clear();\n        pulse.visit(pulse.SOURCE, set);\n      } else if (pulse.changed()) {\n        pulse.visit(pulse.REM, t => index.delete(field(t)));\n        pulse.visit(pulse.ADD, set);\n      } else {\n        mod = false;\n      }\n\n      this.modified(mod);\n      if (index.empty > df.cleanThreshold) df.runAfter(index.clean);\n      return pulse.fork();\n    }\n\n  });\n\n  /**\n   * Extracts an array of values. Assumes the source data has already been\n   * reduced as needed (e.g., by an upstream Aggregate transform).\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The domain field to extract.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for sorting the values. The comparator will be\n   *   applied to backing tuples prior to value extraction.\n   */\n\n  function Values(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  vegaUtil.inherits(Values, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const run = !this.value || _.modified('field') || _.modified('sort') || pulse.changed() || _.sort && pulse.modified(_.sort.fields);\n\n      if (run) {\n        this.value = (_.sort ? pulse.source.slice().sort(vegaDataflow.stableCompare(_.sort)) : pulse.source).map(_.field);\n      }\n    }\n\n  });\n\n  function WindowOp(op, field, param, as) {\n    const fn = WindowOps[op](field, param);\n    return {\n      init: fn.init || vegaUtil.zero,\n      update: function (w, t) {\n        t[as] = fn.next(w);\n      }\n    };\n  }\n  const WindowOps = {\n    row_number: function () {\n      return {\n        next: w => w.index + 1\n      };\n    },\n    rank: function () {\n      let rank;\n      return {\n        init: () => rank = 1,\n        next: w => {\n          const i = w.index,\n                data = w.data;\n          return i && w.compare(data[i - 1], data[i]) ? rank = i + 1 : rank;\n        }\n      };\n    },\n    dense_rank: function () {\n      let drank;\n      return {\n        init: () => drank = 1,\n        next: w => {\n          const i = w.index,\n                d = w.data;\n          return i && w.compare(d[i - 1], d[i]) ? ++drank : drank;\n        }\n      };\n    },\n    percent_rank: function () {\n      const rank = WindowOps.rank(),\n            next = rank.next;\n      return {\n        init: rank.init,\n        next: w => (next(w) - 1) / (w.data.length - 1)\n      };\n    },\n    cume_dist: function () {\n      let cume;\n      return {\n        init: () => cume = 0,\n        next: w => {\n          const d = w.data,\n                c = w.compare;\n          let i = w.index;\n\n          if (cume < i) {\n            while (i + 1 < d.length && !c(d[i], d[i + 1])) ++i;\n\n            cume = i;\n          }\n\n          return (1 + cume) / d.length;\n        }\n      };\n    },\n    ntile: function (field, num) {\n      num = +num;\n      if (!(num > 0)) vegaUtil.error('ntile num must be greater than zero.');\n      const cume = WindowOps.cume_dist(),\n            next = cume.next;\n      return {\n        init: cume.init,\n        next: w => Math.ceil(num * next(w))\n      };\n    },\n    lag: function (field, offset) {\n      offset = +offset || 1;\n      return {\n        next: w => {\n          const i = w.index - offset;\n          return i >= 0 ? field(w.data[i]) : null;\n        }\n      };\n    },\n    lead: function (field, offset) {\n      offset = +offset || 1;\n      return {\n        next: w => {\n          const i = w.index + offset,\n                d = w.data;\n          return i < d.length ? field(d[i]) : null;\n        }\n      };\n    },\n    first_value: function (field) {\n      return {\n        next: w => field(w.data[w.i0])\n      };\n    },\n    last_value: function (field) {\n      return {\n        next: w => field(w.data[w.i1 - 1])\n      };\n    },\n    nth_value: function (field, nth) {\n      nth = +nth;\n      if (!(nth > 0)) vegaUtil.error('nth_value nth must be greater than zero.');\n      return {\n        next: w => {\n          const i = w.i0 + (nth - 1);\n          return i < w.i1 ? field(w.data[i]) : null;\n        }\n      };\n    },\n    prev_value: function (field) {\n      let prev;\n      return {\n        init: () => prev = null,\n        next: w => {\n          const v = field(w.data[w.index]);\n          return v != null ? prev = v : prev;\n        }\n      };\n    },\n    next_value: function (field) {\n      let v, i;\n      return {\n        init: () => (v = null, i = -1),\n        next: w => {\n          const d = w.data;\n          return w.index <= i ? v : (i = find(field, d, w.index)) < 0 ? (i = d.length, v = null) : v = field(d[i]);\n        }\n      };\n    }\n  };\n\n  function find(field, data, index) {\n    for (let n = data.length; index < n; ++index) {\n      const v = field(data[index]);\n      if (v != null) return index;\n    }\n\n    return -1;\n  }\n\n  const ValidWindowOps = Object.keys(WindowOps);\n\n  function WindowState(_) {\n    const ops = vegaUtil.array(_.ops),\n          fields = vegaUtil.array(_.fields),\n          params = vegaUtil.array(_.params),\n          as = vegaUtil.array(_.as),\n          outputs = this.outputs = [],\n          windows = this.windows = [],\n          inputs = {},\n          map = {},\n          counts = [],\n          measures = [];\n    let countOnly = true;\n\n    function visitInputs(f) {\n      vegaUtil.array(vegaUtil.accessorFields(f)).forEach(_ => inputs[_] = 1);\n    }\n\n    visitInputs(_.sort);\n    ops.forEach((op, i) => {\n      const field = fields[i],\n            mname = vegaUtil.accessorName(field),\n            name = measureName(op, mname, as[i]);\n      visitInputs(field);\n      outputs.push(name); // Window operation\n\n      if (vegaUtil.hasOwnProperty(WindowOps, op)) {\n        windows.push(WindowOp(op, fields[i], params[i], name));\n      } // Aggregate operation\n      else {\n        if (field == null && op !== 'count') {\n          vegaUtil.error('Null aggregate field specified.');\n        }\n\n        if (op === 'count') {\n          counts.push(name);\n          return;\n        }\n\n        countOnly = false;\n        let m = map[mname];\n\n        if (!m) {\n          m = map[mname] = [];\n          m.field = field;\n          measures.push(m);\n        }\n\n        m.push(createMeasure(op, name));\n      }\n    });\n\n    if (counts.length || measures.length) {\n      this.cell = cell(measures, counts, countOnly);\n    }\n\n    this.inputs = Object.keys(inputs);\n  }\n  const prototype = WindowState.prototype;\n\n  prototype.init = function () {\n    this.windows.forEach(_ => _.init());\n    if (this.cell) this.cell.init();\n  };\n\n  prototype.update = function (w, t) {\n    const cell = this.cell,\n          wind = this.windows,\n          data = w.data,\n          m = wind && wind.length;\n    let j;\n\n    if (cell) {\n      for (j = w.p0; j < w.i0; ++j) cell.rem(data[j]);\n\n      for (j = w.p1; j < w.i1; ++j) cell.add(data[j]);\n\n      cell.set(t);\n    }\n\n    for (j = 0; j < m; ++j) wind[j].update(w, t);\n  };\n\n  function cell(measures, counts, countOnly) {\n    measures = measures.map(m => compileMeasures(m, m.field));\n    const cell = {\n      num: 0,\n      agg: null,\n      store: false,\n      count: counts\n    };\n\n    if (!countOnly) {\n      var n = measures.length,\n          a = cell.agg = Array(n),\n          i = 0;\n\n      for (; i < n; ++i) a[i] = new measures[i](cell);\n    }\n\n    if (cell.store) {\n      var store = cell.data = new TupleStore();\n    }\n\n    cell.add = function (t) {\n      cell.num += 1;\n      if (countOnly) return;\n      if (store) store.add(t);\n\n      for (let i = 0; i < n; ++i) {\n        a[i].add(a[i].get(t), t);\n      }\n    };\n\n    cell.rem = function (t) {\n      cell.num -= 1;\n      if (countOnly) return;\n      if (store) store.rem(t);\n\n      for (let i = 0; i < n; ++i) {\n        a[i].rem(a[i].get(t), t);\n      }\n    };\n\n    cell.set = function (t) {\n      let i, n; // consolidate stored values\n\n      if (store) store.values(); // update tuple properties\n\n      for (i = 0, n = counts.length; i < n; ++i) t[counts[i]] = cell.num;\n\n      if (!countOnly) for (i = 0, n = a.length; i < n; ++i) a[i].set(t);\n    };\n\n    cell.init = function () {\n      cell.num = 0;\n      if (store) store.reset();\n\n      for (let i = 0; i < n; ++i) a[i].init();\n    };\n\n    return cell;\n  }\n\n  /**\n   * Perform window calculations and write results to the input stream.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.\n   * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.\n   * @param {Array<function(object): *>} [params.fields] - An array of accessors\n   *   for data fields to use as inputs to window operations.\n   * @param {Array<*>} [params.params] - An array of parameter values for window operations.\n   * @param {Array<string>} [params.as] - An array of output field names for window operations.\n   * @param {Array<number>} [params.frame] - Window frame definition as two-element array.\n   * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row\n   *   number alone, ignoring peers with identical sort values. If false (default),\n   *   the window boundaries will be adjusted to include peer values.\n   */\n\n  function Window(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n    this._mlen = 0;\n    this._mods = [];\n  }\n  Window.Definition = {\n    'type': 'Window',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'ops',\n      'type': 'enum',\n      'array': true,\n      'values': ValidWindowOps.concat(ValidAggregateOps)\n    }, {\n      'name': 'params',\n      'type': 'number',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'frame',\n      'type': 'number',\n      'null': true,\n      'array': true,\n      'length': 2,\n      'default': [null, 0]\n    }, {\n      'name': 'ignorePeers',\n      'type': 'boolean',\n      'default': false\n    }]\n  };\n  vegaUtil.inherits(Window, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.stamp = pulse.stamp;\n\n      const mod = _.modified(),\n            cmp = vegaDataflow.stableCompare(_.sort),\n            key = groupkey(_.groupby),\n            group = t => this.group(key(t)); // initialize window state\n\n\n      let state = this.state;\n\n      if (!state || mod) {\n        state = this.state = new WindowState(_);\n      } // partition input tuples\n\n\n      if (mod || pulse.modified(state.inputs)) {\n        this.value = {};\n        pulse.visit(pulse.SOURCE, t => group(t).add(t));\n      } else {\n        pulse.visit(pulse.REM, t => group(t).remove(t));\n        pulse.visit(pulse.ADD, t => group(t).add(t));\n      } // perform window calculations for each modified partition\n\n\n      for (let i = 0, n = this._mlen; i < n; ++i) {\n        processPartition(this._mods[i], state, cmp, _);\n      }\n\n      this._mlen = 0;\n      this._mods = []; // TODO don't reflow everything?\n\n      return pulse.reflow(mod).modifies(state.outputs);\n    },\n\n    group(key) {\n      let group = this.value[key];\n\n      if (!group) {\n        group = this.value[key] = SortedList(vegaDataflow.tupleid);\n        group.stamp = -1;\n      }\n\n      if (group.stamp < this.stamp) {\n        group.stamp = this.stamp;\n        this._mods[this._mlen++] = group;\n      }\n\n      return group;\n    }\n\n  });\n\n  function processPartition(list, state, cmp, _) {\n    const sort = _.sort,\n          range = sort && !_.ignorePeers,\n          frame = _.frame || [null, 0],\n          data = list.data(cmp),\n          // use cmp for stable sort\n    n = data.length,\n          b = range ? bisector(sort) : null,\n          w = {\n      i0: 0,\n      i1: 0,\n      p0: 0,\n      p1: 0,\n      index: 0,\n      data: data,\n      compare: sort || vegaUtil.constant(-1)\n    };\n    state.init();\n\n    for (let i = 0; i < n; ++i) {\n      setWindow(w, frame, i, n);\n      if (range) adjustRange(w, b);\n      state.update(w, data[i]);\n    }\n  }\n\n  function setWindow(w, f, i, n) {\n    w.p0 = w.i0;\n    w.p1 = w.i1;\n    w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));\n    w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);\n    w.index = i;\n  } // if frame type is 'range', adjust window for peer values\n\n\n  function adjustRange(w, bisect) {\n    const r0 = w.i0,\n          r1 = w.i1 - 1,\n          c = w.compare,\n          d = w.data,\n          n = d.length - 1;\n    if (r0 > 0 && !c(d[r0], d[r0 - 1])) w.i0 = bisect.left(d, d[r0]);\n    if (r1 < n && !c(d[r1], d[r1 + 1])) w.i1 = bisect.right(d, d[r1]);\n  }\n\n  exports.aggregate = Aggregate;\n  exports.bin = Bin;\n  exports.collect = Collect;\n  exports.compare = Compare;\n  exports.countpattern = CountPattern;\n  exports.cross = Cross;\n  exports.density = Density;\n  exports.dotbin = DotBin;\n  exports.expression = Expression;\n  exports.extent = Extent;\n  exports.facet = Facet;\n  exports.field = Field;\n  exports.filter = Filter;\n  exports.flatten = Flatten;\n  exports.fold = Fold;\n  exports.formula = Formula;\n  exports.generate = Generate;\n  exports.impute = Impute;\n  exports.joinaggregate = JoinAggregate;\n  exports.kde = KDE;\n  exports.key = Key;\n  exports.load = Load;\n  exports.lookup = Lookup;\n  exports.multiextent = MultiExtent;\n  exports.multivalues = MultiValues;\n  exports.params = Params;\n  exports.pivot = Pivot;\n  exports.prefacet = PreFacet;\n  exports.project = Project;\n  exports.proxy = Proxy;\n  exports.quantile = Quantile;\n  exports.relay = Relay;\n  exports.sample = Sample;\n  exports.sequence = Sequence;\n  exports.sieve = Sieve;\n  exports.subflow = Subflow;\n  exports.timeunit = TimeUnit;\n  exports.tupleindex = TupleIndex;\n  exports.values = Values;\n  exports.window = Window;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","vegaUtil","vegaDataflow","vegaStatistics","vegaTime","multikey","f","x","n","length","i","k","String","groupkey","fields","measure","key","value","out","extend","name","base_op","compareIndex","a","b","idx","resolve","agg","map","forEach","getreqs","req","AggregateOps","Object","values","sort","init","missing","valid","_ops","op","add","v","t","rem","set","_out","compileMeasures","field","ctr","cell","ops","get","identity","slice","prototype","TupleStore","_key","tupleid","reset","Aggregate","params","Transform","call","_adds","_mods","_mlen","_alen","_drop","_cross","_dims","_dnames","_measures","_countOnly","_outputs","_inputs","_prev","_counts","Bin","SortedList","idFunc","source","input","data","cnt","push","remove","size","compare","resort","filter","merge","concat","Collect","Compare","Operator","update$5","_","modified","orders","CountPattern","Cross","parse","def","func","FUNCTION","hasOwnProperty","Distributions","error","d","FIELD","from","DISTRIBUTIONS","Density","pulse","materialize","SOURCE","fieldNames","as","accessorName","partition$1","groupby","groups","g","dims","DotBin","Expression","update$4","expr","accessor","datum","accessorFields","Extent","undefined","Subflow","parent","count","Facet","_keys","fastmap","_targets","active","a.forEach","Field","update$3","isArray","array","Filter","Flatten","Fold","Formula","Generate","ascending","NaN","bisector","left","lo","hi","compare1","mid","compare2","delta","center","right","numbers","valueof","index","compareDefined","ascendingDefined","TypeError","max","min","quickselect","m","z","Math","log","s","exp","sd","sqrt","newLeft","floor","newRight","j","swap","range","start","stop","step","arguments","ceil","Array","Impute","getValue","method","Methods","getField","partition","keyvals","domain","kMap","gMap","group","gKey","gVals","Empty","JoinAggregate","KDE","Key","update$2","flat","Load","_pending","output","ingest","fork","NO_FIELDS","NO_SOURCE","clean","Lookup","MultiExtent","update$1","ext","extents","Infinity","e","MultiValues","update","reduce","Params","Pivot","aggregateParams","keys","pivotKeys","limit","changed","bind","list","visit","PreFacet","Project","Proxy","Quantile","Relay","Sample","Sequence","Sieve","TimeUnit","TupleIndex","Values","WindowOp","param","fn","WindowOps","zero","w","next","WindowState","visitInputs","inputs","outputs","windows","counts","measures","countOnly","mname","num","store","cell.add","cell.rem","cell.set","cell.init","Window","processPartition","state","cmp","ignorePeers","frame","i0","i1","p0","p1","constant","abs","r0","r1","c","bisect","noop","__count__","sum","product","mean","mean_d","average","variance","dev","variancep","stdev","stdevp","stderr","distinct","ci0","ci1","median","q2","q1","q3","Number","isNaN","argmin","argmax","ValidAggregateOps","prototype$1","prototype$1.reset","_add","_rem","_q","_get","_ext","prototype$1.add","prototype$1.rem","prototype$1.values","r","prototype$1.distinct","extent","prototype$1.extent","extentIndex","prototype$1.argmin","prototype$1.argmax","prototype$1.min","prototype$1.max","quartile","prototype$1.quartile","quartiles","prototype$1.q1","prototype$1.q2","prototype$1.q3","ci","prototype$1.ci","_ci","bootstrapCI","prototype$1.ci0","prototype$1.ci1","Definition","inherits","transform","aggr","mod","stamp","REM","ADD","modifies","drop","cross","runAfter","changes","collect","cells","tuple","vals","generate","base","curr","inputVisit","inputMap","dname","cellkey","outname","newcell","newtuple","p","names","replace","celltuple","adds","mods","prev","band","interval","bins","_bins","b0","b1","reflow","flag","ADD_MOD","bin","anchor","toNumber","EPSILON$1","ALL","stableCompare","root","process","match","case","text","toUpperCase","toLowerCase","tokens","test","_parameterCheck","_match","_stop","_finish","RegExp","stopwords","pattern","tuples","_tuples","ADD_REM","truthy","kde","randomKDE","mixture","randomMixture","normal","randomNormal","lognormal","randomLogNormal","uniform","randomUniform","distributions","dist","distribution","minsteps","steps","maxsteps","sampleCurve","Output","smooth","span","dotbin","isFinite","dataflow","warn","connect","target","detachSubflow","targets","evaluate","activate","flow","subflow","flows","sf","_group","df","detached","detach","initTargets","act","cache","rekey","id","delete","MOD","k0","k1","REFLOW","empty","cleanThreshold","revisit","isMod","has","arrays","maxlen","l","derive","fnames","initonly","gen","generator","Float64Array","value0","subarray","value1","impute","fName","kName","gNames","kVal","_impute","bandwidth","cumulative","density","scale","local","StopPropagation","format","async","request","url","then","res","touch","defaultValue","default","some","_transform","rederive","lut","addAll","dt","probs","EPSILON","q","quantiles","random","cap","OUTPUT","TIME_UNITS","utc","timezone","_floor","offset","utcInterval","timeInterval","unit","u0","u1","units","timeBin","maxbins","tunits","timeUnits","utcFloor","timeFloor","peek","clear","row_number","rank","dense_rank","drank","percent_rank","cume_dist","cume","ntile","lag","lead","first_value","last_value","nth_value","nth","prev_value","next_value","ValidWindowOps","prototype.init","prototype.update","wind","aggregate","countpattern","expression","facet","flatten","fold","formula","joinaggregate","load","lookup","multiextent","multivalues","pivot","prefacet","project","proxy","quantile","relay","sample","sequence","sieve","timeunit","tupleindex","window","defineProperty"]
}
