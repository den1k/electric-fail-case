{
"version":3,
"file":"module$node_modules$vega_crossfilter$build$vega_crossfilter.js",
"lineCount":23,
"mappings":"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,eAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,gBAAvB,CAAgC,CACvH,SAAS,CAACH,MAAD,CAASI,OAAT,CAAkB,CACP,QAAnB,GAAA,MAAOD,iBAAP,EAAiD,WAAjD,GAA+B,MAAOD,OAAtC,CAA+DE,OAAA,CAAQD,gBAAR,CAAiBF,OAAA,CAAQ,uDAAR,CAAjB,CAA2CA,OAAA,CAAQ,+CAAR,CAA3C,CAA/D,CACkB,UAAlB,GAAA,MAAOI,OAAP,EAAgCA,MAAOC,CAAAA,GAAvC,CAA6CD,MAAA,CAAO,CAAC,SAAD,CAAY,eAAZ,CAA6B,WAA7B,CAAP,CAAkDD,OAAlD,CAA7C,EACCJ,MAAA,CAA+B,WAAtB,GAAA,MAAOO,WAAP;AAAoCA,UAApC,CAAiDP,MAAjD,EAA2DQ,IAApE,CAA0EJ,OAAA,EAASJ,MAAOS,CAAAA,IAAP,CAAcT,MAAOS,CAAAA,IAArB,EAA6B,EAA7B,CAAiCT,MAAOS,CAAAA,IAAKC,CAAAA,UAA7C,CAA0D,EAAnE,EAAwEV,MAAOS,CAAAA,IAA/E,CAAqFT,MAAOS,CAAAA,IAA5F,CAD3E,CAF0B,CAA3B,CAAD,CAIG,IAJH,CAIU,QAAS,CAACN,OAAD,CAAUQ,YAAV,CAAwBC,QAAxB,CAAkC,CAUnDC,QAASA,QAAO,EAAG,CAAA,IACbC,MAAQ,CADK,CAEbC,KAAO,EAFM,CAGbC,KATe,IAAIC,WAAJ,CASAC,CATA,CAMF,CAIbC,KAAOC,cAAA,CAAM,CAAN,CAASN,KAAT,CAJM,CAKbO,KAAOD,cAAA,CAAM,CAAN,CAASN,KAAT,CACX,OAAO,CACLC,KAAM,EAAAA,EAAMA,IADP,CAELC,KAAM,EAAAA,EAAM,CAAgBA,IAAAA,yBAAAA,IAAWM,KAAAA,OAALP,IAAKO,CAAAA,MAwErCF,yBAAME,CAAAA,MAAV,EAAoBA,MAApB,GACAC,MAEA,CAFe,IAAIH,wBAAMI,CAAAA,WAAV,CAAsBF,MAAtB,CAEf,CADAC,MAAKE,CAAAA,GAAL,CAASL,wBAAT,CACA;AAAA,wBAAA,CAAOG,MAHP,CAxEc,OAAAP,KAAA,CAAO,wBAAP,CAFP,CAILU,GAAG,CAACN,KAAD,CAAQ,CACT,IAAK,IAAIO,EAAI,CAAR,CAAWC,EAAIb,IAAKO,CAAAA,MAApB,CAA4BJ,EAAIE,KAAME,CAAAA,MAAtC,CAA8CO,CAAnD,CAAsDF,CAAtD,CAA0DT,CAA1D,CAA6D,EAAES,CAA/D,CACEE,CAEA,CAFIT,KAAA,CAAMO,CAAN,CAEJ,CADAE,CAAEC,CAAAA,MACF,CADWF,CAAA,EACX,CAAAb,IAAKgB,CAAAA,IAAL,CAAUF,CAAV,CAJO,CAJN,CAYLG,MAAM,CAACC,GAAD,CAAMC,GAAN,CAAW,CAAA,MAEThB,EAAIH,IAAKO,CAAAA,MACTC,IAAAA,CAAOY,KAAA,CAAMjB,CAAN,CAAUe,GAAV,CADb,OAEMG,QAAUrB,IAJD,KAMXc,CANW,CAMRF,CANQ,CAMLC,CAEV,KAAKD,CAAL,CAAS,CAAT,CAAY,CAACO,GAAA,CAAIP,CAAJ,CAAb,EAAuBA,CAAvB,CAA2BT,CAA3B,CAA8B,EAAES,CAAhC,CACEJ,GAAA,CAAKI,CAAL,CACA,CADUZ,IAAA,CAAKY,CAAL,CACV,CAAAS,OAAA,CAAQT,CAAR,CAAA,CAAaA,CAIf,KAAKC,CAAL,CAASD,CAAT,CAAYA,CAAZ,CAAgBT,CAAhB,CAAmB,EAAES,CAArB,CACEE,CAYA,CAZId,IAAA,CAAKY,CAAL,CAYJ,CAVKO,GAAA,CAAIP,CAAJ,CAAL,CAOES,OAAA,CAAQT,CAAR,CAPF,CAOe,CAAC,CAPhB,EACES,OAAA,CAAQT,CAAR,CAIA,CAJaC,CAIb,CAHAT,IAAA,CAAKS,CAAL,CAGA,CAHUT,IAAA,CAAKQ,CAAL,CAGV,CAFAN,IAAA,CAAKO,CAAL,CAEA,CAFUP,IAAA,CAAKM,CAAL,CAEV,CADAJ,GAAA,CAAKK,CAAL,CACA,CADUC,CACV,CAAAA,CAAEC,CAAAA,MAAF,CAAWF,CAAA,EALb,CAUA,CAAAT,IAAA,CAAKQ,CAAL,CAAA,CAAU,CAGZZ,KAAA,CAAOQ,GACP,OAAOa,QA/BQ,CAZZ,CA8CLC,KAAM,EAAAA,EAAMtB,IAAKO,CAAAA,MA9CZ,CA+CLH,KAAM,EAAAA,EAAMA,IA/CP,CAgDLE,KAAM,EAAAA;AAAMA,IAhDP,CAiDLiB,MAAOC,CAAAD,EAAKjB,IAAA,CAAKkB,CAAL,CAALD,CAAenB,IAAA,CAAKoB,CAAL,CAjDjB,CAkDLC,IAAK,EAAAA,EAAc,GAAR,CAAA1B,KAAA,CAAgB,GAAhB,CAA+B,KAAR,CAAAA,KAAA,CAAkB,KAAlB,CAA2B,UAlDxD,CAoDLW,GAAG,CAACc,CAAD,CAAIE,GAAJ,CAAS,CACVtB,IAAA,CAAKoB,CAAL,CAAA,EAAWE,GADD,CApDP,CAwDLC,KAAK,CAACH,CAAD,CAAIE,GAAJ,CAAS,CACZtB,IAAA,CAAKoB,CAAL,CAAA,EAAW,CAACE,GADA,CAxDT,CA4DLE,MAAM,CAACzB,CAAD,CAAI0B,CAAJ,CAAO,CAGX,GAAI1B,CAAJ,CAFUC,IAAKG,CAAAA,MAEf,EAAasB,CAAb,CAAiB9B,KAAjB,CACEA,KAEA,CAFQ+B,IAAKC,CAAAA,GAAL,CAASF,CAAT,CAAY9B,KAAZ,CAER,CADAK,IACA,CADOC,cAAA,CAAMF,CAAN,CAASJ,KAAT,CAAgBK,IAAhB,CACP,CAAAE,IAAA,CAAOD,cAAA,CAAMF,CAAN,CAASJ,KAAT,CANE,CA5DR,CANU,CAsFnBM,QAASA,eAAK,CAACF,CAAD,CAAI0B,CAAJ,CAAOxB,KAAP,CAAc,CACpBG,CAAAA,CAAO,CAAK,GAAJ,CAAAqB,CAAA,CAAYG,MAAZ,CAAyB,KAAJ,CAAAH,CAAA,CAAcI,OAAd,CAAwBC,OAA9C,EAAuD/B,CAAvD,CACTE,MAAJ,EAAWG,CAAKE,CAAAA,GAAL,CAASL,KAAT,CACX,OAAOG,EAHmB,CAM5B2B,QAASA,UAAU,CAACC,KAAD,CAAQxB,UAAR,CAAWyB,KAAX,CAAkB,CACnC,MAAMC,IAAM,CAANA,EAAW1B,UACjB,OAAO,CACLc,IAAKY,GADA,CAELC,KAAM,CAACD,GAFF,CAGLE,MAAOH,KAAMI,CAAAA,KAAN,EAHF,CAILC,OAAQN,KAAMM,CAAAA,MAJT;AAKLN,MAAOA,KAAMA,CAAAA,KALR,CAMLd,KAAMc,KAAMd,CAAAA,IANP,CAQLqB,KAAK,CAACC,KAAD,CAAQxC,IAAR,CAAc,CAAA,IAEXoC,MADMK,IACMH,CAAAA,MAAJ,CADFG,IACiBL,CAAAA,KAAf,CAAsBI,KAAME,CAAAA,KAA5B,CACRC,MAAAA,CAAMH,KAAMR,CAAAA,KAHD,OAIXY,GAAKR,KAAA,CAAM,CAAN,CACLS,MAAAA,CAAKT,KAAA,CAAM,CAAN,CAJX,OAKMU,GAAKH,KAAIxC,CAAAA,MACf,KAAIK,CAEJ,KAAKA,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBoC,EAAhB,CAAoB,EAAEpC,CAAtB,CAAyBR,IAAA,CAAK2C,KAAA,CAAInC,CAAJ,CAAL,CAAA,EAAgB0B,GAEzC,KAAK1B,CAAL,CAASqC,KAAT,CAAarC,CAAb,CAAiBsC,EAAjB,CAAqB,EAAEtC,CAAvB,CAA0BR,IAAA,CAAK2C,KAAA,CAAInC,CAAJ,CAAL,CAAA,EAAgB0B,GAE1C,OAZYO,KADK,CARd,CAF4B,CA6BrCM,QAASA,UAAS,CAACC,CAAD,CAAIC,CAAJ,CAAO,CACvB,MAAY,KAAL,EAAAD,CAAA,EAAkB,IAAlB,EAAaC,CAAb,CAAyBC,GAAzB,CAA+BF,CAAA,CAAIC,CAAJ,CAAQ,CAAC,CAAT,CAAaD,CAAA,CAAIC,CAAJ,CAAQ,CAAR,CAAYD,CAAA,EAAKC,CAAL,CAAS,CAAT,CAAaC,GADrD,CAIzBC,QAASA,SAAQ,CAACC,CAAD,CAAI,CAanBC,QAASA,KAAI,CAACL,CAAD,CAAIM,CAAJ,CAAOV,EAAA,CAAK,CAAZ,CAAeC,EAAA,CAAKG,CAAE7C,CAAAA,MAAtB,CAA8B,CACzC,GAAIyC,EAAJ,CAASC,EAAT,CAAa,CACX,GAAuB,CAAvB,GAAIU,QAAA,CAASD,CAAT,CAAYA,CAAZ,CAAJ,CAA0B,MAAOT,GAEjC,GAAG,CACD,MAAMW,IAAMZ,EAANY,CAAWX,EAAXW,GAAkB,CACE,EAA1B,CAAIC,QAAA,CAAST,CAAA,CAAEQ,GAAF,CAAT,CAAiBF,CAAjB,CAAJ,CAA6BV,EAA7B,CAAkCY,GAAlC,CAAwC,CAAxC,CAA+CX,EAA/C,CAAoDW,GAFnD,CAAH,MAGSZ,EAHT;AAGcC,EAHd,CAHW,CASb,MAAOD,GAVkC,CAZ3C,IAAIc,MAAQN,CAAZ,CACIG,SAAWH,CADf,CAEIK,SAAWL,CAEE,EAAjB,GAAIA,CAAEjD,CAAAA,MAAN,GACEuD,KAIA,CAJQ,CAACC,CAAD,CAAIL,CAAJ,CAAAI,EAAUN,CAAA,CAAEO,CAAF,CAAVD,CAAiBJ,CAIzB,CAFAC,QAEA,CAFWR,SAEX,CAAAU,QAAA,CAAW,CAACE,CAAD,CAAIL,CAAJ,CAAAG,EAAUV,SAAA,CAAUK,CAAA,CAAEO,CAAF,CAAV,CAAgBL,CAAhB,CALvB,CAuCA,OAAO,CACLD,IADK,CAELO,OAPFA,QAAe,CAACZ,CAAD,CAAIM,CAAJ,CAAOV,EAAA,CAAK,CAAZ,CAAeC,EAAA,CAAKG,CAAE7C,CAAAA,MAAtB,CAA8B,CACrCK,EAAAA,CAAI6C,IAAA,CAAKL,CAAL,CAAQM,CAAR,CAAWV,EAAX,CAAeC,EAAf,CAAoB,CAApB,CACV,OAAOrC,GAAA,CAAIoC,EAAJ,EAAUc,KAAA,CAAMV,CAAA,CAAExC,EAAF,CAAM,CAAN,CAAN,CAAgB8C,CAAhB,CAAV,CAA+B,CAACI,KAAA,CAAMV,CAAA,CAAExC,EAAF,CAAN,CAAY8C,CAAZ,CAAhC,CAAiD9C,EAAjD,CAAqD,CAArD,CAAyDA,EAFrB,CAKtC,CAGLqD,MArBFA,QAAc,CAACb,CAAD,CAAIM,CAAJ,CAAOV,EAAA,CAAK,CAAZ,CAAeC,EAAA,CAAKG,CAAE7C,CAAAA,MAAtB,CAA8B,CAC1C,GAAIyC,EAAJ,CAASC,EAAT,CAAa,CACX,GAAuB,CAAvB,GAAIU,QAAA,CAASD,CAAT,CAAYA,CAAZ,CAAJ,CAA0B,MAAOT,GAEjC,GAAG,CACD,MAAMW,IAAMZ,EAANY,CAAWX,EAAXW,GAAkB,CACG,EAA3B,EAAIC,QAAA,CAAST,CAAA,CAAEQ,GAAF,CAAT,CAAiBF,CAAjB,CAAJ,CAA8BV,EAA9B,CAAmCY,GAAnC,CAAyC,CAAzC,CAAgDX,EAAhD,CAAqDW,GAFpD,CAAH,MAGSZ,EAHT,CAGcC,EAHd,CAHW,CASb,MAAOD,GAVmC,CAkBrC,CA5CY,CA4DrBkB,QAASA,QAAO,CAACC,MAAD,CAASC,IAAT,CAAe,CAC7B,MAAOhD,MAAMiD,CAAAA,IAAN,CAAWD,IAAX,CAAiBE,GAAA,EAAOH,MAAA,CAAOG,GAAP,CAAxB,CADsB,CAQ/BC,QAASA,YAAW,EAAG,CAAA,IACjBnC;AAxMe,IAAIlC,WAAJ,CAwMCC,CAxMD,CAuME,CAEjB2C,eAAQ,EAFS,CAGjBxB,KAAO,CA8EX,OAAO,CACLkD,OA7EFA,QAAe,CAACF,GAAD,CAAMtE,IAAN,CAAYyE,IAAZ,CAAkB,CAC/B,GAAI,CAACzE,IAAKO,CAAAA,MAAV,CAAkB,MAAO,EADM,OAEzBmE,GAAKpD,IAFoB,CAGzB4B,GAAKlD,IAAKO,CAAAA,MAHe,CAIzBoE,KAhNW,IAAIzE,WAAJ,CAgNIgD,EAhNJ,CA4Mc,KAK3B0B,KAAOxD,KAAA,CAAM8B,EAAN,CAAX,KAGItC,UAEJ,KAAKA,UAAL,CAAS,CAAT,CAAYA,UAAZ,CAAgBsC,EAAhB,CAAoB,EAAEtC,UAAtB,CACEgE,IAAA,CAAKhE,UAAL,CACA,CADU0D,GAAA,CAAItE,IAAA,CAAKY,UAAL,CAAJ,CACV,CAAA+D,IAAA,CAAK/D,UAAL,CAAA,CAAUA,UAGZgE,KAAA,CAAOC,IAAA,CAAKD,IAAL,CAAWD,IAAX,CAEP,IAAID,EAAJ,CAAQ,CACNI,GAAA,CAAOhC,cACPiC,KAAA,CAAO3C,cACPU,eAAA,CAAQ1B,KAAA,CAAMsD,EAAN,CAAWxB,EAAX,CACRd,eAAA,CAjOe,IAAIlC,WAAJ,CAiOCwE,EAjOD,CAiOMxB,EAjON,CAkOa0B,WAAAA,CAAAA,IAAgB9B,KAAAA,MAAAA,cAAAA,CAAOV,MAAAA,cAyEkB;IACrE4C,GAAK,CADgE,CAErEC,GAAK,CAFgE,CAGrErE,CAEJ,KAAKA,CAAL,CAAS,CAAT,CAAYoE,EAAZ,CA9E4BN,EA8E5B,EAAuBO,EAAvB,CA9E4C/B,EA8E5C,CAAgC,EAAEtC,CAAlC,CA9EgBkE,GA+EV,CAAOE,EAAP,CAAJ,CAAiBE,UAAA,CAAOD,EAAP,CAAjB,EACEnC,KAAA,CAAMlC,CAAN,CACA,CAjFYkE,GAgFD,CAAOE,EAAP,CACX,CAAA5C,KAAA,CAAMxB,CAAN,CAAA,CAjFkBmE,IAiFP,CAAOC,EAAA,EAAP,CAFb,GAIElC,KAAA,CAAMlC,CAAN,CACA,CADWsE,UAAA,CAAOD,EAAP,CACX,CAAA7C,KAAA,CAAMxB,CAAN,CAAA,CApFkC+D,IAoFvB,CAAOM,EAAA,EAAP,CAAX,CApFMR,IA+ER,CASF,KAAA,CAAOO,EAAP,CAxF4BN,EAwF5B,CAAgB,EAAEM,EAAF,CAAM,EAAEpE,CAAxB,CACEkC,KAAA,CAAMlC,CAAN,CACA,CA1FckE,GAyFH,CAAOE,EAAP,CACX,CAAA5C,KAAA,CAAMxB,CAAN,CAAA,CA1FoBmE,IA0FT,CAAOC,EAAP,CAGb,KAAA,CAAOC,EAAP,CA7F4C/B,EA6F5C,CAAgB,EAAE+B,EAAF,CAAM,EAAErE,CAAxB,CACEkC,KAAA,CAAMlC,CAAN,CACA,CADWsE,UAAA,CAAOD,EAAP,CACX,CAAA7C,KAAA,CAAMxB,CAAN,CAAA,CA/FoC+D,IA+FzB,CAAOM,EAAP,CAAX,CA/FQR,IALA,CAAR,IAMO,CACL,GAAW,CAAX,CAAIA,IAAJ,CAAc,IAAK7D,UAAL,CAAS,CAAT,CAAYA,UAAZ,CAAgBsC,EAAhB,CAAoB,EAAEtC,UAAtB,CACZ+D,IAAA,CAAK/D,UAAL,CAAA,EAAW6D,IAEb3B,eAAA,CAAQ8B,IACRxC,eAAA,CAAQuC,IALH,CAQPrD,IAAA,CAAOoD,EAAP,CAAYxB,EACZ,OAAO,CACLd,MAAOuC,IADF,CAEL7B,MAAO8B,IAFF,CAhCwB,CA4E1B,CAEL3D,OAxCFA,QAAe,CAACC,GAAD,CAAMC,GAAN,CAAW,CAExB,MAAMhB,EAAImB,IAFc,KAGpByB,GAHoB,CAGfnC,CAHe,CAGZC,CAEZ,KAAKD,CAAL,CAAS,CAAT,CAAY,CAACO,GAAA,CAAIiB,cAAA,CAAMxB,CAAN,CAAJ,CAAb;AAA8BA,CAA9B,CAAkCT,CAAlC,CAAqC,EAAES,CAAvC,EAGA,IAAKC,CAAL,CAASD,CAAT,CAAYA,CAAZ,CAAgBT,CAAhB,CAAmB,EAAES,CAArB,CACOO,GAAA,CAAI4B,GAAJ,CAAUX,cAAA,CAAMxB,CAAN,CAAV,CAAL,GACEwB,cAAA,CAAMvB,CAAN,CAEA,CAFWkC,GAEX,CADAD,cAAA,CAAMjC,CAAN,CACA,CADWiC,cAAA,CAAMlC,CAAN,CACX,CAAA,EAAEC,CAHJ,CAOFS,KAAA,CAAOnB,CAAP,CAAWe,GAhBa,CAsCnB,CAGLwB,OAhBFA,QAAe,CAACF,KAAD,CAAQnC,KAAR,CAAe,CAC5B,IAAIF,CAEAE,MAAJ,CACEF,CADF,CACME,KAAME,CAAAA,MADZ,EAGEF,KACA,CADQyC,cACR,CAAA3C,CAAA,CAAImB,IAJN,CAOA,OAAO,CAAC6D,UAAA,CAAW9E,KAAX,CAAkBmC,KAAA,CAAM,CAAN,CAAlB,CAA4B,CAA5B,CAA+BrC,CAA/B,CAAD,CAAoCiF,WAAA,CAAY/E,KAAZ,CAAmBmC,KAAA,CAAM,CAAN,CAAnB,CAA6B,CAA7B,CAAgCrC,CAAhC,CAApC,CAVqB,CAavB,CAILkB,QAvBFA,QAAgB,CAACF,GAAD,CAAM,CACpB,IAAK,IAAIP,EAAI,CAAR,CAAWT,EAAImB,IAApB,CAA0BV,CAA1B,CAA8BT,CAA9B,CAAiC,EAAES,CAAnC,CACEwB,cAAA,CAAMxB,CAAN,CAAA,CAAWO,GAAA,CAAIiB,cAAA,CAAMxB,CAAN,CAAJ,CAFO,CAmBf,CAKLwB,MAAO,EAAAA,EAAMA,cALR,CAMLd,KAAM,EAAAA,EAAMA,IANP,CAjFc,CA2FvBuD,QAASA,KAAI,CAACQ,MAAD,CAASjD,KAAT,CAAgB,CAC3BiD,MAAOR,CAAAA,IAAKS,CAAAA,IAAZ,CAAiBlD,KAAjB,CAAwB,CAACgB,CAAD,CAAIC,CAAJ,CAAA,EAAU,CAC1BK,CAAAA,CAAI2B,MAAA,CAAOjC,CAAP,CACJmC,EAAAA,CAAIF,MAAA,CAAOhC,CAAP,CACV;MAAOK,EAAA,CAAI6B,CAAJ,CAAQ,CAAC,CAAT,CAAa7B,CAAA,CAAI6B,CAAJ,CAAQ,CAAR,CAAY,CAHA,CAAlC,CAKA,OAAOrB,QAAA,CAAQmB,MAAR,CAAgBjD,KAAhB,CANoB,CA2C7BoD,QAASA,YAAW,CAACC,MAAD,CAAS,CAC3B7F,YAAa8F,CAAAA,SAAUJ,CAAAA,IAAvB,CAA4B,IAA5B,CAAkCxF,OAAA,EAAlC,CAA6C2F,MAA7C,CAEA,KAAKE,CAAAA,KAAL,CADA,IAAKC,CAAAA,QACL,CADgB,IAFW,CAsZ7BC,QAASA,cAAa,CAACJ,MAAD,CAAS,CAC7B7F,YAAa8F,CAAAA,SAAUJ,CAAAA,IAAvB,CAA4B,IAA5B,CAAkC,IAAlC,CAAwCG,MAAxC,CAD6B,CAruB/B,MAAMzD,OAAS7B,CAAA6B,EAAK,IAAI8D,UAAJ,CAAe3F,CAAf,CAApB,CACM8B,QAAU9B,CAAA8B,EAAK,IAAI8D,WAAJ,CAAgB5F,CAAhB,CADrB,CAEM+B,QAAU/B,CAAA+B,EAAK,IAAIhC,WAAJ,CAAgBC,CAAhB,CAFrB,CA4LM6F,gBAAkBzC,QAAA,CAASJ,SAAT,CA5LxB,CA6LMiC,YAAcY,eAAgB/B,CAAAA,KA7LpC,CA8LMkB,WAAaa,eAAgBvC,CAAAA,IACnCF,SAAA,CAPA0C,QAAe,CAACvC,CAAD,CAAI,CACjB,MAAa,KAAN,GAAAA,CAAA,CAAaJ,GAAb,CAAmB,CAACI,CADV,CAOnB,CAAiBM,CAAAA,MAqJjBwB,YAAYU,CAAAA,UAAZ;AAAyB,CACvB,KAAQ,aADe,CAEvB,SAAY,EAFW,CAGvB,OAAU,CAAC,CACT,KAAQ,QADC,CAET,KAAQ,OAFC,CAGT,MAAS,CAAA,CAHA,CAIT,SAAY,CAAA,CAJH,CAAD,CAKP,CACD,KAAQ,OADP,CAED,KAAQ,OAFP,CAGD,MAAS,CAAA,CAHR,CAID,SAAY,CAAA,CAJX,CAKD,QAAW,CACT,KAAQ,QADC,CAET,MAAS,CAAA,CAFA,CAGT,OAAU,CAHD,CALV,CALO,CAHa,CAoBzBrG,SAASsG,CAAAA,QAAT,CAAkBX,WAAlB,CAA+B5F,YAAa8F,CAAAA,SAA5C,CAAuD,CACrDU,SAAS,CAACC,CAAD,CAAIC,KAAJ,CAAW,CAClB,MAAK,KAAKX,CAAAA,KAAV,CAGaU,CAAEE,CAAAA,QAAF,CAAW,QAAX,CAEJ,EAF4BF,CAAEG,CAAAA,MAAOC,CAAAA,IAAT,CAAcjD,CAAA,EAAK8C,KAAMC,CAAAA,QAAN,CAAe/C,CAAEgD,CAAAA,MAAjB,CAAnB,CAE5B,CAAO,IAAKE,CAAAA,MAAL,CAAYL,CAAZ,CAAeC,KAAf,CAAP,CAA+B,IAAKK,CAAAA,IAAL,CAAUN,CAAV,CAAaC,KAAb,CALxC,CACS,IAAKM,CAAAA,IAAL,CAAUP,CAAV,CAAaC,KAAb,CAFS,CADiC,CAWrDM,IAAI,CAACP,CAAD,CAAIC,KAAJ,CAAW,CAAA,MACPE,OAASH,CAAEG,CAAAA,MADJ,CAEPnE,MAAQgE,CAAEhE,CAAAA,KAFH,CAGPwE,QAAU,IAAKjB,CAAAA,QAAfiB,CAA0B,EAHnB,CAIPC,KAAO,IAAKnB,CAAAA,KAAZmB,CAAoB,EAJb,CAKPjF,EAAIQ,KAAM9B,CAAAA,MALH;IAMTK,EAAI,CAIR,KAVa,IAOT0D,GAGJ,CAAO1D,CAAP,CAAWiB,CAAX,CAAc,EAAEjB,CAAhB,CACE0D,GAEA,CAFMkC,MAAA,CAAO5F,CAAP,CAAUmG,CAAAA,KAEhB,CADA3E,GACA,CADQyE,OAAA,CAAQvC,GAAR,CACR,GADyBuC,OAAA,CAAQvC,GAAR,CACzB,CADwCC,WAAA,EACxC,EAAAuC,IAAK9F,CAAAA,IAAL,CAAUmB,SAAA,CAAUC,GAAV,CAAiBxB,CAAjB,CAAoByB,KAAA,CAAMzB,CAAN,CAApB,CAAV,CAGF,OAAO,KAAK+F,CAAAA,IAAL,CAAUN,CAAV,CAAaC,KAAb,CAhBM,CAXsC,CA8BrDI,MAAM,CAACL,CAAD,CAAIC,KAAJ,CAAW,CAAA,MACTU,OAASV,KAAMW,CAAAA,WAAN,EAAoBC,CAAAA,IAApB,EADA,CAETV,OAASH,CAAEG,CAAAA,MAFF,CAGTnE,MAAQgE,CAAEhE,CAAAA,KAHD,CAITwE,QAAU,IAAKjB,CAAAA,QAJN,CAKTkB,KAAO,IAAKnB,CAAAA,KALH,CAMTwB,KAAO,IAAKrE,CAAAA,KANH,CAOT1C,KAAO+G,IAAK/G,CAAAA,IAAL,EAPE,CAQTE,KAAO6G,IAAK7G,CAAAA,IAAL,EARE,CASTmB,IAAM0F,IAAK1F,CAAAA,GAAL,EATG,CAUT2F,IAAMJ,MAAOK,CAAAA,GAAbD,CAAmBJ,MAAOrG,CAAAA,GAVjB,CAWT2G,IAAMN,MAAOM,CAAAA,GAXJ,CAYTzF,EAAIQ,KAAM9B,CAAAA,MAZD,CAaTgH,KAAO,EAbE,KAcNnF,KAdM,KAcCkC,GAdD,KAcYkD,MAdZ,CAcoBC,MAdpB,CAc4B7G,CAd5B,CAckC4C,CAEjDlD,KAAKI,CAAAA,GAAL,CAASN,IAAT,CAEIkG,MAAMe,CAAAA,GAAI9G,CAAAA,MAAd,GACEiH,MADF,CACW,IAAKvG,CAAAA,MAAL,CAAYoF,CAAZ;AAAeC,KAAf,CAAsBU,MAAtB,CADX,CAKIV,MAAM3F,CAAAA,GAAIJ,CAAAA,MAAd,EACE4G,IAAKxG,CAAAA,GAAL,CAAS2F,KAAM3F,CAAAA,GAAf,CAIF,IAAI2F,KAAMgB,CAAAA,GAAI/G,CAAAA,MAAd,CAAsB,CACpBkH,MAAA,CAAS,EAEJ,KAAAC,IAAOpB,KAAMgB,CAAAA,GAAK1G,EAAA,CAAI,CAA3B,KAA8BT,GAA9B,CAAkCuH,GAAKnH,CAAAA,MAAvC,CAA+CK,CAA/C,CAAmDT,GAAnD,CAAsD,EAAES,CAAxD,CACE6G,MAAA,CAAOC,GAAA,CAAK9G,CAAL,CAAQG,CAAAA,MAAf,CAAA,CAAyB,CAJP,CAStB,IAAKH,CAAL,CAAS,CAAT,CAAYA,CAAZ,CAAgBiB,CAAhB,CAAmB,EAAEjB,CAArB,CAGE,GAFA4C,CAEI,CAFAgD,MAAA,CAAO5F,CAAP,CAEA,CAAA,CAACkG,IAAA,CAAKlG,CAAL,CAAD,EAAYyF,CAAEE,CAAAA,QAAF,CAAW,QAAX,CAAqB3F,CAArB,CAAZ,EAAuC0F,KAAMC,CAAAA,QAAN,CAAe/C,CAAEgD,CAAAA,MAAjB,CAA3C,CACElC,GAOA,CAPMd,CAAEuD,CAAAA,KAOR,EALMpG,GAKN,CALY4G,IAAA,CAAKjD,GAAL,CAKZ,IAJEuC,OAAA,CAAQvC,GAAR,CACA,CADelC,KACf,CADuBmC,WAAA,EACvB,CAAAgD,IAAA,CAAKjD,GAAL,CAAA,CAAY3D,GAAZ,CAAkByB,KAAMoC,CAAAA,MAAN,CAAahB,CAAb,CAAgB8C,KAAMnC,CAAAA,MAAtB,CAA8B,CAA9B,CAGpB,EAAA2C,IAAA,CAAKlG,CAAL,CAAA,CAAUuB,SAAA,CAAUC,KAAV,CAAiBxB,CAAjB,CAAoByB,KAAA,CAAMzB,CAAN,CAApB,CAA8B+B,CAAAA,KAA9B,CAAoChC,GAApC,CAAyCP,IAAzC,CAOTQ,EAAA,CAAI,CAAT,KAAYT,GAAZ,CAAgBgH,IAAKnH,CAAAA,IAAL,EAAYO,CAAAA,MAA5B,CAAoCK,CAApC,CAAwCT,GAAxC,CAA2C,EAAES,CAA7C,CACM4G,MAAA,CAAO5G,CAAP,CAAJ,GAGWN,IAAA,CAAKM,CAAL,CAAJ,GAAgBR,IAAA,CAAKQ,CAAL,CAAhB,CAELwG,GAAIpG,CAAAA,IAAJ,CAASJ,CAAT,CAFK,CAGI6G,MAAA,CAAO7G,CAAP,CAHJ;AAGiBR,IAAA,CAAKQ,CAAL,CAHjB,GAG6Ba,GAH7B,EAKL6F,GAAItG,CAAAA,IAAJ,CAASJ,CAAT,CARF,CAYFuG,KAAKQ,CAAAA,IAAL,EAAa,CAAb,EAAkB9F,CAAlB,EAAuB,CACvB,OAAOmF,OArEQ,CA9BoC,CAsGrDL,IAAI,CAACN,CAAD,CAAIC,KAAJ,CAAW,CAAA,MACPU,OAASV,KAAMW,CAAAA,WAAN,EAAoBC,CAAAA,IAApB,EADF,CAEPrF,EAAI,IAAK8D,CAAAA,KAAMpF,CAAAA,MACrB,KAAIoH,KAAO,CAEPrB,MAAMe,CAAAA,GAAI9G,CAAAA,MAAd,GACE,IAAKU,CAAAA,MAAL,CAAYoF,CAAZ,CAAeC,KAAf,CAAsBU,MAAtB,CACA,CAAAW,IAAA,GAAS,CAAT,EAAc9F,CAAd,EAAmB,CAFrB,CAKIwE,EAAEE,CAAAA,QAAF,CAAW,OAAX,CAAJ,EAA2B,CAACF,CAAEE,CAAAA,QAAF,CAAW,QAAX,CAA5B,GACEoB,IADF,EACU,IAAKC,CAAAA,MAAL,CAAYvB,CAAZ,CAAeC,KAAf,CAAsBU,MAAtB,CADV,CAIIV,MAAM3F,CAAAA,GAAIJ,CAAAA,MAAd,GACE,IAAKiE,CAAAA,MAAL,CAAY6B,CAAZ,CAAeC,KAAf,CAAsBU,MAAtB,CACA,CAAAW,IAAA,GAAS,CAAT,EAAc9F,CAAd,EAAmB,CAFrB,CAKIyE,MAAMgB,CAAAA,GAAI/G,CAAAA,MAAd,GACE,IAAKsH,CAAAA,MAAL,CAAYvB,KAAZ,CAAmBU,MAAnB,CACA,CAAAW,IAAA,GAAS,CAAT,EAAc9F,CAAd,EAAmB,CAFrB,CAKA,KAAKiB,CAAAA,KAAM6E,CAAAA,IAAX,CAAkBA,IAClB,OAAOX,OAzBM,CAtGsC,CAkIrDxC,MAAM,CAAC6B,CAAD,CAAIC,KAAJ,CAAWU,MAAX,CAAmB,CACjBc,KAAAA,CAASxB,KAAM3F,CAAAA,GADE,KAEjBwG,KAAO,IAAKrE,CAAAA,KAFK;MAGjBgE,KAAO,IAAKnB,CAAAA,KAHK,CAIjBkB,QAAU,IAAKjB,CAAAA,QACfY,EAAAA,CAASH,CAAEG,CAAAA,MALM,OAMjBe,KAAO,EACPH,OAAAA,CAAMJ,MAAOrG,CAAAA,GAPI,OAQjBR,EAAIgH,IAAK7F,CAAAA,IAAL,EAAJnB,CAAkB2H,KAAOvH,CAAAA,MARR,CASjBsB,EAAIiF,IAAKvG,CAAAA,MATQ,KAUnBiB,EAAI2F,IAAK7F,CAAAA,IAAL,EAKR6F,KAAKvF,CAAAA,MAAL,CAAYzB,CAAZ,CAAe0B,CAAf,CACAsF,KAAKxG,CAAAA,GAAL,CAASmH,KAAT,CAhBuB,OAiBjB1H,KAAO+G,IAAK/G,CAAAA,IAAL,EAjBU,CAkBjBE,KAAO6G,IAAK7G,CAAAA,IAAL,EAlBU,CAmBjBmB,IAAM0F,IAAK1F,CAAAA,GAAL,EAEZ,KAAKZ,IAAL,CAAS,CAAT,CAAYA,IAAZ,CAAgBgB,CAAhB,CAAmB,EAAEhB,IAArB,CAAwB,CACtB,IAAAyD,IAAMkC,CAAA,CAAO3F,IAAP,CAAUkG,CAAAA,KAChBpG,IAAA,CAAM4G,IAAA,CAAKjD,GAAL,CAAN,GAAoBiD,IAAA,CAAKjD,GAAL,CAApB,CAAgCuC,OAAA,CAAQvC,GAAR,CAAaE,CAAAA,MAAb,CAAoBgC,CAAA,CAAO3F,IAAP,CAApB,CAA+BiH,KAA/B,CAAuCtG,CAAvC,CAAhC,CACAsF,KAAA,CAAKjG,IAAL,CAAQ8B,CAAAA,KAAR,CAAchC,GAAd,CAAmBP,IAAnB,CAHsB,CAOxB,IAAA,CAAOoB,CAAP,CAAWrB,CAAX,CAAc,EAAEqB,CAAhB,CACElB,IAAA,CAAKkB,CAAL,CACA,CADUC,GACV,CAAIrB,IAAA,CAAKoB,CAAL,CAAJ,GAAgBC,GAAhB,EAAqB2F,MAAIpG,CAAAA,IAAJ,CAASQ,CAAT,CA9BA,CAlI4B,CAoKrDqG,MAAM,CAACvB,KAAD,CAAQU,MAAR,CAAgB,CACdI,MAAAA,CAAMJ,MAAOM,CAAAA,GADC,KAEdH,KAAO,IAAKrE,CAAAA,KAFE,OAGd1C;AAAO+G,IAAK/G,CAAAA,IAAL,EACPqB,KAAAA,CAAM0F,IAAK1F,CAAAA,GAAL,EACNqG,MAAAA,CAASxB,KAAMgB,CAAAA,GALD,KAMhB1G,CANgB,CAMbT,CANa,CAMVqB,CAELZ,EAAA,CAAI,CAAT,KAAYT,CAAZ,CAAgB2H,KAAOvH,CAAAA,MAAvB,CAA+BK,CAA/B,CAAmCT,CAAnC,CAAsC,EAAES,CAAxC,CACEY,CACA,CADIsG,KAAA,CAAOlH,CAAP,CAAUG,CAAAA,MACd,CAAIX,IAAA,CAAKoB,CAAL,CAAJ,GAAgBC,IAAhB,EAAqB2F,MAAIpG,CAAAA,IAAJ,CAASQ,CAAT,CAVH,CApK+B,CAkLrDP,MAAM,CAACoF,CAAD,CAAIC,KAAJ,CAAWU,MAAX,CAAmB,CACjBH,CAAAA,CAAU,IAAKjB,CAAAA,QADE,KAEjBuB,KAAO,IAAKrE,CAAAA,KAFK,OAGjB1C,KAAO+G,IAAK/G,CAAAA,IAAL,EAHU,CAIjBE,KAAO6G,IAAK7G,CAAAA,IAAL,EACPmB,KAAAA,CAAM0F,IAAK1F,CAAAA,GAAL,EALW,OAMjBN,IAAM,EACNiG,OAAAA,CAAMJ,MAAOK,CAAAA,GANnB,OAOMS,OAASxB,KAAMe,CAAAA,GARE,KASnBzG,CATmB,CAShBT,CATgB,CASbqB,CATa,CASVgC,CAER5C,EAAA,CAAI,CAAT,KAAYT,CAAZ,CAAgB2H,MAAOvH,CAAAA,MAAvB,CAA+BK,CAA/B,CAAmCT,CAAnC,CAAsC,EAAES,CAAxC,CACEY,CAKA,CALIsG,MAAA,CAAOlH,CAAP,CAAUG,CAAAA,MAKd,CAJAI,GAAA,CAAIK,CAAJ,CAIA,CAJS,CAIT,CAFAlB,IAAA,CAAKkB,CAAL,CAEA,CAFUgC,CAEV,CAFcpD,IAAA,CAAKoB,CAAL,CAEd,CADApB,IAAA,CAAKoB,CAAL,CACA,CADUC,IACV,CAAI+B,CAAJ,GAAU/B,IAAV,EAAe2F,MAAIpG,CAAAA,IAAJ,CAASQ,CAAT,CAIjB,KAAKA,CAAL,GAAUqF,EAAV,CACEA,CAAA,CAAQrF,CAAR,CAAWP,CAAAA,MAAX,CAAkBd,CAAlB,CAAqBgB,GAArB,CAGF,KAAKE,CAAAA,OAAL,CAAaiF,KAAb,CAAoBnG,CAApB,CAAuBgB,GAAvB,CACA,OAAOA,IA1BgB,CAlL4B,CAgNrDE,OAAO,CAACiF,KAAD;AAAQpF,GAAR,CAAaC,GAAb,CAAkB,CAAA,MACjB0F,QAAU,IAAKjB,CAAAA,QADE,CAEjBuB,KAAO,IAAKrE,CAAAA,KAClBwD,MAAMyB,CAAAA,QAAN,CAAe,EAAA,EAAM,CACnB,MAAMC,SAAWb,IAAKlG,CAAAA,MAAL,CAAYC,GAAZ,CAAiBC,GAAjB,CAEjB,KAAK,MAAMmD,GAAX,GAAkBuC,QAAlB,CAA2BA,OAAA,CAAQvC,GAAR,CAAajD,CAAAA,OAAb,CAAqB2G,QAArB,CAHR,CAArB,CAHuB,CAhN4B,CA0NrDJ,MAAM,CAACvB,CAAD,CAAIC,KAAJ,CAAWU,MAAX,CAAmB,CAAA,MACjBF,KAAO,IAAKnB,CAAAA,KADK,CAEjBtD,MAAQgE,CAAEhE,CAAAA,KACV4F,MAAAA,CAAQ3B,KAAM2B,CAAAA,KAFpB,OAGMpG,EAAIiF,IAAKvG,CAAAA,MAJQ,KAKnBoH,KAAO,CALY,CAMnB/G,CANmB,CAOnBsH,CAIJ,KAAKA,CAAL,CAFAlB,MAAOmB,CAAAA,OAEP,CAFiB,CAEjB,CAAYD,CAAZ,CAAgBrG,CAAhB,CAAmB,EAAEqG,CAArB,CACM7B,CAAEE,CAAAA,QAAF,CAAW,OAAX,CAAoB2B,CAApB,CAAJ,GACEtH,CACA,CADIsH,CACJ,CAAA,EAAEP,IAFJ,CAMF,IAAa,CAAb,GAAIA,IAAJ,CAEEA,IACA,CADOb,IAAA,CAAKlG,CAAL,CAAQc,CAAAA,GACf,CAAA,IAAK0G,CAAAA,YAAL,CAAkBtB,IAAA,CAAKlG,CAAL,CAAlB,CAA2ByB,KAAA,CAAMzB,CAAN,CAA3B,CAAqCoG,MAAOrG,CAAAA,GAA5C,CAAiDqG,MAAOK,CAAAA,GAAxD,CAHF,KAME,KAAYM,IAAZ,CAAKO,CAAL,CAAS,CAAT,CAAsBA,CAAtB,CAA0BrG,CAA1B,CAA6B,EAAEqG,CAA/B,CACO7B,CAAEE,CAAAA,QAAF,CAAW,OAAX,CAAoB2B,CAApB,CAAL,GACAP,IAEA,EAFQb,IAAA,CAAKoB,CAAL,CAAQxG,CAAAA,GAEhB;AADA,IAAK2G,CAAAA,YAAL,CAAkBvB,IAAA,CAAKoB,CAAL,CAAlB,CAA2B7F,KAAA,CAAM6F,CAAN,CAA3B,CAAqCD,KAArC,CAA4CjB,MAAOrG,CAAAA,GAAnD,CACA,CAAAqG,MAAOK,CAAAA,GAAP,CAAaL,MAAOrG,CAAAA,GAHpB,CAOJ,OAAOgH,KAhCgB,CA1N4B,CA6PrDU,YAAY,CAACxF,GAAD,CAAMR,KAAN,CAAa4F,KAAb,CAAoBb,GAApB,CAAyB,CAAA,IAC7BD,KAAO,IAAKrE,CAAAA,KADiB,OAE7B7C,KAAOkH,IAAKlH,CAAAA,IAAL,EAFsB,CAG7BG,KAAO+G,IAAK/G,CAAAA,IAAL,EACPE,KAAAA,CAAO6G,IAAK7G,CAAAA,IAAL,EAJsB,OAK7B8B,MAAQS,GAAIT,CAAAA,KAAJ,EALqB,KAM7BkG,IAAMzF,GAAIH,CAAAA,MAAJ,CAAWG,GAAIL,CAAAA,KAAf,CANuB,CAO7BA,MAAQK,GAAIH,CAAAA,MAAJ,CAAWL,KAAX,CAPqB,OAQ7BkG,IAAM/F,KAAA,CAAM,CAAN,CACNgG,MAAAA,CAAMhG,KAAA,CAAM,CAAN,CATuB,OAU7BiG,IAAMH,GAAA,CAAI,CAAJ,CACNI,IAAAA,CAAMJ,GAAA,CAAI,CAAJ,CAVZ,OAWM5G,IAAMmB,GAAInB,CAAAA,GAZmB,KAa/Bd,CAb+B,CAa5BC,CAb4B,CAazBW,CAEV,IAAI+G,GAAJ,CAAUE,GAAV,CACE,IAAK7H,CAAS,CAAL2H,GAAK,CAAA1H,CAAA,CAAIiB,IAAK6G,CAAAA,GAAL,CAASF,GAAT,CAAcD,KAAd,CAAlB,CAAsC5H,CAAtC,CAA0CC,CAA1C,CAA6C,EAAED,CAA/C,CACEY,CAQA,CARIY,KAAA,CAAMxB,CAAN,CAQJ,CANIX,IAAA,CAAKuB,CAAL,CAMJ,GANgByG,KAMhB,GALE3H,IAAA,CAAKkB,CAAL,CAEA,CAFUpB,IAAA,CAAKoB,CAAL,CAEV,CADAvB,IAAA,CAAKuB,CAAL,CACA,CADUyG,KACV,CAAAb,GAAIpG,CAAAA,IAAJ,CAASQ,CAAT,CAGF,EAAApB,IAAA,CAAKoB,CAAL,CAAA,EAAWE,GAVf;IAYO,IAAI6G,GAAJ,CAAUE,GAAV,CACL,IAAK7H,CAAS,CAAL6H,GAAK,CAAA5H,CAAA,CAAIiB,IAAK6G,CAAAA,GAAL,CAASJ,GAAT,CAAcG,GAAd,CAAlB,CAAsC9H,CAAtC,CAA0CC,CAA1C,CAA6C,EAAED,CAA/C,CACEY,CAQA,CARIY,KAAA,CAAMxB,CAAN,CAQJ,CANIX,IAAA,CAAKuB,CAAL,CAMJ,GANgByG,KAMhB,GALE3H,IAAA,CAAKkB,CAAL,CAEA,CAFUpB,IAAA,CAAKoB,CAAL,CAEV,CADAvB,IAAA,CAAKuB,CAAL,CACA,CADUyG,KACV,CAAAb,GAAIpG,CAAAA,IAAJ,CAASQ,CAAT,CAGF,EAAApB,IAAA,CAAKoB,CAAL,CAAA,EAAWE,GAKf,IAAI8G,KAAJ,CAAUE,GAAV,CACE,IAAK9H,CAAwB,CAApBkB,IAAKC,CAAAA,GAAL,CAASwG,GAAT,CAAcG,GAAd,CAAoB,CAAA7H,CAAA,CAAI2H,KAAjC,CAAsC5H,CAAtC,CAA0CC,CAA1C,CAA6C,EAAED,CAA/C,CACEY,CAQA,CARIY,KAAA,CAAMxB,CAAN,CAQJ,CANIX,IAAA,CAAKuB,CAAL,CAMJ,GANgByG,KAMhB,GALE3H,IAAA,CAAKkB,CAAL,CAEA,CAFUpB,IAAA,CAAKoB,CAAL,CAEV,CADAvB,IAAA,CAAKuB,CAAL,CACA,CADUyG,KACV,CAAAb,GAAIpG,CAAAA,IAAJ,CAASQ,CAAT,CAGF,EAAApB,IAAA,CAAKoB,CAAL,CAAA,EAAWE,GAVf,KAYO,IAAI8G,KAAJ,CAAUE,GAAV,CACL,IAAK9H,CAAwB,CAApBkB,IAAKC,CAAAA,GAAL,CAAS0G,GAAT,CAAcD,KAAd,CAAoB,CAAA3H,CAAA,CAAI6H,GAAjC,CAAsC9H,CAAtC,CAA0CC,CAA1C,CAA6C,EAAED,CAA/C,CACEY,CAQA,CARIY,KAAA,CAAMxB,CAAN,CAQJ,CANIX,IAAA,CAAKuB,CAAL,CAMJ,GANgByG,KAMhB,GALE3H,IAAA,CAAKkB,CAAL,CAEA,CAFUpB,IAAA,CAAKoB,CAAL,CAEV,CADAvB,IAAA,CAAKuB,CAAL,CACA,CADUyG,KACV,CAAAb,GAAIpG,CAAAA,IAAJ,CAASQ,CAAT,CAGF,EAAApB,IAAA,CAAKoB,CAAL,CAAA,EAAWE,GAIfmB,IAAIL,CAAAA,KAAJ,CAAYH,KAAMI,CAAAA,KAAN,EApEuB,CA7PgB,CAoUrD2F,YAAY,CAACvF,GAAD,CAAMR,KAAN,CAAa1B,GAAb,CAAkB0G,GAAlB,CAAuB,CAAA,MAE3BjH,KADO,IAAK0C,CAAAA,KACA1C,CAAAA,IAAL,EAFoB;AAG3BgC,MAAQS,GAAIT,CAAAA,KAAJ,EAHmB,KAI3BkG,IAAMzF,GAAIH,CAAAA,MAAJ,CAAWG,GAAIL,CAAAA,KAAf,CAJqB,CAK3BA,MAAQK,GAAIH,CAAAA,MAAJ,CAAWL,KAAX,CALmB,OAM3BkG,IAAM/F,KAAA,CAAM,CAAN,CACNgG,MAAAA,CAAMhG,KAAA,CAAM,CAAN,CAPqB,OAQ3BiG,IAAMH,GAAA,CAAI,CAAJ,CACNI,IAAAA,CAAMJ,GAAA,CAAI,CAAJ,CARZ,OASM5G,IAAMmB,GAAInB,CAAAA,GAViB,KAW7Bd,CAX6B,CAW1BC,CAX0B,CAWvBW,CAEV,IAAI+G,GAAJ,CAAUE,GAAV,CACE,IAAK7H,CAAS,CAAL2H,GAAK,CAAA1H,CAAA,CAAIiB,IAAK6G,CAAAA,GAAL,CAASF,GAAT,CAAcD,KAAd,CAAlB,CAAsC5H,CAAtC,CAA0CC,CAA1C,CAA6C,EAAED,CAA/C,CACEY,CAEA,CAFIY,KAAA,CAAMxB,CAAN,CAEJ,CADAR,IAAA,CAAKoB,CAAL,CACA,EADWE,GACX,CAAAf,GAAIK,CAAAA,IAAJ,CAASQ,CAAT,CAJJ,KAMO,IAAI+G,GAAJ,CAAUE,GAAV,CACL,IAAK7H,CAAS,CAAL6H,GAAK,CAAA5H,CAAA,CAAIiB,IAAK6G,CAAAA,GAAL,CAASJ,GAAT,CAAcG,GAAd,CAAlB,CAAsC9H,CAAtC,CAA0CC,CAA1C,CAA6C,EAAED,CAA/C,CACEY,CAEA,CAFIY,KAAA,CAAMxB,CAAN,CAEJ,CADAR,IAAA,CAAKoB,CAAL,CACA,EADWE,GACX,CAAA2F,GAAIrG,CAAAA,IAAJ,CAASQ,CAAT,CAKJ,IAAIgH,KAAJ,CAAUE,GAAV,CACE,IAAK9H,CAAwB,CAApBkB,IAAKC,CAAAA,GAAL,CAASwG,GAAT,CAAcG,GAAd,CAAoB,CAAA7H,CAAA,CAAI2H,KAAjC,CAAsC5H,CAAtC,CAA0CC,CAA1C,CAA6C,EAAED,CAA/C,CACEY,CAEA,CAFIY,KAAA,CAAMxB,CAAN,CAEJ,CADAR,IAAA,CAAKoB,CAAL,CACA,EADWE,GACX,CAAAf,GAAIK,CAAAA,IAAJ,CAASQ,CAAT,CAJJ,KAMO,IAAIgH,KAAJ,CAAUE,GAAV,CACL,IAAK9H,CAAwB,CAApBkB,IAAKC,CAAAA,GAAL,CAAS0G,GAAT,CAAcD,KAAd,CAAoB,CAAA3H,CAAA,CAAI6H,GAAjC,CAAsC9H,CAAtC,CAA0CC,CAA1C,CAA6C,EAAED,CAA/C,CACEY,CAEA,CAFIY,KAAA,CAAMxB,CAAN,CAEJ,CADAR,IAAA,CAAKoB,CAAL,CACA;AADWE,GACX,CAAA2F,GAAIrG,CAAAA,IAAJ,CAASQ,CAAT,CAIJqB,IAAIL,CAAAA,KAAJ,CAAYH,KAAMI,CAAAA,KAAN,EA1CqB,CApUkB,CAAvD,CAgYAoD,cAAcK,CAAAA,UAAd,CAA2B,CACzB,KAAQ,eADiB,CAEzB,SAAY,EAFa,CAGzB,OAAU,CAAC,CACT,KAAQ,QADC,CAET,KAAQ,QAFC,CAGT,SAAY,CAAA,CAHH,CAIT,YAAe,gDAJN,CAAD,CAKP,CACD,KAAQ,QADP,CAED,KAAQ,QAFP,CAGD,SAAY,CAAA,CAHX,CAID,YAAe,wDAJd,CALO,CAHe,CAe3BrG,SAASsG,CAAAA,QAAT,CAAkBN,aAAlB,CAAiCjG,YAAa8F,CAAAA,SAA9C,CAAyD,CACvDU,SAAS,CAACC,CAAD,CAAIC,KAAJ,CAAW,CAAA,MACZsC,OAAS,EAAEvC,CAAEuC,CAAAA,MAAJ,EAAc,CAAd,CAEfC,EAAAA,CAASxC,CAAEyC,CAAAA,MAFX,OAGMnB,KAAOkB,CAAOlB,CAAAA,IAEpB,IAAwB,CAAxB,IAAKA,IAAL,CAAYiB,MAAZ,EAA2B,MAAOtC,MAAMyC,CAAAA,eAElC/B;KAAAA,CAASV,KAAMY,CAAAA,IAAN,CAAWZ,KAAM0C,CAAAA,GAAjB,CARG,OASZhJ,KAAO6I,CAAO7I,CAAAA,IAAP,EATK,CAUZI,KAAOyI,CAAOzI,CAAAA,IAAP,EAVK,CAWZE,KAAOuI,CAAOvI,CAAAA,IAAP,EAXK,CAYZ2I,KAAOzH,CAAAyH,EAAO7I,IAAA,CAAKoB,CAAL,CAAF,CAAYoH,MAAZ,CAAgC,IAAhC,CAAsB5I,IAAA,CAAKwB,CAAL,CAGxCwF,MAAO8B,CAAAA,MAAP,CAAc9B,KAAOkC,CAAAA,GAArB,CAA0BD,IAA1B,CAIMtB,KAAN,CAAaA,IAAb,CAAoB,CAApB,EAMEX,KAAO8B,CAAAA,MAAP,CAAc9B,KAAOmC,CAAAA,GAArB,CAA0B3H,CAAA,EAAK,CAAA,MACvB4H,EAAIhJ,IAAA,CAAKoB,CAAL,CAAJ4H,CAAcR,MAEpB,OADU,CAACQ,CACJ,EADSA,CACT,CADa9I,IAAA,CAAKkB,CAAL,CACb,CADuBoH,MACvB,CAAI5I,IAAA,CAAKwB,CAAL,CAAJ,CAAc,IAHQ,CAA/B,CAKA,CAAAwF,KAAO8B,CAAAA,MAAP,CAAc9B,KAAOqC,CAAAA,GAArB,CAA0B7H,CAAA,EAAK,CAAA,MACvB4H,EAAIhJ,IAAA,CAAKoB,CAAL,CAAJ4H,CAAcR,MAEpB,OADUQ,CAAAA,CACH,EADUA,CACV,CADeA,CACf,CADmB9I,IAAA,CAAKkB,CAAL,CACnB,CAD6BoH,MAC7B,CAAc,IAAd,CAAI5I,IAAA,CAAKwB,CAAL,CAHkB,CAA/B,CAXF,GAEEwF,KAAO8B,CAAAA,MAAP,CAAc9B,KAAOmC,CAAAA,GAArB,CAA0BF,IAA1B,CACA,CAAAjC,KAAO8B,CAAAA,MAAP,CAAc9B,KAAOqC,CAAAA,GAArB,CAA0B7H,CAAA,EAAK,CAACpB,IAAA,CAAKoB,CAAL,CAAD,CAAWoH,MAAX,IAAuBjB,IAAvB,CAA8B3H,IAAA,CAAKwB,CAAL,CAA9B,CAAwC,IAAvE,CAHF,CAmBA,OAAOwF,MAAO8B,CAAAA,MAAP,CAAc9B,KAAOsC,CAAAA,MAArB,CAA6BxI,CAAA,EAAKmI,IAAA,CAAKnI,CAAEC,CAAAA,MAAP,CAAlC,CAtCW,CADmC,CAAzD,CA4CA3B,QAAQmK,CAAAA,WAAR;AAAsB/D,WACtBpG,QAAQoK,CAAAA,aAAR,CAAwB3D,aAExB4D,OAAOC,CAAAA,cAAP,CAAsBtK,OAAtB,CAA+B,YAA/B,CAA6C,CAAE0D,MAAO,CAAA,CAAT,CAA7C,CAxyBmD,CAJrD,CADwH;",
"sources":["node_modules/vega-crossfilter/build/vega-crossfilter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_crossfilter$build$vega_crossfilter\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-dataflow'), require('vega-util')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-dataflow', 'vega-util'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.vega = global.vega || {}, global.vega.transforms = {}), global.vega, global.vega));\n})(this, (function (exports, vegaDataflow, vegaUtil) { 'use strict';\n\n  const array8 = n => new Uint8Array(n);\n  const array16 = n => new Uint16Array(n);\n  const array32 = n => new Uint32Array(n);\n\n  /**\n   * Maintains CrossFilter state.\n   */\n\n  function Bitmaps() {\n    let width = 8,\n        data = [],\n        seen = array32(0),\n        curr = array(0, width),\n        prev = array(0, width);\n    return {\n      data: () => data,\n      seen: () => seen = lengthen(seen, data.length),\n\n      add(array) {\n        for (let i = 0, j = data.length, n = array.length, t; i < n; ++i) {\n          t = array[i];\n          t._index = j++;\n          data.push(t);\n        }\n      },\n\n      remove(num, map) {\n        // map: index -> boolean (true => remove)\n        const n = data.length,\n              copy = Array(n - num),\n              reindex = data; // reuse old data array for index map\n\n        let t, i, j; // seek forward to first removal\n\n        for (i = 0; !map[i] && i < n; ++i) {\n          copy[i] = data[i];\n          reindex[i] = i;\n        } // condense arrays\n\n\n        for (j = i; i < n; ++i) {\n          t = data[i];\n\n          if (!map[i]) {\n            reindex[i] = j;\n            curr[j] = curr[i];\n            prev[j] = prev[i];\n            copy[j] = t;\n            t._index = j++;\n          } else {\n            reindex[i] = -1;\n          }\n\n          curr[i] = 0; // clear unused bits\n        }\n\n        data = copy;\n        return reindex;\n      },\n\n      size: () => data.length,\n      curr: () => curr,\n      prev: () => prev,\n      reset: k => prev[k] = curr[k],\n      all: () => width < 0x101 ? 0xff : width < 0x10001 ? 0xffff : 0xffffffff,\n\n      set(k, one) {\n        curr[k] |= one;\n      },\n\n      clear(k, one) {\n        curr[k] &= ~one;\n      },\n\n      resize(n, m) {\n        const k = curr.length;\n\n        if (n > k || m > width) {\n          width = Math.max(m, width);\n          curr = array(n, width, curr);\n          prev = array(n, width);\n        }\n      }\n\n    };\n  }\n\n  function lengthen(array, length, copy) {\n    if (array.length >= length) return array;\n    copy = copy || new array.constructor(length);\n    copy.set(array);\n    return copy;\n  }\n\n  function array(n, m, array) {\n    const copy = (m < 0x101 ? array8 : m < 0x10001 ? array16 : array32)(n);\n    if (array) copy.set(array);\n    return copy;\n  }\n\n  function Dimension (index, i, query) {\n    const bit = 1 << i;\n    return {\n      one: bit,\n      zero: ~bit,\n      range: query.slice(),\n      bisect: index.bisect,\n      index: index.index,\n      size: index.size,\n\n      onAdd(added, curr) {\n        const dim = this,\n              range = dim.bisect(dim.range, added.value),\n              idx = added.index,\n              lo = range[0],\n              hi = range[1],\n              n1 = idx.length;\n        let i;\n\n        for (i = 0; i < lo; ++i) curr[idx[i]] |= bit;\n\n        for (i = hi; i < n1; ++i) curr[idx[i]] |= bit;\n\n        return dim;\n      }\n\n    };\n  }\n\n  function ascending(a, b) {\n    return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n  }\n\n  function bisector(f) {\n    let delta = f;\n    let compare1 = f;\n    let compare2 = f;\n\n    if (f.length !== 2) {\n      delta = (d, x) => f(d) - x;\n\n      compare1 = ascending;\n\n      compare2 = (d, x) => ascending(f(d), x);\n    }\n\n    function left(a, x, lo = 0, hi = a.length) {\n      if (lo < hi) {\n        if (compare1(x, x) !== 0) return hi;\n\n        do {\n          const mid = lo + hi >>> 1;\n          if (compare2(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n        } while (lo < hi);\n      }\n\n      return lo;\n    }\n\n    function right(a, x, lo = 0, hi = a.length) {\n      if (lo < hi) {\n        if (compare1(x, x) !== 0) return hi;\n\n        do {\n          const mid = lo + hi >>> 1;\n          if (compare2(a[mid], x) <= 0) lo = mid + 1;else hi = mid;\n        } while (lo < hi);\n      }\n\n      return lo;\n    }\n\n    function center(a, x, lo = 0, hi = a.length) {\n      const i = left(a, x, lo, hi - 1);\n      return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n    }\n\n    return {\n      left,\n      center,\n      right\n    };\n  }\n\n  function number(x) {\n    return x === null ? NaN : +x;\n  }\n\n  const ascendingBisect = bisector(ascending);\n  const bisectRight = ascendingBisect.right;\n  const bisectLeft = ascendingBisect.left;\n  bisector(number).center;\n\n  function permute(source, keys) {\n    return Array.from(keys, key => source[key]);\n  }\n\n  /**\n   * Maintains a list of values, sorted by key.\n   */\n\n  function SortedIndex() {\n    let index = array32(0),\n        value = [],\n        size = 0;\n\n    function insert(key, data, base) {\n      if (!data.length) return [];\n      const n0 = size,\n            n1 = data.length,\n            addi = array32(n1);\n      let addv = Array(n1),\n          oldv,\n          oldi,\n          i;\n\n      for (i = 0; i < n1; ++i) {\n        addv[i] = key(data[i]);\n        addi[i] = i;\n      }\n\n      addv = sort(addv, addi);\n\n      if (n0) {\n        oldv = value;\n        oldi = index;\n        value = Array(n0 + n1);\n        index = array32(n0 + n1);\n        merge(base, oldv, oldi, n0, addv, addi, n1, value, index);\n      } else {\n        if (base > 0) for (i = 0; i < n1; ++i) {\n          addi[i] += base;\n        }\n        value = addv;\n        index = addi;\n      }\n\n      size = n0 + n1;\n      return {\n        index: addi,\n        value: addv\n      };\n    }\n\n    function remove(num, map) {\n      // map: index -> remove\n      const n = size;\n      let idx, i, j; // seek forward to first removal\n\n      for (i = 0; !map[index[i]] && i < n; ++i); // condense index and value arrays\n\n\n      for (j = i; i < n; ++i) {\n        if (!map[idx = index[i]]) {\n          index[j] = idx;\n          value[j] = value[i];\n          ++j;\n        }\n      }\n\n      size = n - num;\n    }\n\n    function reindex(map) {\n      for (let i = 0, n = size; i < n; ++i) {\n        index[i] = map[index[i]];\n      }\n    }\n\n    function bisect(range, array) {\n      let n;\n\n      if (array) {\n        n = array.length;\n      } else {\n        array = value;\n        n = size;\n      }\n\n      return [bisectLeft(array, range[0], 0, n), bisectRight(array, range[1], 0, n)];\n    }\n\n    return {\n      insert: insert,\n      remove: remove,\n      bisect: bisect,\n      reindex: reindex,\n      index: () => index,\n      size: () => size\n    };\n  }\n\n  function sort(values, index) {\n    values.sort.call(index, (a, b) => {\n      const x = values[a],\n            y = values[b];\n      return x < y ? -1 : x > y ? 1 : 0;\n    });\n    return permute(values, index);\n  }\n\n  function merge(base, value0, index0, n0, value1, index1, n1, value, index) {\n    let i0 = 0,\n        i1 = 0,\n        i;\n\n    for (i = 0; i0 < n0 && i1 < n1; ++i) {\n      if (value0[i0] < value1[i1]) {\n        value[i] = value0[i0];\n        index[i] = index0[i0++];\n      } else {\n        value[i] = value1[i1];\n        index[i] = index1[i1++] + base;\n      }\n    }\n\n    for (; i0 < n0; ++i0, ++i) {\n      value[i] = value0[i0];\n      index[i] = index0[i0];\n    }\n\n    for (; i1 < n1; ++i1, ++i) {\n      value[i] = value1[i1];\n      index[i] = index1[i1] + base;\n    }\n  }\n\n  /**\n   * An indexed multi-dimensional filter.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} params.fields - An array of dimension accessors to filter.\n   * @param {Array} params.query - An array of per-dimension range queries.\n   */\n\n  function CrossFilter(params) {\n    vegaDataflow.Transform.call(this, Bitmaps(), params);\n    this._indices = null;\n    this._dims = null;\n  }\n  CrossFilter.Definition = {\n    'type': 'CrossFilter',\n    'metadata': {},\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true\n    }, {\n      'name': 'query',\n      'type': 'array',\n      'array': true,\n      'required': true,\n      'content': {\n        'type': 'number',\n        'array': true,\n        'length': 2\n      }\n    }]\n  };\n  vegaUtil.inherits(CrossFilter, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (!this._dims) {\n        return this.init(_, pulse);\n      } else {\n        var init = _.modified('fields') || _.fields.some(f => pulse.modified(f.fields));\n\n        return init ? this.reinit(_, pulse) : this.eval(_, pulse);\n      }\n    },\n\n    init(_, pulse) {\n      const fields = _.fields,\n            query = _.query,\n            indices = this._indices = {},\n            dims = this._dims = [],\n            m = query.length;\n      let i = 0,\n          key,\n          index; // instantiate indices and dimensions\n\n      for (; i < m; ++i) {\n        key = fields[i].fname;\n        index = indices[key] || (indices[key] = SortedIndex());\n        dims.push(Dimension(index, i, query[i]));\n      }\n\n      return this.eval(_, pulse);\n    },\n\n    reinit(_, pulse) {\n      const output = pulse.materialize().fork(),\n            fields = _.fields,\n            query = _.query,\n            indices = this._indices,\n            dims = this._dims,\n            bits = this.value,\n            curr = bits.curr(),\n            prev = bits.prev(),\n            all = bits.all(),\n            out = output.rem = output.add,\n            mod = output.mod,\n            m = query.length,\n            adds = {};\n      let add, index, key, mods, remMap, modMap, i, n, f; // set prev to current state\n\n      prev.set(curr); // if pulse has remove tuples, process them first\n\n      if (pulse.rem.length) {\n        remMap = this.remove(_, pulse, output);\n      } // if pulse has added tuples, add them to state\n\n\n      if (pulse.add.length) {\n        bits.add(pulse.add);\n      } // if pulse has modified tuples, create an index map\n\n\n      if (pulse.mod.length) {\n        modMap = {};\n\n        for (mods = pulse.mod, i = 0, n = mods.length; i < n; ++i) {\n          modMap[mods[i]._index] = 1;\n        }\n      } // re-initialize indices as needed, update curr bitmap\n\n\n      for (i = 0; i < m; ++i) {\n        f = fields[i];\n\n        if (!dims[i] || _.modified('fields', i) || pulse.modified(f.fields)) {\n          key = f.fname;\n\n          if (!(add = adds[key])) {\n            indices[key] = index = SortedIndex();\n            adds[key] = add = index.insert(f, pulse.source, 0);\n          }\n\n          dims[i] = Dimension(index, i, query[i]).onAdd(add, curr);\n        }\n      } // visit each tuple\n      // if filter state changed, push index to add/rem\n      // else if in mod and passes a filter, push index to mod\n\n\n      for (i = 0, n = bits.data().length; i < n; ++i) {\n        if (remMap[i]) {\n          // skip if removed tuple\n          continue;\n        } else if (prev[i] !== curr[i]) {\n          // add if state changed\n          out.push(i);\n        } else if (modMap[i] && curr[i] !== all) {\n          // otherwise, pass mods through\n          mod.push(i);\n        }\n      }\n\n      bits.mask = (1 << m) - 1;\n      return output;\n    },\n\n    eval(_, pulse) {\n      const output = pulse.materialize().fork(),\n            m = this._dims.length;\n      let mask = 0;\n\n      if (pulse.rem.length) {\n        this.remove(_, pulse, output);\n        mask |= (1 << m) - 1;\n      }\n\n      if (_.modified('query') && !_.modified('fields')) {\n        mask |= this.update(_, pulse, output);\n      }\n\n      if (pulse.add.length) {\n        this.insert(_, pulse, output);\n        mask |= (1 << m) - 1;\n      }\n\n      if (pulse.mod.length) {\n        this.modify(pulse, output);\n        mask |= (1 << m) - 1;\n      }\n\n      this.value.mask = mask;\n      return output;\n    },\n\n    insert(_, pulse, output) {\n      const tuples = pulse.add,\n            bits = this.value,\n            dims = this._dims,\n            indices = this._indices,\n            fields = _.fields,\n            adds = {},\n            out = output.add,\n            n = bits.size() + tuples.length,\n            m = dims.length;\n      let k = bits.size(),\n          j,\n          key,\n          add; // resize bitmaps and add tuples as needed\n\n      bits.resize(n, m);\n      bits.add(tuples);\n      const curr = bits.curr(),\n            prev = bits.prev(),\n            all = bits.all(); // add to dimensional indices\n\n      for (j = 0; j < m; ++j) {\n        key = fields[j].fname;\n        add = adds[key] || (adds[key] = indices[key].insert(fields[j], tuples, k));\n        dims[j].onAdd(add, curr);\n      } // set previous filters, output if passes at least one filter\n\n\n      for (; k < n; ++k) {\n        prev[k] = all;\n        if (curr[k] !== all) out.push(k);\n      }\n    },\n\n    modify(pulse, output) {\n      const out = output.mod,\n            bits = this.value,\n            curr = bits.curr(),\n            all = bits.all(),\n            tuples = pulse.mod;\n      let i, n, k;\n\n      for (i = 0, n = tuples.length; i < n; ++i) {\n        k = tuples[i]._index;\n        if (curr[k] !== all) out.push(k);\n      }\n    },\n\n    remove(_, pulse, output) {\n      const indices = this._indices,\n            bits = this.value,\n            curr = bits.curr(),\n            prev = bits.prev(),\n            all = bits.all(),\n            map = {},\n            out = output.rem,\n            tuples = pulse.rem;\n      let i, n, k, f; // process tuples, output if passes at least one filter\n\n      for (i = 0, n = tuples.length; i < n; ++i) {\n        k = tuples[i]._index;\n        map[k] = 1; // build index map\n\n        prev[k] = f = curr[k];\n        curr[k] = all;\n        if (f !== all) out.push(k);\n      } // remove from dimensional indices\n\n\n      for (k in indices) {\n        indices[k].remove(n, map);\n      }\n\n      this.reindex(pulse, n, map);\n      return map;\n    },\n\n    // reindex filters and indices after propagation completes\n    reindex(pulse, num, map) {\n      const indices = this._indices,\n            bits = this.value;\n      pulse.runAfter(() => {\n        const indexMap = bits.remove(num, map);\n\n        for (const key in indices) indices[key].reindex(indexMap);\n      });\n    },\n\n    update(_, pulse, output) {\n      const dims = this._dims,\n            query = _.query,\n            stamp = pulse.stamp,\n            m = dims.length;\n      let mask = 0,\n          i,\n          q; // survey how many queries have changed\n\n      output.filters = 0;\n\n      for (q = 0; q < m; ++q) {\n        if (_.modified('query', q)) {\n          i = q;\n          ++mask;\n        }\n      }\n\n      if (mask === 1) {\n        // only one query changed, use more efficient update\n        mask = dims[i].one;\n        this.incrementOne(dims[i], query[i], output.add, output.rem);\n      } else {\n        // multiple queries changed, perform full record keeping\n        for (q = 0, mask = 0; q < m; ++q) {\n          if (!_.modified('query', q)) continue;\n          mask |= dims[q].one;\n          this.incrementAll(dims[q], query[q], stamp, output.add);\n          output.rem = output.add; // duplicate add/rem for downstream resolve\n        }\n      }\n\n      return mask;\n    },\n\n    incrementAll(dim, query, stamp, out) {\n      const bits = this.value,\n            seen = bits.seen(),\n            curr = bits.curr(),\n            prev = bits.prev(),\n            index = dim.index(),\n            old = dim.bisect(dim.range),\n            range = dim.bisect(query),\n            lo1 = range[0],\n            hi1 = range[1],\n            lo0 = old[0],\n            hi0 = old[1],\n            one = dim.one;\n      let i, j, k; // Fast incremental update based on previous lo index.\n\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          k = index[i];\n\n          if (seen[k] !== stamp) {\n            prev[k] = curr[k];\n            seen[k] = stamp;\n            out.push(k);\n          }\n\n          curr[k] ^= one;\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          k = index[i];\n\n          if (seen[k] !== stamp) {\n            prev[k] = curr[k];\n            seen[k] = stamp;\n            out.push(k);\n          }\n\n          curr[k] ^= one;\n        }\n      } // Fast incremental update based on previous hi index.\n\n\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          k = index[i];\n\n          if (seen[k] !== stamp) {\n            prev[k] = curr[k];\n            seen[k] = stamp;\n            out.push(k);\n          }\n\n          curr[k] ^= one;\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          k = index[i];\n\n          if (seen[k] !== stamp) {\n            prev[k] = curr[k];\n            seen[k] = stamp;\n            out.push(k);\n          }\n\n          curr[k] ^= one;\n        }\n      }\n\n      dim.range = query.slice();\n    },\n\n    incrementOne(dim, query, add, rem) {\n      const bits = this.value,\n            curr = bits.curr(),\n            index = dim.index(),\n            old = dim.bisect(dim.range),\n            range = dim.bisect(query),\n            lo1 = range[0],\n            hi1 = range[1],\n            lo0 = old[0],\n            hi0 = old[1],\n            one = dim.one;\n      let i, j, k; // Fast incremental update based on previous lo index.\n\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          k = index[i];\n          curr[k] ^= one;\n          add.push(k);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          k = index[i];\n          curr[k] ^= one;\n          rem.push(k);\n        }\n      } // Fast incremental update based on previous hi index.\n\n\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          k = index[i];\n          curr[k] ^= one;\n          add.push(k);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          k = index[i];\n          curr[k] ^= one;\n          rem.push(k);\n        }\n      }\n\n      dim.range = query.slice();\n    }\n\n  });\n\n  /**\n   * Selectively filters tuples by resolving against a filter bitmap.\n   * Useful for processing the output of a cross-filter transform.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.ignore - A bit mask indicating which filters to ignore.\n   * @param {object} params.filter - The per-tuple filter bitmaps. Typically this\n   *   parameter value is a reference to a {@link CrossFilter} transform.\n   */\n\n  function ResolveFilter(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  ResolveFilter.Definition = {\n    'type': 'ResolveFilter',\n    'metadata': {},\n    'params': [{\n      'name': 'ignore',\n      'type': 'number',\n      'required': true,\n      'description': 'A bit mask indicating which filters to ignore.'\n    }, {\n      'name': 'filter',\n      'type': 'object',\n      'required': true,\n      'description': 'Per-tuple filter bitmaps from a CrossFilter transform.'\n    }]\n  };\n  vegaUtil.inherits(ResolveFilter, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const ignore = ~(_.ignore || 0),\n            // bit mask where zeros -> dims to ignore\n      bitmap = _.filter,\n            mask = bitmap.mask; // exit early if no relevant filter changes\n\n      if ((mask & ignore) === 0) return pulse.StopPropagation;\n\n      const output = pulse.fork(pulse.ALL),\n            data = bitmap.data(),\n            curr = bitmap.curr(),\n            prev = bitmap.prev(),\n            pass = k => !(curr[k] & ignore) ? data[k] : null; // propagate all mod tuples that pass the filter\n\n\n      output.filter(output.MOD, pass); // determine add & rem tuples via filter functions\n      // for efficiency, we do *not* populate new arrays,\n      // instead we add filter functions applied downstream\n\n      if (!(mask & mask - 1)) {\n        // only one filter changed\n        output.filter(output.ADD, pass);\n        output.filter(output.REM, k => (curr[k] & ignore) === mask ? data[k] : null);\n      } else {\n        // multiple filters changed\n        output.filter(output.ADD, k => {\n          const c = curr[k] & ignore,\n                f = !c && c ^ prev[k] & ignore;\n          return f ? data[k] : null;\n        });\n        output.filter(output.REM, k => {\n          const c = curr[k] & ignore,\n                f = c && !(c ^ (c ^ prev[k] & ignore));\n          return f ? data[k] : null;\n        });\n      } // add filter to source data in case of reflow...\n\n\n      return output.filter(output.SOURCE, t => pass(t._index));\n    }\n\n  });\n\n  exports.crossfilter = CrossFilter;\n  exports.resolvefilter = ResolveFilter;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","transforms","vegaDataflow","vegaUtil","Bitmaps","width","data","seen","Uint32Array","n","curr","array","prev","length","copy","constructor","set","add","i","j","t","_index","push","remove","num","map","Array","reindex","size","reset","k","all","one","clear","resize","m","Math","max","array8","array16","array32","Dimension","index","query","bit","zero","range","slice","bisect","onAdd","added","dim","value","idx","lo","hi","n1","ascending","a","b","NaN","bisector","f","left","x","compare1","mid","compare2","delta","d","center","right","permute","source","keys","from","key","SortedIndex","insert","base","n0","addi","addv","sort","oldv","oldi","i0","i1","value1","bisectLeft","bisectRight","values","call","y","CrossFilter","params","Transform","_dims","_indices","ResolveFilter","Uint8Array","Uint16Array","ascendingBisect","number","Definition","inherits","transform","_","pulse","modified","fields","some","reinit","eval","init","indices","dims","fname","output","materialize","fork","bits","out","rem","mod","adds","remMap","modMap","mods","mask","update","modify","tuples","runAfter","indexMap","stamp","q","filters","incrementOne","incrementAll","old","lo1","hi1","lo0","hi0","min","ignore","bitmap","filter","StopPropagation","ALL","pass","MOD","ADD","c","REM","SOURCE","crossfilter","resolvefilter","Object","defineProperty"]
}
