{"version":3,"sources":["spyscope/core.cljc"],"mappings":"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","names":["spyscope.core/indent","n","string","indent","clojure.string.join","cljs.core.repeat","clojure.string.split","cljs.core.map","cljs.core.partial","cljs.core/str","spyscope.core/pretty-render-value","form","meta","now","cljs-time.core/now","nses-regex","or__5045__auto__","frames-base","cljs.core.ex_info","clojure.string/split-lines","cljs.core.drop","p1__68172#","cljs.core.drop_while","clojure.string/includes?","p1__68173#","clojure.string/replace","frames","cljs.core.filter","cljs.core.comp","cljs.core/re-find","p1__68175#","cljs.core.remove","p1__68176#","cljs.core.take","cljs.core/reverse","value-string","multi-trace?","prefix","temp__5804__auto__","time?","cljs-time.format/unparse","cljs_time.format.formatter","cljs-time.format/formatters","marker","cljs.core/contains?","cljs.core.pr_str","cljs.core/first","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","spyscope.core/console-log","spyscope.core/print-log","spyscope.core/trace-storage","cljs.core.atom","cljs.core/vec","cljs.core.apply","cljs.core/array-map","spyscope.core/trace","cljs.core.assoc","cljs.core/meta","spyscope.core/print-log-detailed","m","print","cljs.core/with-meta","spyscope.core/tap"],"sourcesContent":["(ns spyscope.core\n  (:require [clojure.string :as str]\n            #?(:clj  [clj-time.core :as time]\n               :cljs [cljs-time.core :as time])\n            #?(:clj  [clj-time.format :as fmt]\n               :cljs [cljs-time.format :as fmt])\n            #?(:clj [puget.printer :as pp]))\n  #?(:clj  (:require [net.cgrand.macrovich :as macrovich])\n     :cljs (:require-macros [net.cgrand.macrovich :as macrovich])))\n\n(defn- indent\n  \"Indents a string with `n` spaces.\"\n  [n string]\n  (let [indent (str/join (repeat n \" \"))]\n    (->> (str/split string #\"\\n\")\n         (map (partial str indent))\n         (str/join \"\\n\"))))\n\n(defn pretty-render-value\n  \"Prints out a form and some extra info for tracing/debugging.\n\n  Prints the last `n` stack frames\"\n  [form meta]\n  (let [now                  (time/now)\n        nses-regex           (:nses meta)\n        n                    (or (:fs meta) 1)\n\n        frames-base #?(:clj  (->> (ex-info \"\" {})\n                                  .getStackTrace\n                                  seq\n                                  (drop 2))\n                       :cljs (->> (ex-info \"\" {})\n                                  .-stack\n                                  (str/split-lines)\n                                  (drop 2)\n                                  (drop-while #(str/includes? % \"ex_info\"))\n                                  (map #(str/replace % \"    at \" \"\"))))\n\n        frames               (if nses-regex\n                               (filter (comp (partial re-find nses-regex) str)\n                                       frames-base)\n                               frames-base)\n\n        frames #?(:clj       (->> frames\n                                  (remove #(clojure.string/includes? % \"spyscope.core\"))\n                                  (take n)\n                                  (map str)\n                                  (reverse))\n                  :cljs (->> frames\n                             (remove #(clojure.string/includes? % \"spyscope$core\"))\n                             (remove #(not (clojure.string/includes? % \"(\")))\n                             (take n)\n                             (reverse)))\n\n        value-string #?(:clj (pp/cprint-str form)\n                        :cljs (str form))\n\n        ;Are there multiple trace lines?\n        multi-trace?         (> n 1)\n\n        ;Indent if it's a multi-line structure\n        value-string         (if (or (> (count value-string) 40)\n                                     (str/includes? value-string \"\\n\"))\n                               (str \"\\n\" (indent 2 value-string))\n                               value-string)\n\n        prefix               (str/join \"\\n\" frames)]\n    {:message (str\n               (when multi-trace?\n                 (str (str/join (repeat 40 \\-)) \\newline))\n               prefix\n               (when-let [time? (:time meta)]\n                 (str \" \" (fmt/unparse (if (string? time?)\n                                         (fmt/formatter time?)\n                                         (fmt/formatters :date-hour-minute-second))\n                                       now)))\n               (when-let [marker (:marker meta)]\n                 (str \" \" marker))\n               (when (or (not (contains? meta :form))\n                         (:form meta))\n                 (str \" \" (pr-str (::form meta))))\n               \" => \" value-string)\n     :frame1  (str (first frames-base))}))\n\n(defn console-log\n  \"Reader function to console log a form's value in CLJS and pprint in CLJ.\"\n  [form]\n  `(macrovich/case\n    :clj (doto ~form pp/cprint)\n    :cljs (doto ~form js/console.log)))\n\n(defn print-log\n  \"Reader function to pprint a form's value.\"\n  [form]\n  `(macrovich/case\n    :clj (doto ~form pp/cprint)\n    :cljs (doto ~form println)))\n\n; Trace storage - an atom rather than an agent is used in cljs.\n#?(:clj  (def ^{:internal true} trace-storage (agent {:trace [] :generation 0}))\n   :cljs (def ^{:internal true} trace-storage (atom {:trace [] :generation 0})))\n\n(defn trace\n  \"Reader function to store detailed information about a form's value at runtime\n  into a trace that can be queried asynchronously.\"\n  [form]\n  `(let [f#     ~form\n         value# (pretty-render-value f#\n                                     ~(assoc (meta form)\n                                        ::form (list 'quote form)))]\n     (when ~(::print? (meta form))\n       (macrovich/case\n        :clj (print (str (:message value#) \"\\n\"))\n        :cljs (print (str (:message value#)))))\n     ((macrovich/case :clj send-off :cljs swap!) trace-storage\n      (fn [{g# :generation t# :trace :as storage#}]\n        (assoc storage#\n          :trace\n          (conj t# (assoc value#\n                     :generation g#)))))\n     f#))\n\n(defn print-log-detailed\n  \"Reader function to pprint a form's value with some extra information.\"\n  [form]\n  (letfn [(print [m] (assoc m ::print? true))]\n    (->> form\n         meta\n         print\n         (with-meta form)\n         trace)))\n\n(defn tap [form]\n  `(let [x# ~form]\n     (when (false? (tap> x#))\n       (println \"tap> queue blocked. Could not put\" x#))\n     x#))\n"]}